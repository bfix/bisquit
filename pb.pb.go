// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.12.3
// source: pb.proto

package bisquit

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type SupportType int32

const (
	SupportType_ARBITRATION SupportType = 0
	SupportType_MEDIATION   SupportType = 1
	SupportType_TRADE       SupportType = 2
	SupportType_REFUND      SupportType = 3
)

// Enum value maps for SupportType.
var (
	SupportType_name = map[int32]string{
		0: "ARBITRATION",
		1: "MEDIATION",
		2: "TRADE",
		3: "REFUND",
	}
	SupportType_value = map[string]int32{
		"ARBITRATION": 0,
		"MEDIATION":   1,
		"TRADE":       2,
		"REFUND":      3,
	}
)

func (x SupportType) Enum() *SupportType {
	p := new(SupportType)
	*p = x
	return p
}

func (x SupportType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SupportType) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_proto_enumTypes[0].Descriptor()
}

func (SupportType) Type() protoreflect.EnumType {
	return &file_pb_proto_enumTypes[0]
}

func (x SupportType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SupportType.Descriptor instead.
func (SupportType) EnumDescriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{0}
}

type AvailabilityResult int32

const (
	AvailabilityResult_PB_ERROR                     AvailabilityResult = 0
	AvailabilityResult_UNKNOWN_FAILURE              AvailabilityResult = 1
	AvailabilityResult_AVAILABLE                    AvailabilityResult = 2
	AvailabilityResult_OFFER_TAKEN                  AvailabilityResult = 3
	AvailabilityResult_PRICE_OUT_OF_TOLERANCE       AvailabilityResult = 4
	AvailabilityResult_MARKET_PRICE_NOT_AVAILABLE   AvailabilityResult = 5
	AvailabilityResult_NO_ARBITRATORS               AvailabilityResult = 6
	AvailabilityResult_NO_MEDIATORS                 AvailabilityResult = 7
	AvailabilityResult_USER_IGNORED                 AvailabilityResult = 8
	AvailabilityResult_MISSING_MANDATORY_CAPABILITY AvailabilityResult = 9
	AvailabilityResult_NO_REFUND_AGENTS             AvailabilityResult = 10
	AvailabilityResult_UNCONF_TX_LIMIT_HIT          AvailabilityResult = 11
	AvailabilityResult_MAKER_DENIED_API_USER        AvailabilityResult = 12
)

// Enum value maps for AvailabilityResult.
var (
	AvailabilityResult_name = map[int32]string{
		0:  "PB_ERROR",
		1:  "UNKNOWN_FAILURE",
		2:  "AVAILABLE",
		3:  "OFFER_TAKEN",
		4:  "PRICE_OUT_OF_TOLERANCE",
		5:  "MARKET_PRICE_NOT_AVAILABLE",
		6:  "NO_ARBITRATORS",
		7:  "NO_MEDIATORS",
		8:  "USER_IGNORED",
		9:  "MISSING_MANDATORY_CAPABILITY",
		10: "NO_REFUND_AGENTS",
		11: "UNCONF_TX_LIMIT_HIT",
		12: "MAKER_DENIED_API_USER",
	}
	AvailabilityResult_value = map[string]int32{
		"PB_ERROR":                     0,
		"UNKNOWN_FAILURE":              1,
		"AVAILABLE":                    2,
		"OFFER_TAKEN":                  3,
		"PRICE_OUT_OF_TOLERANCE":       4,
		"MARKET_PRICE_NOT_AVAILABLE":   5,
		"NO_ARBITRATORS":               6,
		"NO_MEDIATORS":                 7,
		"USER_IGNORED":                 8,
		"MISSING_MANDATORY_CAPABILITY": 9,
		"NO_REFUND_AGENTS":             10,
		"UNCONF_TX_LIMIT_HIT":          11,
		"MAKER_DENIED_API_USER":        12,
	}
)

func (x AvailabilityResult) Enum() *AvailabilityResult {
	p := new(AvailabilityResult)
	*p = x
	return p
}

func (x AvailabilityResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AvailabilityResult) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_proto_enumTypes[1].Descriptor()
}

func (AvailabilityResult) Type() protoreflect.EnumType {
	return &file_pb_proto_enumTypes[1]
}

func (x AvailabilityResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AvailabilityResult.Descriptor instead.
func (AvailabilityResult) EnumDescriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{1}
}

type MediationResultState int32

const (
	MediationResultState_PB_ERROR_MEDIATION_RESULT           MediationResultState = 0
	MediationResultState_UNDEFINED_MEDIATION_RESULT          MediationResultState = 1
	MediationResultState_MEDIATION_RESULT_ACCEPTED           MediationResultState = 2
	MediationResultState_MEDIATION_RESULT_REJECTED           MediationResultState = 3
	MediationResultState_SIG_MSG_SENT                        MediationResultState = 4
	MediationResultState_SIG_MSG_ARRIVED                     MediationResultState = 5
	MediationResultState_SIG_MSG_IN_MAILBOX                  MediationResultState = 6
	MediationResultState_SIG_MSG_SEND_FAILED                 MediationResultState = 7
	MediationResultState_RECEIVED_SIG_MSG                    MediationResultState = 8
	MediationResultState_PAYOUT_TX_PUBLISHED                 MediationResultState = 9
	MediationResultState_PAYOUT_TX_PUBLISHED_MSG_SENT        MediationResultState = 10
	MediationResultState_PAYOUT_TX_PUBLISHED_MSG_ARRIVED     MediationResultState = 11
	MediationResultState_PAYOUT_TX_PUBLISHED_MSG_IN_MAILBOX  MediationResultState = 12
	MediationResultState_PAYOUT_TX_PUBLISHED_MSG_SEND_FAILED MediationResultState = 13
	MediationResultState_RECEIVED_PAYOUT_TX_PUBLISHED_MSG    MediationResultState = 14
	MediationResultState_PAYOUT_TX_SEEN_IN_NETWORK           MediationResultState = 15
)

// Enum value maps for MediationResultState.
var (
	MediationResultState_name = map[int32]string{
		0:  "PB_ERROR_MEDIATION_RESULT",
		1:  "UNDEFINED_MEDIATION_RESULT",
		2:  "MEDIATION_RESULT_ACCEPTED",
		3:  "MEDIATION_RESULT_REJECTED",
		4:  "SIG_MSG_SENT",
		5:  "SIG_MSG_ARRIVED",
		6:  "SIG_MSG_IN_MAILBOX",
		7:  "SIG_MSG_SEND_FAILED",
		8:  "RECEIVED_SIG_MSG",
		9:  "PAYOUT_TX_PUBLISHED",
		10: "PAYOUT_TX_PUBLISHED_MSG_SENT",
		11: "PAYOUT_TX_PUBLISHED_MSG_ARRIVED",
		12: "PAYOUT_TX_PUBLISHED_MSG_IN_MAILBOX",
		13: "PAYOUT_TX_PUBLISHED_MSG_SEND_FAILED",
		14: "RECEIVED_PAYOUT_TX_PUBLISHED_MSG",
		15: "PAYOUT_TX_SEEN_IN_NETWORK",
	}
	MediationResultState_value = map[string]int32{
		"PB_ERROR_MEDIATION_RESULT":           0,
		"UNDEFINED_MEDIATION_RESULT":          1,
		"MEDIATION_RESULT_ACCEPTED":           2,
		"MEDIATION_RESULT_REJECTED":           3,
		"SIG_MSG_SENT":                        4,
		"SIG_MSG_ARRIVED":                     5,
		"SIG_MSG_IN_MAILBOX":                  6,
		"SIG_MSG_SEND_FAILED":                 7,
		"RECEIVED_SIG_MSG":                    8,
		"PAYOUT_TX_PUBLISHED":                 9,
		"PAYOUT_TX_PUBLISHED_MSG_SENT":        10,
		"PAYOUT_TX_PUBLISHED_MSG_ARRIVED":     11,
		"PAYOUT_TX_PUBLISHED_MSG_IN_MAILBOX":  12,
		"PAYOUT_TX_PUBLISHED_MSG_SEND_FAILED": 13,
		"RECEIVED_PAYOUT_TX_PUBLISHED_MSG":    14,
		"PAYOUT_TX_SEEN_IN_NETWORK":           15,
	}
)

func (x MediationResultState) Enum() *MediationResultState {
	p := new(MediationResultState)
	*p = x
	return p
}

func (x MediationResultState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MediationResultState) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_proto_enumTypes[2].Descriptor()
}

func (MediationResultState) Type() protoreflect.EnumType {
	return &file_pb_proto_enumTypes[2]
}

func (x MediationResultState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MediationResultState.Descriptor instead.
func (MediationResultState) EnumDescriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{2}
}

//todo
type RefundResultState int32

const (
	RefundResultState_PB_ERROR_REFUND_RESULT  RefundResultState = 0
	RefundResultState_UNDEFINED_REFUND_RESULT RefundResultState = 1
)

// Enum value maps for RefundResultState.
var (
	RefundResultState_name = map[int32]string{
		0: "PB_ERROR_REFUND_RESULT",
		1: "UNDEFINED_REFUND_RESULT",
	}
	RefundResultState_value = map[string]int32{
		"PB_ERROR_REFUND_RESULT":  0,
		"UNDEFINED_REFUND_RESULT": 1,
	}
)

func (x RefundResultState) Enum() *RefundResultState {
	p := new(RefundResultState)
	*p = x
	return p
}

func (x RefundResultState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RefundResultState) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_proto_enumTypes[3].Descriptor()
}

func (RefundResultState) Type() protoreflect.EnumType {
	return &file_pb_proto_enumTypes[3]
}

func (x RefundResultState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RefundResultState.Descriptor instead.
func (RefundResultState) EnumDescriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{3}
}

type TxType int32

const (
	TxType_PB_ERROR_TX_TYPE      TxType = 0
	TxType_UNDEFINED_TX_TYPE     TxType = 1
	TxType_UNVERIFIED            TxType = 2
	TxType_INVALID               TxType = 3
	TxType_GENESIS               TxType = 4
	TxType_TRANSFER_BSQ          TxType = 5
	TxType_PAY_TRADE_FEE         TxType = 6
	TxType_PROPOSAL              TxType = 7
	TxType_COMPENSATION_REQUEST  TxType = 8
	TxType_REIMBURSEMENT_REQUEST TxType = 9
	TxType_BLIND_VOTE            TxType = 10
	TxType_VOTE_REVEAL           TxType = 11
	TxType_LOCKUP                TxType = 12
	TxType_UNLOCK                TxType = 13
	TxType_ASSET_LISTING_FEE     TxType = 14
	TxType_PROOF_OF_BURN         TxType = 15
	TxType_IRREGULAR             TxType = 16
)

// Enum value maps for TxType.
var (
	TxType_name = map[int32]string{
		0:  "PB_ERROR_TX_TYPE",
		1:  "UNDEFINED_TX_TYPE",
		2:  "UNVERIFIED",
		3:  "INVALID",
		4:  "GENESIS",
		5:  "TRANSFER_BSQ",
		6:  "PAY_TRADE_FEE",
		7:  "PROPOSAL",
		8:  "COMPENSATION_REQUEST",
		9:  "REIMBURSEMENT_REQUEST",
		10: "BLIND_VOTE",
		11: "VOTE_REVEAL",
		12: "LOCKUP",
		13: "UNLOCK",
		14: "ASSET_LISTING_FEE",
		15: "PROOF_OF_BURN",
		16: "IRREGULAR",
	}
	TxType_value = map[string]int32{
		"PB_ERROR_TX_TYPE":      0,
		"UNDEFINED_TX_TYPE":     1,
		"UNVERIFIED":            2,
		"INVALID":               3,
		"GENESIS":               4,
		"TRANSFER_BSQ":          5,
		"PAY_TRADE_FEE":         6,
		"PROPOSAL":              7,
		"COMPENSATION_REQUEST":  8,
		"REIMBURSEMENT_REQUEST": 9,
		"BLIND_VOTE":            10,
		"VOTE_REVEAL":           11,
		"LOCKUP":                12,
		"UNLOCK":                13,
		"ASSET_LISTING_FEE":     14,
		"PROOF_OF_BURN":         15,
		"IRREGULAR":             16,
	}
)

func (x TxType) Enum() *TxType {
	p := new(TxType)
	*p = x
	return p
}

func (x TxType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TxType) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_proto_enumTypes[4].Descriptor()
}

func (TxType) Type() protoreflect.EnumType {
	return &file_pb_proto_enumTypes[4]
}

func (x TxType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TxType.Descriptor instead.
func (TxType) EnumDescriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{4}
}

type TxOutputType int32

const (
	TxOutputType_PB_ERROR_TX_OUTPUT_TYPE            TxOutputType = 0
	TxOutputType_UNDEFINED_OUTPUT                   TxOutputType = 1
	TxOutputType_GENESIS_OUTPUT                     TxOutputType = 2
	TxOutputType_BSQ_OUTPUT                         TxOutputType = 3
	TxOutputType_BTC_OUTPUT                         TxOutputType = 4
	TxOutputType_PROPOSAL_OP_RETURN_OUTPUT          TxOutputType = 5
	TxOutputType_COMP_REQ_OP_RETURN_OUTPUT          TxOutputType = 6
	TxOutputType_REIMBURSEMENT_OP_RETURN_OUTPUT     TxOutputType = 7
	TxOutputType_CONFISCATE_BOND_OP_RETURN_OUTPUT   TxOutputType = 8
	TxOutputType_ISSUANCE_CANDIDATE_OUTPUT          TxOutputType = 9
	TxOutputType_BLIND_VOTE_LOCK_STAKE_OUTPUT       TxOutputType = 10
	TxOutputType_BLIND_VOTE_OP_RETURN_OUTPUT        TxOutputType = 11
	TxOutputType_VOTE_REVEAL_UNLOCK_STAKE_OUTPUT    TxOutputType = 12
	TxOutputType_VOTE_REVEAL_OP_RETURN_OUTPUT       TxOutputType = 13
	TxOutputType_ASSET_LISTING_FEE_OP_RETURN_OUTPUT TxOutputType = 14
	TxOutputType_PROOF_OF_BURN_OP_RETURN_OUTPUT     TxOutputType = 15
	TxOutputType_LOCKUP_OUTPUT                      TxOutputType = 16
	TxOutputType_LOCKUP_OP_RETURN_OUTPUT            TxOutputType = 17
	TxOutputType_UNLOCK_OUTPUT                      TxOutputType = 18
	TxOutputType_INVALID_OUTPUT                     TxOutputType = 19
)

// Enum value maps for TxOutputType.
var (
	TxOutputType_name = map[int32]string{
		0:  "PB_ERROR_TX_OUTPUT_TYPE",
		1:  "UNDEFINED_OUTPUT",
		2:  "GENESIS_OUTPUT",
		3:  "BSQ_OUTPUT",
		4:  "BTC_OUTPUT",
		5:  "PROPOSAL_OP_RETURN_OUTPUT",
		6:  "COMP_REQ_OP_RETURN_OUTPUT",
		7:  "REIMBURSEMENT_OP_RETURN_OUTPUT",
		8:  "CONFISCATE_BOND_OP_RETURN_OUTPUT",
		9:  "ISSUANCE_CANDIDATE_OUTPUT",
		10: "BLIND_VOTE_LOCK_STAKE_OUTPUT",
		11: "BLIND_VOTE_OP_RETURN_OUTPUT",
		12: "VOTE_REVEAL_UNLOCK_STAKE_OUTPUT",
		13: "VOTE_REVEAL_OP_RETURN_OUTPUT",
		14: "ASSET_LISTING_FEE_OP_RETURN_OUTPUT",
		15: "PROOF_OF_BURN_OP_RETURN_OUTPUT",
		16: "LOCKUP_OUTPUT",
		17: "LOCKUP_OP_RETURN_OUTPUT",
		18: "UNLOCK_OUTPUT",
		19: "INVALID_OUTPUT",
	}
	TxOutputType_value = map[string]int32{
		"PB_ERROR_TX_OUTPUT_TYPE":            0,
		"UNDEFINED_OUTPUT":                   1,
		"GENESIS_OUTPUT":                     2,
		"BSQ_OUTPUT":                         3,
		"BTC_OUTPUT":                         4,
		"PROPOSAL_OP_RETURN_OUTPUT":          5,
		"COMP_REQ_OP_RETURN_OUTPUT":          6,
		"REIMBURSEMENT_OP_RETURN_OUTPUT":     7,
		"CONFISCATE_BOND_OP_RETURN_OUTPUT":   8,
		"ISSUANCE_CANDIDATE_OUTPUT":          9,
		"BLIND_VOTE_LOCK_STAKE_OUTPUT":       10,
		"BLIND_VOTE_OP_RETURN_OUTPUT":        11,
		"VOTE_REVEAL_UNLOCK_STAKE_OUTPUT":    12,
		"VOTE_REVEAL_OP_RETURN_OUTPUT":       13,
		"ASSET_LISTING_FEE_OP_RETURN_OUTPUT": 14,
		"PROOF_OF_BURN_OP_RETURN_OUTPUT":     15,
		"LOCKUP_OUTPUT":                      16,
		"LOCKUP_OP_RETURN_OUTPUT":            17,
		"UNLOCK_OUTPUT":                      18,
		"INVALID_OUTPUT":                     19,
	}
)

func (x TxOutputType) Enum() *TxOutputType {
	p := new(TxOutputType)
	*p = x
	return p
}

func (x TxOutputType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TxOutputType) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_proto_enumTypes[5].Descriptor()
}

func (TxOutputType) Type() protoreflect.EnumType {
	return &file_pb_proto_enumTypes[5]
}

func (x TxOutputType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TxOutputType.Descriptor instead.
func (TxOutputType) EnumDescriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{5}
}

type ScriptType int32

const (
	ScriptType_PB_ERROR_SCRIPT_TYPES ScriptType = 0
	ScriptType_PUB_KEY               ScriptType = 1
	ScriptType_PUB_KEY_HASH          ScriptType = 2
	ScriptType_SCRIPT_HASH           ScriptType = 3
	ScriptType_MULTISIG              ScriptType = 4
	ScriptType_NULL_DATA             ScriptType = 5
	ScriptType_WITNESS_V0_KEYHASH    ScriptType = 6
	ScriptType_WITNESS_V0_SCRIPTHASH ScriptType = 7
	ScriptType_NONSTANDARD           ScriptType = 8
)

// Enum value maps for ScriptType.
var (
	ScriptType_name = map[int32]string{
		0: "PB_ERROR_SCRIPT_TYPES",
		1: "PUB_KEY",
		2: "PUB_KEY_HASH",
		3: "SCRIPT_HASH",
		4: "MULTISIG",
		5: "NULL_DATA",
		6: "WITNESS_V0_KEYHASH",
		7: "WITNESS_V0_SCRIPTHASH",
		8: "NONSTANDARD",
	}
	ScriptType_value = map[string]int32{
		"PB_ERROR_SCRIPT_TYPES": 0,
		"PUB_KEY":               1,
		"PUB_KEY_HASH":          2,
		"SCRIPT_HASH":           3,
		"MULTISIG":              4,
		"NULL_DATA":             5,
		"WITNESS_V0_KEYHASH":    6,
		"WITNESS_V0_SCRIPTHASH": 7,
		"NONSTANDARD":           8,
	}
)

func (x ScriptType) Enum() *ScriptType {
	p := new(ScriptType)
	*p = x
	return p
}

func (x ScriptType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ScriptType) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_proto_enumTypes[6].Descriptor()
}

func (ScriptType) Type() protoreflect.EnumType {
	return &file_pb_proto_enumTypes[6]
}

func (x ScriptType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ScriptType.Descriptor instead.
func (ScriptType) EnumDescriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{6}
}

type OfferPayload_Direction int32

const (
	OfferPayload_PB_ERROR OfferPayload_Direction = 0
	OfferPayload_BUY      OfferPayload_Direction = 1
	OfferPayload_SELL     OfferPayload_Direction = 2
)

// Enum value maps for OfferPayload_Direction.
var (
	OfferPayload_Direction_name = map[int32]string{
		0: "PB_ERROR",
		1: "BUY",
		2: "SELL",
	}
	OfferPayload_Direction_value = map[string]int32{
		"PB_ERROR": 0,
		"BUY":      1,
		"SELL":     2,
	}
)

func (x OfferPayload_Direction) Enum() *OfferPayload_Direction {
	p := new(OfferPayload_Direction)
	*p = x
	return p
}

func (x OfferPayload_Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OfferPayload_Direction) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_proto_enumTypes[7].Descriptor()
}

func (OfferPayload_Direction) Type() protoreflect.EnumType {
	return &file_pb_proto_enumTypes[7]
}

func (x OfferPayload_Direction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OfferPayload_Direction.Descriptor instead.
func (OfferPayload_Direction) EnumDescriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{79, 0}
}

type SignedWitness_VerificationMethod int32

const (
	SignedWitness_PB_ERROR   SignedWitness_VerificationMethod = 0
	SignedWitness_ARBITRATOR SignedWitness_VerificationMethod = 1
	SignedWitness_TRADE      SignedWitness_VerificationMethod = 2
)

// Enum value maps for SignedWitness_VerificationMethod.
var (
	SignedWitness_VerificationMethod_name = map[int32]string{
		0: "PB_ERROR",
		1: "ARBITRATOR",
		2: "TRADE",
	}
	SignedWitness_VerificationMethod_value = map[string]int32{
		"PB_ERROR":   0,
		"ARBITRATOR": 1,
		"TRADE":      2,
	}
)

func (x SignedWitness_VerificationMethod) Enum() *SignedWitness_VerificationMethod {
	p := new(SignedWitness_VerificationMethod)
	*p = x
	return p
}

func (x SignedWitness_VerificationMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SignedWitness_VerificationMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_proto_enumTypes[8].Descriptor()
}

func (SignedWitness_VerificationMethod) Type() protoreflect.EnumType {
	return &file_pb_proto_enumTypes[8]
}

func (x SignedWitness_VerificationMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SignedWitness_VerificationMethod.Descriptor instead.
func (SignedWitness_VerificationMethod) EnumDescriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{81, 0}
}

type DisputeResult_Winner int32

const (
	DisputeResult_PB_ERROR_WINNER DisputeResult_Winner = 0
	DisputeResult_BUYER           DisputeResult_Winner = 1
	DisputeResult_SELLER          DisputeResult_Winner = 2
)

// Enum value maps for DisputeResult_Winner.
var (
	DisputeResult_Winner_name = map[int32]string{
		0: "PB_ERROR_WINNER",
		1: "BUYER",
		2: "SELLER",
	}
	DisputeResult_Winner_value = map[string]int32{
		"PB_ERROR_WINNER": 0,
		"BUYER":           1,
		"SELLER":          2,
	}
)

func (x DisputeResult_Winner) Enum() *DisputeResult_Winner {
	p := new(DisputeResult_Winner)
	*p = x
	return p
}

func (x DisputeResult_Winner) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DisputeResult_Winner) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_proto_enumTypes[9].Descriptor()
}

func (DisputeResult_Winner) Type() protoreflect.EnumType {
	return &file_pb_proto_enumTypes[9]
}

func (x DisputeResult_Winner) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DisputeResult_Winner.Descriptor instead.
func (DisputeResult_Winner) EnumDescriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{84, 0}
}

type DisputeResult_Reason int32

const (
	DisputeResult_PB_ERROR_REASON       DisputeResult_Reason = 0
	DisputeResult_OTHER                 DisputeResult_Reason = 1
	DisputeResult_BUG                   DisputeResult_Reason = 2
	DisputeResult_USABILITY             DisputeResult_Reason = 3
	DisputeResult_SCAM                  DisputeResult_Reason = 4
	DisputeResult_PROTOCOL_VIOLATION    DisputeResult_Reason = 5
	DisputeResult_NO_REPLY              DisputeResult_Reason = 6
	DisputeResult_BANK_PROBLEMS         DisputeResult_Reason = 7
	DisputeResult_OPTION_TRADE          DisputeResult_Reason = 8
	DisputeResult_SELLER_NOT_RESPONDING DisputeResult_Reason = 9
	DisputeResult_WRONG_SENDER_ACCOUNT  DisputeResult_Reason = 10
	DisputeResult_TRADE_ALREADY_SETTLED DisputeResult_Reason = 11
	DisputeResult_PEER_WAS_LATE         DisputeResult_Reason = 12
)

// Enum value maps for DisputeResult_Reason.
var (
	DisputeResult_Reason_name = map[int32]string{
		0:  "PB_ERROR_REASON",
		1:  "OTHER",
		2:  "BUG",
		3:  "USABILITY",
		4:  "SCAM",
		5:  "PROTOCOL_VIOLATION",
		6:  "NO_REPLY",
		7:  "BANK_PROBLEMS",
		8:  "OPTION_TRADE",
		9:  "SELLER_NOT_RESPONDING",
		10: "WRONG_SENDER_ACCOUNT",
		11: "TRADE_ALREADY_SETTLED",
		12: "PEER_WAS_LATE",
	}
	DisputeResult_Reason_value = map[string]int32{
		"PB_ERROR_REASON":       0,
		"OTHER":                 1,
		"BUG":                   2,
		"USABILITY":             3,
		"SCAM":                  4,
		"PROTOCOL_VIOLATION":    5,
		"NO_REPLY":              6,
		"BANK_PROBLEMS":         7,
		"OPTION_TRADE":          8,
		"SELLER_NOT_RESPONDING": 9,
		"WRONG_SENDER_ACCOUNT":  10,
		"TRADE_ALREADY_SETTLED": 11,
		"PEER_WAS_LATE":         12,
	}
)

func (x DisputeResult_Reason) Enum() *DisputeResult_Reason {
	p := new(DisputeResult_Reason)
	*p = x
	return p
}

func (x DisputeResult_Reason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DisputeResult_Reason) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_proto_enumTypes[10].Descriptor()
}

func (DisputeResult_Reason) Type() protoreflect.EnumType {
	return &file_pb_proto_enumTypes[10]
}

func (x DisputeResult_Reason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DisputeResult_Reason.Descriptor instead.
func (DisputeResult_Reason) EnumDescriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{84, 1}
}

type AddressEntry_Context int32

const (
	AddressEntry_PB_ERROR           AddressEntry_Context = 0
	AddressEntry_ARBITRATOR         AddressEntry_Context = 1
	AddressEntry_AVAILABLE          AddressEntry_Context = 2
	AddressEntry_OFFER_FUNDING      AddressEntry_Context = 3
	AddressEntry_RESERVED_FOR_TRADE AddressEntry_Context = 4
	AddressEntry_MULTI_SIG          AddressEntry_Context = 5
	AddressEntry_TRADE_PAYOUT       AddressEntry_Context = 6
)

// Enum value maps for AddressEntry_Context.
var (
	AddressEntry_Context_name = map[int32]string{
		0: "PB_ERROR",
		1: "ARBITRATOR",
		2: "AVAILABLE",
		3: "OFFER_FUNDING",
		4: "RESERVED_FOR_TRADE",
		5: "MULTI_SIG",
		6: "TRADE_PAYOUT",
	}
	AddressEntry_Context_value = map[string]int32{
		"PB_ERROR":           0,
		"ARBITRATOR":         1,
		"AVAILABLE":          2,
		"OFFER_FUNDING":      3,
		"RESERVED_FOR_TRADE": 4,
		"MULTI_SIG":          5,
		"TRADE_PAYOUT":       6,
	}
)

func (x AddressEntry_Context) Enum() *AddressEntry_Context {
	p := new(AddressEntry_Context)
	*p = x
	return p
}

func (x AddressEntry_Context) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AddressEntry_Context) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_proto_enumTypes[11].Descriptor()
}

func (AddressEntry_Context) Type() protoreflect.EnumType {
	return &file_pb_proto_enumTypes[11]
}

func (x AddressEntry_Context) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AddressEntry_Context.Descriptor instead.
func (AddressEntry_Context) EnumDescriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{137, 0}
}

type Offer_State int32

const (
	Offer_PB_ERROR       Offer_State = 0
	Offer_UNKNOWN        Offer_State = 1
	Offer_OFFER_FEE_PAID Offer_State = 2
	Offer_AVAILABLE      Offer_State = 3
	Offer_NOT_AVAILABLE  Offer_State = 4
	Offer_REMOVED        Offer_State = 5
	Offer_MAKER_OFFLINE  Offer_State = 6
)

// Enum value maps for Offer_State.
var (
	Offer_State_name = map[int32]string{
		0: "PB_ERROR",
		1: "UNKNOWN",
		2: "OFFER_FEE_PAID",
		3: "AVAILABLE",
		4: "NOT_AVAILABLE",
		5: "REMOVED",
		6: "MAKER_OFFLINE",
	}
	Offer_State_value = map[string]int32{
		"PB_ERROR":       0,
		"UNKNOWN":        1,
		"OFFER_FEE_PAID": 2,
		"AVAILABLE":      3,
		"NOT_AVAILABLE":  4,
		"REMOVED":        5,
		"MAKER_OFFLINE":  6,
	}
)

func (x Offer_State) Enum() *Offer_State {
	p := new(Offer_State)
	*p = x
	return p
}

func (x Offer_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Offer_State) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_proto_enumTypes[12].Descriptor()
}

func (Offer_State) Type() protoreflect.EnumType {
	return &file_pb_proto_enumTypes[12]
}

func (x Offer_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Offer_State.Descriptor instead.
func (Offer_State) EnumDescriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{141, 0}
}

type OpenOffer_State int32

const (
	OpenOffer_PB_ERROR    OpenOffer_State = 0
	OpenOffer_AVAILABLE   OpenOffer_State = 1
	OpenOffer_RESERVED    OpenOffer_State = 2
	OpenOffer_CLOSED      OpenOffer_State = 3
	OpenOffer_CANCELED    OpenOffer_State = 4
	OpenOffer_DEACTIVATED OpenOffer_State = 5
)

// Enum value maps for OpenOffer_State.
var (
	OpenOffer_State_name = map[int32]string{
		0: "PB_ERROR",
		1: "AVAILABLE",
		2: "RESERVED",
		3: "CLOSED",
		4: "CANCELED",
		5: "DEACTIVATED",
	}
	OpenOffer_State_value = map[string]int32{
		"PB_ERROR":    0,
		"AVAILABLE":   1,
		"RESERVED":    2,
		"CLOSED":      3,
		"CANCELED":    4,
		"DEACTIVATED": 5,
	}
)

func (x OpenOffer_State) Enum() *OpenOffer_State {
	p := new(OpenOffer_State)
	*p = x
	return p
}

func (x OpenOffer_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenOffer_State) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_proto_enumTypes[13].Descriptor()
}

func (OpenOffer_State) Type() protoreflect.EnumType {
	return &file_pb_proto_enumTypes[13]
}

func (x OpenOffer_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenOffer_State.Descriptor instead.
func (OpenOffer_State) EnumDescriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{142, 0}
}

type Trade_State int32

const (
	Trade_PB_ERROR_STATE                                     Trade_State = 0
	Trade_PREPARATION                                        Trade_State = 1
	Trade_TAKER_PUBLISHED_TAKER_FEE_TX                       Trade_State = 2
	Trade_MAKER_SENT_PUBLISH_DEPOSIT_TX_REQUEST              Trade_State = 3
	Trade_MAKER_SAW_ARRIVED_PUBLISH_DEPOSIT_TX_REQUEST       Trade_State = 4
	Trade_MAKER_STORED_IN_MAILBOX_PUBLISH_DEPOSIT_TX_REQUEST Trade_State = 5
	Trade_MAKER_SEND_FAILED_PUBLISH_DEPOSIT_TX_REQUEST       Trade_State = 6
	Trade_TAKER_RECEIVED_PUBLISH_DEPOSIT_TX_REQUEST          Trade_State = 7
	Trade_SELLER_PUBLISHED_DEPOSIT_TX                        Trade_State = 8
	Trade_SELLER_SENT_DEPOSIT_TX_PUBLISHED_MSG               Trade_State = 9
	Trade_SELLER_SAW_ARRIVED_DEPOSIT_TX_PUBLISHED_MSG        Trade_State = 10
	Trade_SELLER_STORED_IN_MAILBOX_DEPOSIT_TX_PUBLISHED_MSG  Trade_State = 11
	Trade_SELLER_SEND_FAILED_DEPOSIT_TX_PUBLISHED_MSG        Trade_State = 12
	Trade_BUYER_RECEIVED_DEPOSIT_TX_PUBLISHED_MSG            Trade_State = 13
	Trade_BUYER_SAW_DEPOSIT_TX_IN_NETWORK                    Trade_State = 14
	Trade_DEPOSIT_CONFIRMED_IN_BLOCK_CHAIN                   Trade_State = 15
	Trade_BUYER_CONFIRMED_IN_UI_FIAT_PAYMENT_INITIATED       Trade_State = 16
	Trade_BUYER_SENT_FIAT_PAYMENT_INITIATED_MSG              Trade_State = 17
	Trade_BUYER_SAW_ARRIVED_FIAT_PAYMENT_INITIATED_MSG       Trade_State = 18
	Trade_BUYER_STORED_IN_MAILBOX_FIAT_PAYMENT_INITIATED_MSG Trade_State = 19
	Trade_BUYER_SEND_FAILED_FIAT_PAYMENT_INITIATED_MSG       Trade_State = 20
	Trade_SELLER_RECEIVED_FIAT_PAYMENT_INITIATED_MSG         Trade_State = 21
	Trade_SELLER_CONFIRMED_IN_UI_FIAT_PAYMENT_RECEIPT        Trade_State = 22
	Trade_SELLER_PUBLISHED_PAYOUT_TX                         Trade_State = 23
	Trade_SELLER_SENT_PAYOUT_TX_PUBLISHED_MSG                Trade_State = 24
	Trade_SELLER_SAW_ARRIVED_PAYOUT_TX_PUBLISHED_MSG         Trade_State = 25
	Trade_SELLER_STORED_IN_MAILBOX_PAYOUT_TX_PUBLISHED_MSG   Trade_State = 26
	Trade_SELLER_SEND_FAILED_PAYOUT_TX_PUBLISHED_MSG         Trade_State = 27
	Trade_BUYER_RECEIVED_PAYOUT_TX_PUBLISHED_MSG             Trade_State = 28
	Trade_BUYER_SAW_PAYOUT_TX_IN_NETWORK                     Trade_State = 29
	Trade_WITHDRAW_COMPLETED                                 Trade_State = 30
)

// Enum value maps for Trade_State.
var (
	Trade_State_name = map[int32]string{
		0:  "PB_ERROR_STATE",
		1:  "PREPARATION",
		2:  "TAKER_PUBLISHED_TAKER_FEE_TX",
		3:  "MAKER_SENT_PUBLISH_DEPOSIT_TX_REQUEST",
		4:  "MAKER_SAW_ARRIVED_PUBLISH_DEPOSIT_TX_REQUEST",
		5:  "MAKER_STORED_IN_MAILBOX_PUBLISH_DEPOSIT_TX_REQUEST",
		6:  "MAKER_SEND_FAILED_PUBLISH_DEPOSIT_TX_REQUEST",
		7:  "TAKER_RECEIVED_PUBLISH_DEPOSIT_TX_REQUEST",
		8:  "SELLER_PUBLISHED_DEPOSIT_TX",
		9:  "SELLER_SENT_DEPOSIT_TX_PUBLISHED_MSG",
		10: "SELLER_SAW_ARRIVED_DEPOSIT_TX_PUBLISHED_MSG",
		11: "SELLER_STORED_IN_MAILBOX_DEPOSIT_TX_PUBLISHED_MSG",
		12: "SELLER_SEND_FAILED_DEPOSIT_TX_PUBLISHED_MSG",
		13: "BUYER_RECEIVED_DEPOSIT_TX_PUBLISHED_MSG",
		14: "BUYER_SAW_DEPOSIT_TX_IN_NETWORK",
		15: "DEPOSIT_CONFIRMED_IN_BLOCK_CHAIN",
		16: "BUYER_CONFIRMED_IN_UI_FIAT_PAYMENT_INITIATED",
		17: "BUYER_SENT_FIAT_PAYMENT_INITIATED_MSG",
		18: "BUYER_SAW_ARRIVED_FIAT_PAYMENT_INITIATED_MSG",
		19: "BUYER_STORED_IN_MAILBOX_FIAT_PAYMENT_INITIATED_MSG",
		20: "BUYER_SEND_FAILED_FIAT_PAYMENT_INITIATED_MSG",
		21: "SELLER_RECEIVED_FIAT_PAYMENT_INITIATED_MSG",
		22: "SELLER_CONFIRMED_IN_UI_FIAT_PAYMENT_RECEIPT",
		23: "SELLER_PUBLISHED_PAYOUT_TX",
		24: "SELLER_SENT_PAYOUT_TX_PUBLISHED_MSG",
		25: "SELLER_SAW_ARRIVED_PAYOUT_TX_PUBLISHED_MSG",
		26: "SELLER_STORED_IN_MAILBOX_PAYOUT_TX_PUBLISHED_MSG",
		27: "SELLER_SEND_FAILED_PAYOUT_TX_PUBLISHED_MSG",
		28: "BUYER_RECEIVED_PAYOUT_TX_PUBLISHED_MSG",
		29: "BUYER_SAW_PAYOUT_TX_IN_NETWORK",
		30: "WITHDRAW_COMPLETED",
	}
	Trade_State_value = map[string]int32{
		"PB_ERROR_STATE":                                     0,
		"PREPARATION":                                        1,
		"TAKER_PUBLISHED_TAKER_FEE_TX":                       2,
		"MAKER_SENT_PUBLISH_DEPOSIT_TX_REQUEST":              3,
		"MAKER_SAW_ARRIVED_PUBLISH_DEPOSIT_TX_REQUEST":       4,
		"MAKER_STORED_IN_MAILBOX_PUBLISH_DEPOSIT_TX_REQUEST": 5,
		"MAKER_SEND_FAILED_PUBLISH_DEPOSIT_TX_REQUEST":       6,
		"TAKER_RECEIVED_PUBLISH_DEPOSIT_TX_REQUEST":          7,
		"SELLER_PUBLISHED_DEPOSIT_TX":                        8,
		"SELLER_SENT_DEPOSIT_TX_PUBLISHED_MSG":               9,
		"SELLER_SAW_ARRIVED_DEPOSIT_TX_PUBLISHED_MSG":        10,
		"SELLER_STORED_IN_MAILBOX_DEPOSIT_TX_PUBLISHED_MSG":  11,
		"SELLER_SEND_FAILED_DEPOSIT_TX_PUBLISHED_MSG":        12,
		"BUYER_RECEIVED_DEPOSIT_TX_PUBLISHED_MSG":            13,
		"BUYER_SAW_DEPOSIT_TX_IN_NETWORK":                    14,
		"DEPOSIT_CONFIRMED_IN_BLOCK_CHAIN":                   15,
		"BUYER_CONFIRMED_IN_UI_FIAT_PAYMENT_INITIATED":       16,
		"BUYER_SENT_FIAT_PAYMENT_INITIATED_MSG":              17,
		"BUYER_SAW_ARRIVED_FIAT_PAYMENT_INITIATED_MSG":       18,
		"BUYER_STORED_IN_MAILBOX_FIAT_PAYMENT_INITIATED_MSG": 19,
		"BUYER_SEND_FAILED_FIAT_PAYMENT_INITIATED_MSG":       20,
		"SELLER_RECEIVED_FIAT_PAYMENT_INITIATED_MSG":         21,
		"SELLER_CONFIRMED_IN_UI_FIAT_PAYMENT_RECEIPT":        22,
		"SELLER_PUBLISHED_PAYOUT_TX":                         23,
		"SELLER_SENT_PAYOUT_TX_PUBLISHED_MSG":                24,
		"SELLER_SAW_ARRIVED_PAYOUT_TX_PUBLISHED_MSG":         25,
		"SELLER_STORED_IN_MAILBOX_PAYOUT_TX_PUBLISHED_MSG":   26,
		"SELLER_SEND_FAILED_PAYOUT_TX_PUBLISHED_MSG":         27,
		"BUYER_RECEIVED_PAYOUT_TX_PUBLISHED_MSG":             28,
		"BUYER_SAW_PAYOUT_TX_IN_NETWORK":                     29,
		"WITHDRAW_COMPLETED":                                 30,
	}
)

func (x Trade_State) Enum() *Trade_State {
	p := new(Trade_State)
	*p = x
	return p
}

func (x Trade_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Trade_State) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_proto_enumTypes[14].Descriptor()
}

func (Trade_State) Type() protoreflect.EnumType {
	return &file_pb_proto_enumTypes[14]
}

func (x Trade_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Trade_State.Descriptor instead.
func (Trade_State) EnumDescriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{144, 0}
}

type Trade_Phase int32

const (
	Trade_PB_ERROR_PHASE      Trade_Phase = 0
	Trade_INIT                Trade_Phase = 1
	Trade_TAKER_FEE_PUBLISHED Trade_Phase = 2
	Trade_DEPOSIT_PUBLISHED   Trade_Phase = 3
	Trade_DEPOSIT_CONFIRMED   Trade_Phase = 4
	Trade_FIAT_SENT           Trade_Phase = 5
	Trade_FIAT_RECEIVED       Trade_Phase = 6
	Trade_PAYOUT_PUBLISHED    Trade_Phase = 7
	Trade_WITHDRAWN           Trade_Phase = 8
)

// Enum value maps for Trade_Phase.
var (
	Trade_Phase_name = map[int32]string{
		0: "PB_ERROR_PHASE",
		1: "INIT",
		2: "TAKER_FEE_PUBLISHED",
		3: "DEPOSIT_PUBLISHED",
		4: "DEPOSIT_CONFIRMED",
		5: "FIAT_SENT",
		6: "FIAT_RECEIVED",
		7: "PAYOUT_PUBLISHED",
		8: "WITHDRAWN",
	}
	Trade_Phase_value = map[string]int32{
		"PB_ERROR_PHASE":      0,
		"INIT":                1,
		"TAKER_FEE_PUBLISHED": 2,
		"DEPOSIT_PUBLISHED":   3,
		"DEPOSIT_CONFIRMED":   4,
		"FIAT_SENT":           5,
		"FIAT_RECEIVED":       6,
		"PAYOUT_PUBLISHED":    7,
		"WITHDRAWN":           8,
	}
)

func (x Trade_Phase) Enum() *Trade_Phase {
	p := new(Trade_Phase)
	*p = x
	return p
}

func (x Trade_Phase) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Trade_Phase) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_proto_enumTypes[15].Descriptor()
}

func (Trade_Phase) Type() protoreflect.EnumType {
	return &file_pb_proto_enumTypes[15]
}

func (x Trade_Phase) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Trade_Phase.Descriptor instead.
func (Trade_Phase) EnumDescriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{144, 1}
}

type Trade_DisputeState int32

const (
	Trade_PB_ERROR_DISPUTE_STATE         Trade_DisputeState = 0
	Trade_NO_DISPUTE                     Trade_DisputeState = 1
	Trade_DISPUTE_REQUESTED              Trade_DisputeState = 2 // arbitration  We use the enum name for resolving enums so it cannot be renamed
	Trade_DISPUTE_STARTED_BY_PEER        Trade_DisputeState = 3 // arbitration  We use the enum name for resolving enums so it cannot be renamed
	Trade_DISPUTE_CLOSED                 Trade_DisputeState = 4 // arbitration  We use the enum name for resolving enums so it cannot be renamed
	Trade_MEDIATION_REQUESTED            Trade_DisputeState = 5
	Trade_MEDIATION_STARTED_BY_PEER      Trade_DisputeState = 6
	Trade_MEDIATION_CLOSED               Trade_DisputeState = 7
	Trade_REFUND_REQUESTED               Trade_DisputeState = 8
	Trade_REFUND_REQUEST_STARTED_BY_PEER Trade_DisputeState = 9
	Trade_REFUND_REQUEST_CLOSED          Trade_DisputeState = 10
)

// Enum value maps for Trade_DisputeState.
var (
	Trade_DisputeState_name = map[int32]string{
		0:  "PB_ERROR_DISPUTE_STATE",
		1:  "NO_DISPUTE",
		2:  "DISPUTE_REQUESTED",
		3:  "DISPUTE_STARTED_BY_PEER",
		4:  "DISPUTE_CLOSED",
		5:  "MEDIATION_REQUESTED",
		6:  "MEDIATION_STARTED_BY_PEER",
		7:  "MEDIATION_CLOSED",
		8:  "REFUND_REQUESTED",
		9:  "REFUND_REQUEST_STARTED_BY_PEER",
		10: "REFUND_REQUEST_CLOSED",
	}
	Trade_DisputeState_value = map[string]int32{
		"PB_ERROR_DISPUTE_STATE":         0,
		"NO_DISPUTE":                     1,
		"DISPUTE_REQUESTED":              2,
		"DISPUTE_STARTED_BY_PEER":        3,
		"DISPUTE_CLOSED":                 4,
		"MEDIATION_REQUESTED":            5,
		"MEDIATION_STARTED_BY_PEER":      6,
		"MEDIATION_CLOSED":               7,
		"REFUND_REQUESTED":               8,
		"REFUND_REQUEST_STARTED_BY_PEER": 9,
		"REFUND_REQUEST_CLOSED":          10,
	}
)

func (x Trade_DisputeState) Enum() *Trade_DisputeState {
	p := new(Trade_DisputeState)
	*p = x
	return p
}

func (x Trade_DisputeState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Trade_DisputeState) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_proto_enumTypes[16].Descriptor()
}

func (Trade_DisputeState) Type() protoreflect.EnumType {
	return &file_pb_proto_enumTypes[16]
}

func (x Trade_DisputeState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Trade_DisputeState.Descriptor instead.
func (Trade_DisputeState) EnumDescriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{144, 2}
}

type Trade_TradePeriodState int32

const (
	Trade_PB_ERROR_TRADE_PERIOD_STATE Trade_TradePeriodState = 0
	Trade_FIRST_HALF                  Trade_TradePeriodState = 1
	Trade_SECOND_HALF                 Trade_TradePeriodState = 2
	Trade_TRADE_PERIOD_OVER           Trade_TradePeriodState = 3
)

// Enum value maps for Trade_TradePeriodState.
var (
	Trade_TradePeriodState_name = map[int32]string{
		0: "PB_ERROR_TRADE_PERIOD_STATE",
		1: "FIRST_HALF",
		2: "SECOND_HALF",
		3: "TRADE_PERIOD_OVER",
	}
	Trade_TradePeriodState_value = map[string]int32{
		"PB_ERROR_TRADE_PERIOD_STATE": 0,
		"FIRST_HALF":                  1,
		"SECOND_HALF":                 2,
		"TRADE_PERIOD_OVER":           3,
	}
)

func (x Trade_TradePeriodState) Enum() *Trade_TradePeriodState {
	p := new(Trade_TradePeriodState)
	*p = x
	return p
}

func (x Trade_TradePeriodState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Trade_TradePeriodState) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_proto_enumTypes[17].Descriptor()
}

func (Trade_TradePeriodState) Type() protoreflect.EnumType {
	return &file_pb_proto_enumTypes[17]
}

func (x Trade_TradePeriodState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Trade_TradePeriodState.Descriptor instead.
func (Trade_TradePeriodState) EnumDescriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{144, 3}
}

// Those are messages sent over wire
type NetworkEnvelope struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageVersion int32 `protobuf:"varint,1,opt,name=message_version,json=messageVersion,proto3" json:"message_version,omitempty"`
	// Types that are assignable to Message:
	//	*NetworkEnvelope_PreliminaryGetDataRequest
	//	*NetworkEnvelope_GetDataResponse
	//	*NetworkEnvelope_GetUpdatedDataRequest
	//	*NetworkEnvelope_GetPeersRequest
	//	*NetworkEnvelope_GetPeersResponse
	//	*NetworkEnvelope_Ping
	//	*NetworkEnvelope_Pong
	//	*NetworkEnvelope_OfferAvailabilityRequest
	//	*NetworkEnvelope_OfferAvailabilityResponse
	//	*NetworkEnvelope_RefreshOfferMessage
	//	*NetworkEnvelope_AddDataMessage
	//	*NetworkEnvelope_RemoveDataMessage
	//	*NetworkEnvelope_RemoveMailboxDataMessage
	//	*NetworkEnvelope_CloseConnectionMessage
	//	*NetworkEnvelope_PrefixedSealedAndSignedMessage
	//	*NetworkEnvelope_InputsForDepositTxRequest
	//	*NetworkEnvelope_InputsForDepositTxResponse
	//	*NetworkEnvelope_DepositTxMessage
	//	*NetworkEnvelope_CounterCurrencyTransferStartedMessage
	//	*NetworkEnvelope_PayoutTxPublishedMessage
	//	*NetworkEnvelope_OpenNewDisputeMessage
	//	*NetworkEnvelope_PeerOpenedDisputeMessage
	//	*NetworkEnvelope_ChatMessage
	//	*NetworkEnvelope_DisputeResultMessage
	//	*NetworkEnvelope_PeerPublishedDisputePayoutTxMessage
	//	*NetworkEnvelope_PrivateNotificationMessage
	//	*NetworkEnvelope_GetBlocksRequest
	//	*NetworkEnvelope_GetBlocksResponse
	//	*NetworkEnvelope_NewBlockBroadcastMessage
	//	*NetworkEnvelope_AddPersistableNetworkPayloadMessage
	//	*NetworkEnvelope_AckMessage
	//	*NetworkEnvelope_RepublishGovernanceDataRequest
	//	*NetworkEnvelope_NewDaoStateHashMessage
	//	*NetworkEnvelope_GetDaoStateHashesRequest
	//	*NetworkEnvelope_GetDaoStateHashesResponse
	//	*NetworkEnvelope_NewProposalStateHashMessage
	//	*NetworkEnvelope_GetProposalStateHashesRequest
	//	*NetworkEnvelope_GetProposalStateHashesResponse
	//	*NetworkEnvelope_NewBlindVoteStateHashMessage
	//	*NetworkEnvelope_GetBlindVoteStateHashesRequest
	//	*NetworkEnvelope_GetBlindVoteStateHashesResponse
	//	*NetworkEnvelope_BundleOfEnvelopes
	//	*NetworkEnvelope_MediatedPayoutTxSignatureMessage
	//	*NetworkEnvelope_MediatedPayoutTxPublishedMessage
	//	*NetworkEnvelope_DelayedPayoutTxSignatureRequest
	//	*NetworkEnvelope_DelayedPayoutTxSignatureResponse
	//	*NetworkEnvelope_DepositTxAndDelayedPayoutTxMessage
	//	*NetworkEnvelope_PeerPublishedDelayedPayoutTxMessage
	//	*NetworkEnvelope_RefreshTradeStateRequest
	//	*NetworkEnvelope_TraderSignedWitnessMessage
	//	*NetworkEnvelope_GetInventoryRequest
	//	*NetworkEnvelope_GetInventoryResponse
	Message isNetworkEnvelope_Message `protobuf_oneof:"message"`
}

func (x *NetworkEnvelope) Reset() {
	*x = NetworkEnvelope{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkEnvelope) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkEnvelope) ProtoMessage() {}

func (x *NetworkEnvelope) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkEnvelope.ProtoReflect.Descriptor instead.
func (*NetworkEnvelope) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{0}
}

func (x *NetworkEnvelope) GetMessageVersion() int32 {
	if x != nil {
		return x.MessageVersion
	}
	return 0
}

func (m *NetworkEnvelope) GetMessage() isNetworkEnvelope_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (x *NetworkEnvelope) GetPreliminaryGetDataRequest() *PreliminaryGetDataRequest {
	if x, ok := x.GetMessage().(*NetworkEnvelope_PreliminaryGetDataRequest); ok {
		return x.PreliminaryGetDataRequest
	}
	return nil
}

func (x *NetworkEnvelope) GetGetDataResponse() *GetDataResponse {
	if x, ok := x.GetMessage().(*NetworkEnvelope_GetDataResponse); ok {
		return x.GetDataResponse
	}
	return nil
}

func (x *NetworkEnvelope) GetGetUpdatedDataRequest() *GetUpdatedDataRequest {
	if x, ok := x.GetMessage().(*NetworkEnvelope_GetUpdatedDataRequest); ok {
		return x.GetUpdatedDataRequest
	}
	return nil
}

func (x *NetworkEnvelope) GetGetPeersRequest() *GetPeersRequest {
	if x, ok := x.GetMessage().(*NetworkEnvelope_GetPeersRequest); ok {
		return x.GetPeersRequest
	}
	return nil
}

func (x *NetworkEnvelope) GetGetPeersResponse() *GetPeersResponse {
	if x, ok := x.GetMessage().(*NetworkEnvelope_GetPeersResponse); ok {
		return x.GetPeersResponse
	}
	return nil
}

func (x *NetworkEnvelope) GetPing() *Ping {
	if x, ok := x.GetMessage().(*NetworkEnvelope_Ping); ok {
		return x.Ping
	}
	return nil
}

func (x *NetworkEnvelope) GetPong() *Pong {
	if x, ok := x.GetMessage().(*NetworkEnvelope_Pong); ok {
		return x.Pong
	}
	return nil
}

func (x *NetworkEnvelope) GetOfferAvailabilityRequest() *OfferAvailabilityRequest {
	if x, ok := x.GetMessage().(*NetworkEnvelope_OfferAvailabilityRequest); ok {
		return x.OfferAvailabilityRequest
	}
	return nil
}

func (x *NetworkEnvelope) GetOfferAvailabilityResponse() *OfferAvailabilityResponse {
	if x, ok := x.GetMessage().(*NetworkEnvelope_OfferAvailabilityResponse); ok {
		return x.OfferAvailabilityResponse
	}
	return nil
}

func (x *NetworkEnvelope) GetRefreshOfferMessage() *RefreshOfferMessage {
	if x, ok := x.GetMessage().(*NetworkEnvelope_RefreshOfferMessage); ok {
		return x.RefreshOfferMessage
	}
	return nil
}

func (x *NetworkEnvelope) GetAddDataMessage() *AddDataMessage {
	if x, ok := x.GetMessage().(*NetworkEnvelope_AddDataMessage); ok {
		return x.AddDataMessage
	}
	return nil
}

func (x *NetworkEnvelope) GetRemoveDataMessage() *RemoveDataMessage {
	if x, ok := x.GetMessage().(*NetworkEnvelope_RemoveDataMessage); ok {
		return x.RemoveDataMessage
	}
	return nil
}

func (x *NetworkEnvelope) GetRemoveMailboxDataMessage() *RemoveMailboxDataMessage {
	if x, ok := x.GetMessage().(*NetworkEnvelope_RemoveMailboxDataMessage); ok {
		return x.RemoveMailboxDataMessage
	}
	return nil
}

func (x *NetworkEnvelope) GetCloseConnectionMessage() *CloseConnectionMessage {
	if x, ok := x.GetMessage().(*NetworkEnvelope_CloseConnectionMessage); ok {
		return x.CloseConnectionMessage
	}
	return nil
}

func (x *NetworkEnvelope) GetPrefixedSealedAndSignedMessage() *PrefixedSealedAndSignedMessage {
	if x, ok := x.GetMessage().(*NetworkEnvelope_PrefixedSealedAndSignedMessage); ok {
		return x.PrefixedSealedAndSignedMessage
	}
	return nil
}

func (x *NetworkEnvelope) GetInputsForDepositTxRequest() *InputsForDepositTxRequest {
	if x, ok := x.GetMessage().(*NetworkEnvelope_InputsForDepositTxRequest); ok {
		return x.InputsForDepositTxRequest
	}
	return nil
}

func (x *NetworkEnvelope) GetInputsForDepositTxResponse() *InputsForDepositTxResponse {
	if x, ok := x.GetMessage().(*NetworkEnvelope_InputsForDepositTxResponse); ok {
		return x.InputsForDepositTxResponse
	}
	return nil
}

func (x *NetworkEnvelope) GetDepositTxMessage() *DepositTxMessage {
	if x, ok := x.GetMessage().(*NetworkEnvelope_DepositTxMessage); ok {
		return x.DepositTxMessage
	}
	return nil
}

func (x *NetworkEnvelope) GetCounterCurrencyTransferStartedMessage() *CounterCurrencyTransferStartedMessage {
	if x, ok := x.GetMessage().(*NetworkEnvelope_CounterCurrencyTransferStartedMessage); ok {
		return x.CounterCurrencyTransferStartedMessage
	}
	return nil
}

func (x *NetworkEnvelope) GetPayoutTxPublishedMessage() *PayoutTxPublishedMessage {
	if x, ok := x.GetMessage().(*NetworkEnvelope_PayoutTxPublishedMessage); ok {
		return x.PayoutTxPublishedMessage
	}
	return nil
}

func (x *NetworkEnvelope) GetOpenNewDisputeMessage() *OpenNewDisputeMessage {
	if x, ok := x.GetMessage().(*NetworkEnvelope_OpenNewDisputeMessage); ok {
		return x.OpenNewDisputeMessage
	}
	return nil
}

func (x *NetworkEnvelope) GetPeerOpenedDisputeMessage() *PeerOpenedDisputeMessage {
	if x, ok := x.GetMessage().(*NetworkEnvelope_PeerOpenedDisputeMessage); ok {
		return x.PeerOpenedDisputeMessage
	}
	return nil
}

func (x *NetworkEnvelope) GetChatMessage() *ChatMessage {
	if x, ok := x.GetMessage().(*NetworkEnvelope_ChatMessage); ok {
		return x.ChatMessage
	}
	return nil
}

func (x *NetworkEnvelope) GetDisputeResultMessage() *DisputeResultMessage {
	if x, ok := x.GetMessage().(*NetworkEnvelope_DisputeResultMessage); ok {
		return x.DisputeResultMessage
	}
	return nil
}

func (x *NetworkEnvelope) GetPeerPublishedDisputePayoutTxMessage() *PeerPublishedDisputePayoutTxMessage {
	if x, ok := x.GetMessage().(*NetworkEnvelope_PeerPublishedDisputePayoutTxMessage); ok {
		return x.PeerPublishedDisputePayoutTxMessage
	}
	return nil
}

func (x *NetworkEnvelope) GetPrivateNotificationMessage() *PrivateNotificationMessage {
	if x, ok := x.GetMessage().(*NetworkEnvelope_PrivateNotificationMessage); ok {
		return x.PrivateNotificationMessage
	}
	return nil
}

func (x *NetworkEnvelope) GetGetBlocksRequest() *GetBlocksRequest {
	if x, ok := x.GetMessage().(*NetworkEnvelope_GetBlocksRequest); ok {
		return x.GetBlocksRequest
	}
	return nil
}

func (x *NetworkEnvelope) GetGetBlocksResponse() *GetBlocksResponse {
	if x, ok := x.GetMessage().(*NetworkEnvelope_GetBlocksResponse); ok {
		return x.GetBlocksResponse
	}
	return nil
}

func (x *NetworkEnvelope) GetNewBlockBroadcastMessage() *NewBlockBroadcastMessage {
	if x, ok := x.GetMessage().(*NetworkEnvelope_NewBlockBroadcastMessage); ok {
		return x.NewBlockBroadcastMessage
	}
	return nil
}

func (x *NetworkEnvelope) GetAddPersistableNetworkPayloadMessage() *AddPersistableNetworkPayloadMessage {
	if x, ok := x.GetMessage().(*NetworkEnvelope_AddPersistableNetworkPayloadMessage); ok {
		return x.AddPersistableNetworkPayloadMessage
	}
	return nil
}

func (x *NetworkEnvelope) GetAckMessage() *AckMessage {
	if x, ok := x.GetMessage().(*NetworkEnvelope_AckMessage); ok {
		return x.AckMessage
	}
	return nil
}

func (x *NetworkEnvelope) GetRepublishGovernanceDataRequest() *RepublishGovernanceDataRequest {
	if x, ok := x.GetMessage().(*NetworkEnvelope_RepublishGovernanceDataRequest); ok {
		return x.RepublishGovernanceDataRequest
	}
	return nil
}

func (x *NetworkEnvelope) GetNewDaoStateHashMessage() *NewDaoStateHashMessage {
	if x, ok := x.GetMessage().(*NetworkEnvelope_NewDaoStateHashMessage); ok {
		return x.NewDaoStateHashMessage
	}
	return nil
}

func (x *NetworkEnvelope) GetGetDaoStateHashesRequest() *GetDaoStateHashesRequest {
	if x, ok := x.GetMessage().(*NetworkEnvelope_GetDaoStateHashesRequest); ok {
		return x.GetDaoStateHashesRequest
	}
	return nil
}

func (x *NetworkEnvelope) GetGetDaoStateHashesResponse() *GetDaoStateHashesResponse {
	if x, ok := x.GetMessage().(*NetworkEnvelope_GetDaoStateHashesResponse); ok {
		return x.GetDaoStateHashesResponse
	}
	return nil
}

func (x *NetworkEnvelope) GetNewProposalStateHashMessage() *NewProposalStateHashMessage {
	if x, ok := x.GetMessage().(*NetworkEnvelope_NewProposalStateHashMessage); ok {
		return x.NewProposalStateHashMessage
	}
	return nil
}

func (x *NetworkEnvelope) GetGetProposalStateHashesRequest() *GetProposalStateHashesRequest {
	if x, ok := x.GetMessage().(*NetworkEnvelope_GetProposalStateHashesRequest); ok {
		return x.GetProposalStateHashesRequest
	}
	return nil
}

func (x *NetworkEnvelope) GetGetProposalStateHashesResponse() *GetProposalStateHashesResponse {
	if x, ok := x.GetMessage().(*NetworkEnvelope_GetProposalStateHashesResponse); ok {
		return x.GetProposalStateHashesResponse
	}
	return nil
}

func (x *NetworkEnvelope) GetNewBlindVoteStateHashMessage() *NewBlindVoteStateHashMessage {
	if x, ok := x.GetMessage().(*NetworkEnvelope_NewBlindVoteStateHashMessage); ok {
		return x.NewBlindVoteStateHashMessage
	}
	return nil
}

func (x *NetworkEnvelope) GetGetBlindVoteStateHashesRequest() *GetBlindVoteStateHashesRequest {
	if x, ok := x.GetMessage().(*NetworkEnvelope_GetBlindVoteStateHashesRequest); ok {
		return x.GetBlindVoteStateHashesRequest
	}
	return nil
}

func (x *NetworkEnvelope) GetGetBlindVoteStateHashesResponse() *GetBlindVoteStateHashesResponse {
	if x, ok := x.GetMessage().(*NetworkEnvelope_GetBlindVoteStateHashesResponse); ok {
		return x.GetBlindVoteStateHashesResponse
	}
	return nil
}

func (x *NetworkEnvelope) GetBundleOfEnvelopes() *BundleOfEnvelopes {
	if x, ok := x.GetMessage().(*NetworkEnvelope_BundleOfEnvelopes); ok {
		return x.BundleOfEnvelopes
	}
	return nil
}

func (x *NetworkEnvelope) GetMediatedPayoutTxSignatureMessage() *MediatedPayoutTxSignatureMessage {
	if x, ok := x.GetMessage().(*NetworkEnvelope_MediatedPayoutTxSignatureMessage); ok {
		return x.MediatedPayoutTxSignatureMessage
	}
	return nil
}

func (x *NetworkEnvelope) GetMediatedPayoutTxPublishedMessage() *MediatedPayoutTxPublishedMessage {
	if x, ok := x.GetMessage().(*NetworkEnvelope_MediatedPayoutTxPublishedMessage); ok {
		return x.MediatedPayoutTxPublishedMessage
	}
	return nil
}

func (x *NetworkEnvelope) GetDelayedPayoutTxSignatureRequest() *DelayedPayoutTxSignatureRequest {
	if x, ok := x.GetMessage().(*NetworkEnvelope_DelayedPayoutTxSignatureRequest); ok {
		return x.DelayedPayoutTxSignatureRequest
	}
	return nil
}

func (x *NetworkEnvelope) GetDelayedPayoutTxSignatureResponse() *DelayedPayoutTxSignatureResponse {
	if x, ok := x.GetMessage().(*NetworkEnvelope_DelayedPayoutTxSignatureResponse); ok {
		return x.DelayedPayoutTxSignatureResponse
	}
	return nil
}

func (x *NetworkEnvelope) GetDepositTxAndDelayedPayoutTxMessage() *DepositTxAndDelayedPayoutTxMessage {
	if x, ok := x.GetMessage().(*NetworkEnvelope_DepositTxAndDelayedPayoutTxMessage); ok {
		return x.DepositTxAndDelayedPayoutTxMessage
	}
	return nil
}

func (x *NetworkEnvelope) GetPeerPublishedDelayedPayoutTxMessage() *PeerPublishedDelayedPayoutTxMessage {
	if x, ok := x.GetMessage().(*NetworkEnvelope_PeerPublishedDelayedPayoutTxMessage); ok {
		return x.PeerPublishedDelayedPayoutTxMessage
	}
	return nil
}

// Deprecated: Do not use.
func (x *NetworkEnvelope) GetRefreshTradeStateRequest() *RefreshTradeStateRequest {
	if x, ok := x.GetMessage().(*NetworkEnvelope_RefreshTradeStateRequest); ok {
		return x.RefreshTradeStateRequest
	}
	return nil
}

// Deprecated: Do not use.
func (x *NetworkEnvelope) GetTraderSignedWitnessMessage() *TraderSignedWitnessMessage {
	if x, ok := x.GetMessage().(*NetworkEnvelope_TraderSignedWitnessMessage); ok {
		return x.TraderSignedWitnessMessage
	}
	return nil
}

func (x *NetworkEnvelope) GetGetInventoryRequest() *GetInventoryRequest {
	if x, ok := x.GetMessage().(*NetworkEnvelope_GetInventoryRequest); ok {
		return x.GetInventoryRequest
	}
	return nil
}

func (x *NetworkEnvelope) GetGetInventoryResponse() *GetInventoryResponse {
	if x, ok := x.GetMessage().(*NetworkEnvelope_GetInventoryResponse); ok {
		return x.GetInventoryResponse
	}
	return nil
}

type isNetworkEnvelope_Message interface {
	isNetworkEnvelope_Message()
}

type NetworkEnvelope_PreliminaryGetDataRequest struct {
	PreliminaryGetDataRequest *PreliminaryGetDataRequest `protobuf:"bytes,2,opt,name=preliminary_get_data_request,json=preliminaryGetDataRequest,proto3,oneof"`
}

type NetworkEnvelope_GetDataResponse struct {
	GetDataResponse *GetDataResponse `protobuf:"bytes,3,opt,name=get_data_response,json=getDataResponse,proto3,oneof"`
}

type NetworkEnvelope_GetUpdatedDataRequest struct {
	GetUpdatedDataRequest *GetUpdatedDataRequest `protobuf:"bytes,4,opt,name=get_updated_data_request,json=getUpdatedDataRequest,proto3,oneof"`
}

type NetworkEnvelope_GetPeersRequest struct {
	GetPeersRequest *GetPeersRequest `protobuf:"bytes,5,opt,name=get_peers_request,json=getPeersRequest,proto3,oneof"`
}

type NetworkEnvelope_GetPeersResponse struct {
	GetPeersResponse *GetPeersResponse `protobuf:"bytes,6,opt,name=get_peers_response,json=getPeersResponse,proto3,oneof"`
}

type NetworkEnvelope_Ping struct {
	Ping *Ping `protobuf:"bytes,7,opt,name=ping,proto3,oneof"`
}

type NetworkEnvelope_Pong struct {
	Pong *Pong `protobuf:"bytes,8,opt,name=pong,proto3,oneof"`
}

type NetworkEnvelope_OfferAvailabilityRequest struct {
	OfferAvailabilityRequest *OfferAvailabilityRequest `protobuf:"bytes,9,opt,name=offer_availability_request,json=offerAvailabilityRequest,proto3,oneof"`
}

type NetworkEnvelope_OfferAvailabilityResponse struct {
	OfferAvailabilityResponse *OfferAvailabilityResponse `protobuf:"bytes,10,opt,name=offer_availability_response,json=offerAvailabilityResponse,proto3,oneof"`
}

type NetworkEnvelope_RefreshOfferMessage struct {
	RefreshOfferMessage *RefreshOfferMessage `protobuf:"bytes,11,opt,name=refresh_offer_message,json=refreshOfferMessage,proto3,oneof"`
}

type NetworkEnvelope_AddDataMessage struct {
	AddDataMessage *AddDataMessage `protobuf:"bytes,12,opt,name=add_data_message,json=addDataMessage,proto3,oneof"`
}

type NetworkEnvelope_RemoveDataMessage struct {
	RemoveDataMessage *RemoveDataMessage `protobuf:"bytes,13,opt,name=remove_data_message,json=removeDataMessage,proto3,oneof"`
}

type NetworkEnvelope_RemoveMailboxDataMessage struct {
	RemoveMailboxDataMessage *RemoveMailboxDataMessage `protobuf:"bytes,14,opt,name=remove_mailbox_data_message,json=removeMailboxDataMessage,proto3,oneof"`
}

type NetworkEnvelope_CloseConnectionMessage struct {
	CloseConnectionMessage *CloseConnectionMessage `protobuf:"bytes,15,opt,name=close_connection_message,json=closeConnectionMessage,proto3,oneof"`
}

type NetworkEnvelope_PrefixedSealedAndSignedMessage struct {
	PrefixedSealedAndSignedMessage *PrefixedSealedAndSignedMessage `protobuf:"bytes,16,opt,name=prefixed_sealed_and_signed_message,json=prefixedSealedAndSignedMessage,proto3,oneof"`
}

type NetworkEnvelope_InputsForDepositTxRequest struct {
	InputsForDepositTxRequest *InputsForDepositTxRequest `protobuf:"bytes,17,opt,name=inputs_for_deposit_tx_request,json=inputsForDepositTxRequest,proto3,oneof"`
}

type NetworkEnvelope_InputsForDepositTxResponse struct {
	InputsForDepositTxResponse *InputsForDepositTxResponse `protobuf:"bytes,18,opt,name=inputs_for_deposit_tx_response,json=inputsForDepositTxResponse,proto3,oneof"`
}

type NetworkEnvelope_DepositTxMessage struct {
	DepositTxMessage *DepositTxMessage `protobuf:"bytes,19,opt,name=deposit_tx_message,json=depositTxMessage,proto3,oneof"`
}

type NetworkEnvelope_CounterCurrencyTransferStartedMessage struct {
	CounterCurrencyTransferStartedMessage *CounterCurrencyTransferStartedMessage `protobuf:"bytes,20,opt,name=counter_currency_transfer_started_message,json=counterCurrencyTransferStartedMessage,proto3,oneof"`
}

type NetworkEnvelope_PayoutTxPublishedMessage struct {
	PayoutTxPublishedMessage *PayoutTxPublishedMessage `protobuf:"bytes,21,opt,name=payout_tx_published_message,json=payoutTxPublishedMessage,proto3,oneof"`
}

type NetworkEnvelope_OpenNewDisputeMessage struct {
	OpenNewDisputeMessage *OpenNewDisputeMessage `protobuf:"bytes,22,opt,name=open_new_dispute_message,json=openNewDisputeMessage,proto3,oneof"`
}

type NetworkEnvelope_PeerOpenedDisputeMessage struct {
	PeerOpenedDisputeMessage *PeerOpenedDisputeMessage `protobuf:"bytes,23,opt,name=peer_opened_dispute_message,json=peerOpenedDisputeMessage,proto3,oneof"`
}

type NetworkEnvelope_ChatMessage struct {
	ChatMessage *ChatMessage `protobuf:"bytes,24,opt,name=chat_message,json=chatMessage,proto3,oneof"`
}

type NetworkEnvelope_DisputeResultMessage struct {
	DisputeResultMessage *DisputeResultMessage `protobuf:"bytes,25,opt,name=dispute_result_message,json=disputeResultMessage,proto3,oneof"`
}

type NetworkEnvelope_PeerPublishedDisputePayoutTxMessage struct {
	PeerPublishedDisputePayoutTxMessage *PeerPublishedDisputePayoutTxMessage `protobuf:"bytes,26,opt,name=peer_published_dispute_payout_tx_message,json=peerPublishedDisputePayoutTxMessage,proto3,oneof"`
}

type NetworkEnvelope_PrivateNotificationMessage struct {
	PrivateNotificationMessage *PrivateNotificationMessage `protobuf:"bytes,27,opt,name=private_notification_message,json=privateNotificationMessage,proto3,oneof"`
}

type NetworkEnvelope_GetBlocksRequest struct {
	GetBlocksRequest *GetBlocksRequest `protobuf:"bytes,28,opt,name=get_blocks_request,json=getBlocksRequest,proto3,oneof"`
}

type NetworkEnvelope_GetBlocksResponse struct {
	GetBlocksResponse *GetBlocksResponse `protobuf:"bytes,29,opt,name=get_blocks_response,json=getBlocksResponse,proto3,oneof"`
}

type NetworkEnvelope_NewBlockBroadcastMessage struct {
	NewBlockBroadcastMessage *NewBlockBroadcastMessage `protobuf:"bytes,30,opt,name=new_block_broadcast_message,json=newBlockBroadcastMessage,proto3,oneof"`
}

type NetworkEnvelope_AddPersistableNetworkPayloadMessage struct {
	AddPersistableNetworkPayloadMessage *AddPersistableNetworkPayloadMessage `protobuf:"bytes,31,opt,name=add_persistable_network_payload_message,json=addPersistableNetworkPayloadMessage,proto3,oneof"`
}

type NetworkEnvelope_AckMessage struct {
	AckMessage *AckMessage `protobuf:"bytes,32,opt,name=ack_message,json=ackMessage,proto3,oneof"`
}

type NetworkEnvelope_RepublishGovernanceDataRequest struct {
	RepublishGovernanceDataRequest *RepublishGovernanceDataRequest `protobuf:"bytes,33,opt,name=republish_governance_data_request,json=republishGovernanceDataRequest,proto3,oneof"`
}

type NetworkEnvelope_NewDaoStateHashMessage struct {
	NewDaoStateHashMessage *NewDaoStateHashMessage `protobuf:"bytes,34,opt,name=new_dao_state_hash_message,json=newDaoStateHashMessage,proto3,oneof"`
}

type NetworkEnvelope_GetDaoStateHashesRequest struct {
	GetDaoStateHashesRequest *GetDaoStateHashesRequest `protobuf:"bytes,35,opt,name=get_dao_state_hashes_request,json=getDaoStateHashesRequest,proto3,oneof"`
}

type NetworkEnvelope_GetDaoStateHashesResponse struct {
	GetDaoStateHashesResponse *GetDaoStateHashesResponse `protobuf:"bytes,36,opt,name=get_dao_state_hashes_response,json=getDaoStateHashesResponse,proto3,oneof"`
}

type NetworkEnvelope_NewProposalStateHashMessage struct {
	NewProposalStateHashMessage *NewProposalStateHashMessage `protobuf:"bytes,37,opt,name=new_proposal_state_hash_message,json=newProposalStateHashMessage,proto3,oneof"`
}

type NetworkEnvelope_GetProposalStateHashesRequest struct {
	GetProposalStateHashesRequest *GetProposalStateHashesRequest `protobuf:"bytes,38,opt,name=get_proposal_state_hashes_request,json=getProposalStateHashesRequest,proto3,oneof"`
}

type NetworkEnvelope_GetProposalStateHashesResponse struct {
	GetProposalStateHashesResponse *GetProposalStateHashesResponse `protobuf:"bytes,39,opt,name=get_proposal_state_hashes_response,json=getProposalStateHashesResponse,proto3,oneof"`
}

type NetworkEnvelope_NewBlindVoteStateHashMessage struct {
	NewBlindVoteStateHashMessage *NewBlindVoteStateHashMessage `protobuf:"bytes,40,opt,name=new_blind_vote_state_hash_message,json=newBlindVoteStateHashMessage,proto3,oneof"`
}

type NetworkEnvelope_GetBlindVoteStateHashesRequest struct {
	GetBlindVoteStateHashesRequest *GetBlindVoteStateHashesRequest `protobuf:"bytes,41,opt,name=get_blind_vote_state_hashes_request,json=getBlindVoteStateHashesRequest,proto3,oneof"`
}

type NetworkEnvelope_GetBlindVoteStateHashesResponse struct {
	GetBlindVoteStateHashesResponse *GetBlindVoteStateHashesResponse `protobuf:"bytes,42,opt,name=get_blind_vote_state_hashes_response,json=getBlindVoteStateHashesResponse,proto3,oneof"`
}

type NetworkEnvelope_BundleOfEnvelopes struct {
	BundleOfEnvelopes *BundleOfEnvelopes `protobuf:"bytes,43,opt,name=bundle_of_envelopes,json=bundleOfEnvelopes,proto3,oneof"`
}

type NetworkEnvelope_MediatedPayoutTxSignatureMessage struct {
	MediatedPayoutTxSignatureMessage *MediatedPayoutTxSignatureMessage `protobuf:"bytes,44,opt,name=mediated_payout_tx_signature_message,json=mediatedPayoutTxSignatureMessage,proto3,oneof"`
}

type NetworkEnvelope_MediatedPayoutTxPublishedMessage struct {
	MediatedPayoutTxPublishedMessage *MediatedPayoutTxPublishedMessage `protobuf:"bytes,45,opt,name=mediated_payout_tx_published_message,json=mediatedPayoutTxPublishedMessage,proto3,oneof"`
}

type NetworkEnvelope_DelayedPayoutTxSignatureRequest struct {
	DelayedPayoutTxSignatureRequest *DelayedPayoutTxSignatureRequest `protobuf:"bytes,46,opt,name=delayed_payout_tx_signature_request,json=delayedPayoutTxSignatureRequest,proto3,oneof"`
}

type NetworkEnvelope_DelayedPayoutTxSignatureResponse struct {
	DelayedPayoutTxSignatureResponse *DelayedPayoutTxSignatureResponse `protobuf:"bytes,47,opt,name=delayed_payout_tx_signature_response,json=delayedPayoutTxSignatureResponse,proto3,oneof"`
}

type NetworkEnvelope_DepositTxAndDelayedPayoutTxMessage struct {
	DepositTxAndDelayedPayoutTxMessage *DepositTxAndDelayedPayoutTxMessage `protobuf:"bytes,48,opt,name=deposit_tx_and_delayed_payout_tx_message,json=depositTxAndDelayedPayoutTxMessage,proto3,oneof"`
}

type NetworkEnvelope_PeerPublishedDelayedPayoutTxMessage struct {
	PeerPublishedDelayedPayoutTxMessage *PeerPublishedDelayedPayoutTxMessage `protobuf:"bytes,49,opt,name=peer_published_delayed_payout_tx_message,json=peerPublishedDelayedPayoutTxMessage,proto3,oneof"`
}

type NetworkEnvelope_RefreshTradeStateRequest struct {
	// Deprecated: Do not use.
	RefreshTradeStateRequest *RefreshTradeStateRequest `protobuf:"bytes,50,opt,name=refresh_trade_state_request,json=refreshTradeStateRequest,proto3,oneof"`
}

type NetworkEnvelope_TraderSignedWitnessMessage struct {
	// Deprecated: Do not use.
	TraderSignedWitnessMessage *TraderSignedWitnessMessage `protobuf:"bytes,51,opt,name=trader_signed_witness_message,json=traderSignedWitnessMessage,proto3,oneof"`
}

type NetworkEnvelope_GetInventoryRequest struct {
	GetInventoryRequest *GetInventoryRequest `protobuf:"bytes,52,opt,name=get_inventory_request,json=getInventoryRequest,proto3,oneof"`
}

type NetworkEnvelope_GetInventoryResponse struct {
	GetInventoryResponse *GetInventoryResponse `protobuf:"bytes,53,opt,name=get_inventory_response,json=getInventoryResponse,proto3,oneof"`
}

func (*NetworkEnvelope_PreliminaryGetDataRequest) isNetworkEnvelope_Message() {}

func (*NetworkEnvelope_GetDataResponse) isNetworkEnvelope_Message() {}

func (*NetworkEnvelope_GetUpdatedDataRequest) isNetworkEnvelope_Message() {}

func (*NetworkEnvelope_GetPeersRequest) isNetworkEnvelope_Message() {}

func (*NetworkEnvelope_GetPeersResponse) isNetworkEnvelope_Message() {}

func (*NetworkEnvelope_Ping) isNetworkEnvelope_Message() {}

func (*NetworkEnvelope_Pong) isNetworkEnvelope_Message() {}

func (*NetworkEnvelope_OfferAvailabilityRequest) isNetworkEnvelope_Message() {}

func (*NetworkEnvelope_OfferAvailabilityResponse) isNetworkEnvelope_Message() {}

func (*NetworkEnvelope_RefreshOfferMessage) isNetworkEnvelope_Message() {}

func (*NetworkEnvelope_AddDataMessage) isNetworkEnvelope_Message() {}

func (*NetworkEnvelope_RemoveDataMessage) isNetworkEnvelope_Message() {}

func (*NetworkEnvelope_RemoveMailboxDataMessage) isNetworkEnvelope_Message() {}

func (*NetworkEnvelope_CloseConnectionMessage) isNetworkEnvelope_Message() {}

func (*NetworkEnvelope_PrefixedSealedAndSignedMessage) isNetworkEnvelope_Message() {}

func (*NetworkEnvelope_InputsForDepositTxRequest) isNetworkEnvelope_Message() {}

func (*NetworkEnvelope_InputsForDepositTxResponse) isNetworkEnvelope_Message() {}

func (*NetworkEnvelope_DepositTxMessage) isNetworkEnvelope_Message() {}

func (*NetworkEnvelope_CounterCurrencyTransferStartedMessage) isNetworkEnvelope_Message() {}

func (*NetworkEnvelope_PayoutTxPublishedMessage) isNetworkEnvelope_Message() {}

func (*NetworkEnvelope_OpenNewDisputeMessage) isNetworkEnvelope_Message() {}

func (*NetworkEnvelope_PeerOpenedDisputeMessage) isNetworkEnvelope_Message() {}

func (*NetworkEnvelope_ChatMessage) isNetworkEnvelope_Message() {}

func (*NetworkEnvelope_DisputeResultMessage) isNetworkEnvelope_Message() {}

func (*NetworkEnvelope_PeerPublishedDisputePayoutTxMessage) isNetworkEnvelope_Message() {}

func (*NetworkEnvelope_PrivateNotificationMessage) isNetworkEnvelope_Message() {}

func (*NetworkEnvelope_GetBlocksRequest) isNetworkEnvelope_Message() {}

func (*NetworkEnvelope_GetBlocksResponse) isNetworkEnvelope_Message() {}

func (*NetworkEnvelope_NewBlockBroadcastMessage) isNetworkEnvelope_Message() {}

func (*NetworkEnvelope_AddPersistableNetworkPayloadMessage) isNetworkEnvelope_Message() {}

func (*NetworkEnvelope_AckMessage) isNetworkEnvelope_Message() {}

func (*NetworkEnvelope_RepublishGovernanceDataRequest) isNetworkEnvelope_Message() {}

func (*NetworkEnvelope_NewDaoStateHashMessage) isNetworkEnvelope_Message() {}

func (*NetworkEnvelope_GetDaoStateHashesRequest) isNetworkEnvelope_Message() {}

func (*NetworkEnvelope_GetDaoStateHashesResponse) isNetworkEnvelope_Message() {}

func (*NetworkEnvelope_NewProposalStateHashMessage) isNetworkEnvelope_Message() {}

func (*NetworkEnvelope_GetProposalStateHashesRequest) isNetworkEnvelope_Message() {}

func (*NetworkEnvelope_GetProposalStateHashesResponse) isNetworkEnvelope_Message() {}

func (*NetworkEnvelope_NewBlindVoteStateHashMessage) isNetworkEnvelope_Message() {}

func (*NetworkEnvelope_GetBlindVoteStateHashesRequest) isNetworkEnvelope_Message() {}

func (*NetworkEnvelope_GetBlindVoteStateHashesResponse) isNetworkEnvelope_Message() {}

func (*NetworkEnvelope_BundleOfEnvelopes) isNetworkEnvelope_Message() {}

func (*NetworkEnvelope_MediatedPayoutTxSignatureMessage) isNetworkEnvelope_Message() {}

func (*NetworkEnvelope_MediatedPayoutTxPublishedMessage) isNetworkEnvelope_Message() {}

func (*NetworkEnvelope_DelayedPayoutTxSignatureRequest) isNetworkEnvelope_Message() {}

func (*NetworkEnvelope_DelayedPayoutTxSignatureResponse) isNetworkEnvelope_Message() {}

func (*NetworkEnvelope_DepositTxAndDelayedPayoutTxMessage) isNetworkEnvelope_Message() {}

func (*NetworkEnvelope_PeerPublishedDelayedPayoutTxMessage) isNetworkEnvelope_Message() {}

func (*NetworkEnvelope_RefreshTradeStateRequest) isNetworkEnvelope_Message() {}

func (*NetworkEnvelope_TraderSignedWitnessMessage) isNetworkEnvelope_Message() {}

func (*NetworkEnvelope_GetInventoryRequest) isNetworkEnvelope_Message() {}

func (*NetworkEnvelope_GetInventoryResponse) isNetworkEnvelope_Message() {}

type BundleOfEnvelopes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Envelopes []*NetworkEnvelope `protobuf:"bytes,1,rep,name=envelopes,proto3" json:"envelopes,omitempty"`
}

func (x *BundleOfEnvelopes) Reset() {
	*x = BundleOfEnvelopes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BundleOfEnvelopes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BundleOfEnvelopes) ProtoMessage() {}

func (x *BundleOfEnvelopes) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BundleOfEnvelopes.ProtoReflect.Descriptor instead.
func (*BundleOfEnvelopes) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{1}
}

func (x *BundleOfEnvelopes) GetEnvelopes() []*NetworkEnvelope {
	if x != nil {
		return x.Envelopes
	}
	return nil
}

type PreliminaryGetDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nonce                 int32    `protobuf:"varint,21,opt,name=nonce,proto3" json:"nonce,omitempty"` // This was set to 21 instead of 1 in some old commit so we cannot change it.
	ExcludedKeys          [][]byte `protobuf:"bytes,2,rep,name=excluded_keys,json=excludedKeys,proto3" json:"excluded_keys,omitempty"`
	SupportedCapabilities []int32  `protobuf:"varint,3,rep,packed,name=supported_capabilities,json=supportedCapabilities,proto3" json:"supported_capabilities,omitempty"`
	Version               string   `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *PreliminaryGetDataRequest) Reset() {
	*x = PreliminaryGetDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreliminaryGetDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreliminaryGetDataRequest) ProtoMessage() {}

func (x *PreliminaryGetDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreliminaryGetDataRequest.ProtoReflect.Descriptor instead.
func (*PreliminaryGetDataRequest) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{2}
}

func (x *PreliminaryGetDataRequest) GetNonce() int32 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *PreliminaryGetDataRequest) GetExcludedKeys() [][]byte {
	if x != nil {
		return x.ExcludedKeys
	}
	return nil
}

func (x *PreliminaryGetDataRequest) GetSupportedCapabilities() []int32 {
	if x != nil {
		return x.SupportedCapabilities
	}
	return nil
}

func (x *PreliminaryGetDataRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type GetDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestNonce                   int32                        `protobuf:"varint,1,opt,name=request_nonce,json=requestNonce,proto3" json:"request_nonce,omitempty"`
	IsGetUpdatedDataResponse       bool                         `protobuf:"varint,2,opt,name=is_get_updated_data_response,json=isGetUpdatedDataResponse,proto3" json:"is_get_updated_data_response,omitempty"`
	DataSet                        []*StorageEntryWrapper       `protobuf:"bytes,3,rep,name=data_set,json=dataSet,proto3" json:"data_set,omitempty"`
	SupportedCapabilities          []int32                      `protobuf:"varint,4,rep,packed,name=supported_capabilities,json=supportedCapabilities,proto3" json:"supported_capabilities,omitempty"`
	PersistableNetworkPayloadItems []*PersistableNetworkPayload `protobuf:"bytes,5,rep,name=persistable_network_payload_items,json=persistableNetworkPayloadItems,proto3" json:"persistable_network_payload_items,omitempty"`
}

func (x *GetDataResponse) Reset() {
	*x = GetDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDataResponse) ProtoMessage() {}

func (x *GetDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDataResponse.ProtoReflect.Descriptor instead.
func (*GetDataResponse) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{3}
}

func (x *GetDataResponse) GetRequestNonce() int32 {
	if x != nil {
		return x.RequestNonce
	}
	return 0
}

func (x *GetDataResponse) GetIsGetUpdatedDataResponse() bool {
	if x != nil {
		return x.IsGetUpdatedDataResponse
	}
	return false
}

func (x *GetDataResponse) GetDataSet() []*StorageEntryWrapper {
	if x != nil {
		return x.DataSet
	}
	return nil
}

func (x *GetDataResponse) GetSupportedCapabilities() []int32 {
	if x != nil {
		return x.SupportedCapabilities
	}
	return nil
}

func (x *GetDataResponse) GetPersistableNetworkPayloadItems() []*PersistableNetworkPayload {
	if x != nil {
		return x.PersistableNetworkPayloadItems
	}
	return nil
}

type GetUpdatedDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SenderNodeAddress *NodeAddress `protobuf:"bytes,1,opt,name=sender_node_address,json=senderNodeAddress,proto3" json:"sender_node_address,omitempty"`
	Nonce             int32        `protobuf:"varint,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
	ExcludedKeys      [][]byte     `protobuf:"bytes,3,rep,name=excluded_keys,json=excludedKeys,proto3" json:"excluded_keys,omitempty"`
	Version           string       `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *GetUpdatedDataRequest) Reset() {
	*x = GetUpdatedDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUpdatedDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUpdatedDataRequest) ProtoMessage() {}

func (x *GetUpdatedDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUpdatedDataRequest.ProtoReflect.Descriptor instead.
func (*GetUpdatedDataRequest) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{4}
}

func (x *GetUpdatedDataRequest) GetSenderNodeAddress() *NodeAddress {
	if x != nil {
		return x.SenderNodeAddress
	}
	return nil
}

func (x *GetUpdatedDataRequest) GetNonce() int32 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *GetUpdatedDataRequest) GetExcludedKeys() [][]byte {
	if x != nil {
		return x.ExcludedKeys
	}
	return nil
}

func (x *GetUpdatedDataRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type GetPeersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SenderNodeAddress     *NodeAddress `protobuf:"bytes,1,opt,name=sender_node_address,json=senderNodeAddress,proto3" json:"sender_node_address,omitempty"`
	Nonce                 int32        `protobuf:"varint,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
	SupportedCapabilities []int32      `protobuf:"varint,3,rep,packed,name=supported_capabilities,json=supportedCapabilities,proto3" json:"supported_capabilities,omitempty"`
	ReportedPeers         []*Peer      `protobuf:"bytes,4,rep,name=reported_peers,json=reportedPeers,proto3" json:"reported_peers,omitempty"`
}

func (x *GetPeersRequest) Reset() {
	*x = GetPeersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPeersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPeersRequest) ProtoMessage() {}

func (x *GetPeersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPeersRequest.ProtoReflect.Descriptor instead.
func (*GetPeersRequest) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{5}
}

func (x *GetPeersRequest) GetSenderNodeAddress() *NodeAddress {
	if x != nil {
		return x.SenderNodeAddress
	}
	return nil
}

func (x *GetPeersRequest) GetNonce() int32 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *GetPeersRequest) GetSupportedCapabilities() []int32 {
	if x != nil {
		return x.SupportedCapabilities
	}
	return nil
}

func (x *GetPeersRequest) GetReportedPeers() []*Peer {
	if x != nil {
		return x.ReportedPeers
	}
	return nil
}

type GetPeersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestNonce          int32   `protobuf:"varint,1,opt,name=request_nonce,json=requestNonce,proto3" json:"request_nonce,omitempty"`
	ReportedPeers         []*Peer `protobuf:"bytes,2,rep,name=reported_peers,json=reportedPeers,proto3" json:"reported_peers,omitempty"`
	SupportedCapabilities []int32 `protobuf:"varint,3,rep,packed,name=supported_capabilities,json=supportedCapabilities,proto3" json:"supported_capabilities,omitempty"`
}

func (x *GetPeersResponse) Reset() {
	*x = GetPeersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPeersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPeersResponse) ProtoMessage() {}

func (x *GetPeersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPeersResponse.ProtoReflect.Descriptor instead.
func (*GetPeersResponse) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{6}
}

func (x *GetPeersResponse) GetRequestNonce() int32 {
	if x != nil {
		return x.RequestNonce
	}
	return 0
}

func (x *GetPeersResponse) GetReportedPeers() []*Peer {
	if x != nil {
		return x.ReportedPeers
	}
	return nil
}

func (x *GetPeersResponse) GetSupportedCapabilities() []int32 {
	if x != nil {
		return x.SupportedCapabilities
	}
	return nil
}

type Ping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nonce             int32 `protobuf:"varint,1,opt,name=nonce,proto3" json:"nonce,omitempty"`
	LastRoundTripTime int32 `protobuf:"varint,2,opt,name=last_round_trip_time,json=lastRoundTripTime,proto3" json:"last_round_trip_time,omitempty"`
}

func (x *Ping) Reset() {
	*x = Ping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ping) ProtoMessage() {}

func (x *Ping) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ping.ProtoReflect.Descriptor instead.
func (*Ping) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{7}
}

func (x *Ping) GetNonce() int32 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *Ping) GetLastRoundTripTime() int32 {
	if x != nil {
		return x.LastRoundTripTime
	}
	return 0
}

type Pong struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestNonce int32 `protobuf:"varint,1,opt,name=request_nonce,json=requestNonce,proto3" json:"request_nonce,omitempty"`
}

func (x *Pong) Reset() {
	*x = Pong{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pong) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pong) ProtoMessage() {}

func (x *Pong) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pong.ProtoReflect.Descriptor instead.
func (*Pong) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{8}
}

func (x *Pong) GetRequestNonce() int32 {
	if x != nil {
		return x.RequestNonce
	}
	return 0
}

type GetInventoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *GetInventoryRequest) Reset() {
	*x = GetInventoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInventoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInventoryRequest) ProtoMessage() {}

func (x *GetInventoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInventoryRequest.ProtoReflect.Descriptor instead.
func (*GetInventoryRequest) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{9}
}

func (x *GetInventoryRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type GetInventoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inventory map[string]string `protobuf:"bytes,1,rep,name=inventory,proto3" json:"inventory,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetInventoryResponse) Reset() {
	*x = GetInventoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInventoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInventoryResponse) ProtoMessage() {}

func (x *GetInventoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInventoryResponse.ProtoReflect.Descriptor instead.
func (*GetInventoryResponse) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{10}
}

func (x *GetInventoryResponse) GetInventory() map[string]string {
	if x != nil {
		return x.Inventory
	}
	return nil
}

type OfferAvailabilityRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OfferId               string      `protobuf:"bytes,1,opt,name=offer_id,json=offerId,proto3" json:"offer_id,omitempty"`
	PubKeyRing            *PubKeyRing `protobuf:"bytes,2,opt,name=pub_key_ring,json=pubKeyRing,proto3" json:"pub_key_ring,omitempty"`
	TakersTradePrice      int64       `protobuf:"varint,3,opt,name=takers_trade_price,json=takersTradePrice,proto3" json:"takers_trade_price,omitempty"`
	SupportedCapabilities []int32     `protobuf:"varint,4,rep,packed,name=supported_capabilities,json=supportedCapabilities,proto3" json:"supported_capabilities,omitempty"`
	Uid                   string      `protobuf:"bytes,5,opt,name=uid,proto3" json:"uid,omitempty"`
	IsTakerApiUser        bool        `protobuf:"varint,6,opt,name=is_taker_api_user,json=isTakerApiUser,proto3" json:"is_taker_api_user,omitempty"`
}

func (x *OfferAvailabilityRequest) Reset() {
	*x = OfferAvailabilityRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OfferAvailabilityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OfferAvailabilityRequest) ProtoMessage() {}

func (x *OfferAvailabilityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OfferAvailabilityRequest.ProtoReflect.Descriptor instead.
func (*OfferAvailabilityRequest) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{11}
}

func (x *OfferAvailabilityRequest) GetOfferId() string {
	if x != nil {
		return x.OfferId
	}
	return ""
}

func (x *OfferAvailabilityRequest) GetPubKeyRing() *PubKeyRing {
	if x != nil {
		return x.PubKeyRing
	}
	return nil
}

func (x *OfferAvailabilityRequest) GetTakersTradePrice() int64 {
	if x != nil {
		return x.TakersTradePrice
	}
	return 0
}

func (x *OfferAvailabilityRequest) GetSupportedCapabilities() []int32 {
	if x != nil {
		return x.SupportedCapabilities
	}
	return nil
}

func (x *OfferAvailabilityRequest) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *OfferAvailabilityRequest) GetIsTakerApiUser() bool {
	if x != nil {
		return x.IsTakerApiUser
	}
	return false
}

type OfferAvailabilityResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OfferId               string             `protobuf:"bytes,1,opt,name=offer_id,json=offerId,proto3" json:"offer_id,omitempty"`
	AvailabilityResult    AvailabilityResult `protobuf:"varint,2,opt,name=availability_result,json=availabilityResult,proto3,enum=io.bisq.protobuffer.AvailabilityResult" json:"availability_result,omitempty"`
	SupportedCapabilities []int32            `protobuf:"varint,3,rep,packed,name=supported_capabilities,json=supportedCapabilities,proto3" json:"supported_capabilities,omitempty"`
	Uid                   string             `protobuf:"bytes,4,opt,name=uid,proto3" json:"uid,omitempty"`
	Arbitrator            *NodeAddress       `protobuf:"bytes,5,opt,name=arbitrator,proto3" json:"arbitrator,omitempty"`
	Mediator              *NodeAddress       `protobuf:"bytes,6,opt,name=mediator,proto3" json:"mediator,omitempty"`
	RefundAgent           *NodeAddress       `protobuf:"bytes,7,opt,name=refund_agent,json=refundAgent,proto3" json:"refund_agent,omitempty"`
}

func (x *OfferAvailabilityResponse) Reset() {
	*x = OfferAvailabilityResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OfferAvailabilityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OfferAvailabilityResponse) ProtoMessage() {}

func (x *OfferAvailabilityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OfferAvailabilityResponse.ProtoReflect.Descriptor instead.
func (*OfferAvailabilityResponse) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{12}
}

func (x *OfferAvailabilityResponse) GetOfferId() string {
	if x != nil {
		return x.OfferId
	}
	return ""
}

func (x *OfferAvailabilityResponse) GetAvailabilityResult() AvailabilityResult {
	if x != nil {
		return x.AvailabilityResult
	}
	return AvailabilityResult_PB_ERROR
}

func (x *OfferAvailabilityResponse) GetSupportedCapabilities() []int32 {
	if x != nil {
		return x.SupportedCapabilities
	}
	return nil
}

func (x *OfferAvailabilityResponse) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *OfferAvailabilityResponse) GetArbitrator() *NodeAddress {
	if x != nil {
		return x.Arbitrator
	}
	return nil
}

func (x *OfferAvailabilityResponse) GetMediator() *NodeAddress {
	if x != nil {
		return x.Mediator
	}
	return nil
}

func (x *OfferAvailabilityResponse) GetRefundAgent() *NodeAddress {
	if x != nil {
		return x.RefundAgent
	}
	return nil
}

type RefreshOfferMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HashOfDataAndSeqNr []byte `protobuf:"bytes,1,opt,name=hash_of_data_and_seq_nr,json=hashOfDataAndSeqNr,proto3" json:"hash_of_data_and_seq_nr,omitempty"`
	Signature          []byte `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	HashOfPayload      []byte `protobuf:"bytes,3,opt,name=hash_of_payload,json=hashOfPayload,proto3" json:"hash_of_payload,omitempty"`
	SequenceNumber     int32  `protobuf:"varint,4,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
}

func (x *RefreshOfferMessage) Reset() {
	*x = RefreshOfferMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefreshOfferMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshOfferMessage) ProtoMessage() {}

func (x *RefreshOfferMessage) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshOfferMessage.ProtoReflect.Descriptor instead.
func (*RefreshOfferMessage) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{13}
}

func (x *RefreshOfferMessage) GetHashOfDataAndSeqNr() []byte {
	if x != nil {
		return x.HashOfDataAndSeqNr
	}
	return nil
}

func (x *RefreshOfferMessage) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *RefreshOfferMessage) GetHashOfPayload() []byte {
	if x != nil {
		return x.HashOfPayload
	}
	return nil
}

func (x *RefreshOfferMessage) GetSequenceNumber() int32 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

type AddDataMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entry *StorageEntryWrapper `protobuf:"bytes,1,opt,name=entry,proto3" json:"entry,omitempty"`
}

func (x *AddDataMessage) Reset() {
	*x = AddDataMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddDataMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddDataMessage) ProtoMessage() {}

func (x *AddDataMessage) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddDataMessage.ProtoReflect.Descriptor instead.
func (*AddDataMessage) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{14}
}

func (x *AddDataMessage) GetEntry() *StorageEntryWrapper {
	if x != nil {
		return x.Entry
	}
	return nil
}

type RemoveDataMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProtectedStorageEntry *ProtectedStorageEntry `protobuf:"bytes,1,opt,name=protected_storage_entry,json=protectedStorageEntry,proto3" json:"protected_storage_entry,omitempty"`
}

func (x *RemoveDataMessage) Reset() {
	*x = RemoveDataMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveDataMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveDataMessage) ProtoMessage() {}

func (x *RemoveDataMessage) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveDataMessage.ProtoReflect.Descriptor instead.
func (*RemoveDataMessage) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{15}
}

func (x *RemoveDataMessage) GetProtectedStorageEntry() *ProtectedStorageEntry {
	if x != nil {
		return x.ProtectedStorageEntry
	}
	return nil
}

type RemoveMailboxDataMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProtectedStorageEntry *ProtectedMailboxStorageEntry `protobuf:"bytes,1,opt,name=protected_storage_entry,json=protectedStorageEntry,proto3" json:"protected_storage_entry,omitempty"`
}

func (x *RemoveMailboxDataMessage) Reset() {
	*x = RemoveMailboxDataMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveMailboxDataMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveMailboxDataMessage) ProtoMessage() {}

func (x *RemoveMailboxDataMessage) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveMailboxDataMessage.ProtoReflect.Descriptor instead.
func (*RemoveMailboxDataMessage) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{16}
}

func (x *RemoveMailboxDataMessage) GetProtectedStorageEntry() *ProtectedMailboxStorageEntry {
	if x != nil {
		return x.ProtectedStorageEntry
	}
	return nil
}

type AddPersistableNetworkPayloadMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Payload *PersistableNetworkPayload `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *AddPersistableNetworkPayloadMessage) Reset() {
	*x = AddPersistableNetworkPayloadMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddPersistableNetworkPayloadMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddPersistableNetworkPayloadMessage) ProtoMessage() {}

func (x *AddPersistableNetworkPayloadMessage) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddPersistableNetworkPayloadMessage.ProtoReflect.Descriptor instead.
func (*AddPersistableNetworkPayloadMessage) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{17}
}

func (x *AddPersistableNetworkPayloadMessage) GetPayload() *PersistableNetworkPayload {
	if x != nil {
		return x.Payload
	}
	return nil
}

type CloseConnectionMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reason string `protobuf:"bytes,1,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *CloseConnectionMessage) Reset() {
	*x = CloseConnectionMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloseConnectionMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloseConnectionMessage) ProtoMessage() {}

func (x *CloseConnectionMessage) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloseConnectionMessage.ProtoReflect.Descriptor instead.
func (*CloseConnectionMessage) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{18}
}

func (x *CloseConnectionMessage) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type AckMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid                string       `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	SenderNodeAddress  *NodeAddress `protobuf:"bytes,2,opt,name=sender_node_address,json=senderNodeAddress,proto3" json:"sender_node_address,omitempty"`
	SourceType         string       `protobuf:"bytes,3,opt,name=source_type,json=sourceType,proto3" json:"source_type,omitempty"` // enum name. e.g.  TradeMessage, DisputeMessage,...
	SourceMsgClassName string       `protobuf:"bytes,4,opt,name=source_msg_class_name,json=sourceMsgClassName,proto3" json:"source_msg_class_name,omitempty"`
	SourceUid          string       `protobuf:"bytes,5,opt,name=source_uid,json=sourceUid,proto3" json:"source_uid,omitempty"`          // uid of source (TradeMessage)
	SourceId           string       `protobuf:"bytes,6,opt,name=source_id,json=sourceId,proto3" json:"source_id,omitempty"`             // id of source (tradeId, disputeId)
	Success            bool         `protobuf:"varint,7,opt,name=success,proto3" json:"success,omitempty"`                              // true if source message was processed successfully
	ErrorMessage       string       `protobuf:"bytes,8,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"` // optional error message if source message processing failed
}

func (x *AckMessage) Reset() {
	*x = AckMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AckMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AckMessage) ProtoMessage() {}

func (x *AckMessage) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AckMessage.ProtoReflect.Descriptor instead.
func (*AckMessage) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{19}
}

func (x *AckMessage) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *AckMessage) GetSenderNodeAddress() *NodeAddress {
	if x != nil {
		return x.SenderNodeAddress
	}
	return nil
}

func (x *AckMessage) GetSourceType() string {
	if x != nil {
		return x.SourceType
	}
	return ""
}

func (x *AckMessage) GetSourceMsgClassName() string {
	if x != nil {
		return x.SourceMsgClassName
	}
	return ""
}

func (x *AckMessage) GetSourceUid() string {
	if x != nil {
		return x.SourceUid
	}
	return ""
}

func (x *AckMessage) GetSourceId() string {
	if x != nil {
		return x.SourceId
	}
	return ""
}

func (x *AckMessage) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *AckMessage) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

type PrefixedSealedAndSignedMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeAddress       *NodeAddress     `protobuf:"bytes,1,opt,name=node_address,json=nodeAddress,proto3" json:"node_address,omitempty"`
	SealedAndSigned   *SealedAndSigned `protobuf:"bytes,2,opt,name=sealed_and_signed,json=sealedAndSigned,proto3" json:"sealed_and_signed,omitempty"`
	AddressPrefixHash []byte           `protobuf:"bytes,3,opt,name=address_prefix_hash,json=addressPrefixHash,proto3" json:"address_prefix_hash,omitempty"`
	Uid               string           `protobuf:"bytes,4,opt,name=uid,proto3" json:"uid,omitempty"`
}

func (x *PrefixedSealedAndSignedMessage) Reset() {
	*x = PrefixedSealedAndSignedMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrefixedSealedAndSignedMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrefixedSealedAndSignedMessage) ProtoMessage() {}

func (x *PrefixedSealedAndSignedMessage) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrefixedSealedAndSignedMessage.ProtoReflect.Descriptor instead.
func (*PrefixedSealedAndSignedMessage) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{20}
}

func (x *PrefixedSealedAndSignedMessage) GetNodeAddress() *NodeAddress {
	if x != nil {
		return x.NodeAddress
	}
	return nil
}

func (x *PrefixedSealedAndSignedMessage) GetSealedAndSigned() *SealedAndSigned {
	if x != nil {
		return x.SealedAndSigned
	}
	return nil
}

func (x *PrefixedSealedAndSignedMessage) GetAddressPrefixHash() []byte {
	if x != nil {
		return x.AddressPrefixHash
	}
	return nil
}

func (x *PrefixedSealedAndSignedMessage) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

type InputsForDepositTxRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeId                             string                 `protobuf:"bytes,1,opt,name=trade_id,json=tradeId,proto3" json:"trade_id,omitempty"`
	SenderNodeAddress                   *NodeAddress           `protobuf:"bytes,2,opt,name=sender_node_address,json=senderNodeAddress,proto3" json:"sender_node_address,omitempty"`
	TradeAmount                         int64                  `protobuf:"varint,3,opt,name=trade_amount,json=tradeAmount,proto3" json:"trade_amount,omitempty"`
	TradePrice                          int64                  `protobuf:"varint,4,opt,name=trade_price,json=tradePrice,proto3" json:"trade_price,omitempty"`
	TxFee                               int64                  `protobuf:"varint,5,opt,name=tx_fee,json=txFee,proto3" json:"tx_fee,omitempty"`
	TakerFee                            int64                  `protobuf:"varint,6,opt,name=taker_fee,json=takerFee,proto3" json:"taker_fee,omitempty"`
	IsCurrencyForTakerFeeBtc            bool                   `protobuf:"varint,7,opt,name=is_currency_for_taker_fee_btc,json=isCurrencyForTakerFeeBtc,proto3" json:"is_currency_for_taker_fee_btc,omitempty"`
	RawTransactionInputs                []*RawTransactionInput `protobuf:"bytes,8,rep,name=raw_transaction_inputs,json=rawTransactionInputs,proto3" json:"raw_transaction_inputs,omitempty"`
	ChangeOutputValue                   int64                  `protobuf:"varint,9,opt,name=change_output_value,json=changeOutputValue,proto3" json:"change_output_value,omitempty"`
	ChangeOutputAddress                 string                 `protobuf:"bytes,10,opt,name=change_output_address,json=changeOutputAddress,proto3" json:"change_output_address,omitempty"`
	TakerMultiSigPubKey                 []byte                 `protobuf:"bytes,11,opt,name=taker_multi_sig_pub_key,json=takerMultiSigPubKey,proto3" json:"taker_multi_sig_pub_key,omitempty"`
	TakerPayoutAddressString            string                 `protobuf:"bytes,12,opt,name=taker_payout_address_string,json=takerPayoutAddressString,proto3" json:"taker_payout_address_string,omitempty"`
	TakerPubKeyRing                     *PubKeyRing            `protobuf:"bytes,13,opt,name=taker_pub_key_ring,json=takerPubKeyRing,proto3" json:"taker_pub_key_ring,omitempty"`
	TakerPaymentAccountPayload          *PaymentAccountPayload `protobuf:"bytes,14,opt,name=taker_payment_account_payload,json=takerPaymentAccountPayload,proto3" json:"taker_payment_account_payload,omitempty"`
	TakerAccountId                      string                 `protobuf:"bytes,15,opt,name=taker_account_id,json=takerAccountId,proto3" json:"taker_account_id,omitempty"`
	TakerFeeTxId                        string                 `protobuf:"bytes,16,opt,name=taker_fee_tx_id,json=takerFeeTxId,proto3" json:"taker_fee_tx_id,omitempty"`
	AcceptedArbitratorNodeAddresses     []*NodeAddress         `protobuf:"bytes,17,rep,name=accepted_arbitrator_node_addresses,json=acceptedArbitratorNodeAddresses,proto3" json:"accepted_arbitrator_node_addresses,omitempty"`
	AcceptedMediatorNodeAddresses       []*NodeAddress         `protobuf:"bytes,18,rep,name=accepted_mediator_node_addresses,json=acceptedMediatorNodeAddresses,proto3" json:"accepted_mediator_node_addresses,omitempty"`
	ArbitratorNodeAddress               *NodeAddress           `protobuf:"bytes,19,opt,name=arbitrator_node_address,json=arbitratorNodeAddress,proto3" json:"arbitrator_node_address,omitempty"`
	MediatorNodeAddress                 *NodeAddress           `protobuf:"bytes,20,opt,name=mediator_node_address,json=mediatorNodeAddress,proto3" json:"mediator_node_address,omitempty"`
	Uid                                 string                 `protobuf:"bytes,21,opt,name=uid,proto3" json:"uid,omitempty"`
	AccountAgeWitnessSignatureOfOfferId []byte                 `protobuf:"bytes,22,opt,name=account_age_witness_signature_of_offer_id,json=accountAgeWitnessSignatureOfOfferId,proto3" json:"account_age_witness_signature_of_offer_id,omitempty"`
	CurrentDate                         int64                  `protobuf:"varint,23,opt,name=current_date,json=currentDate,proto3" json:"current_date,omitempty"`
	AcceptedRefundAgentNodeAddresses    []*NodeAddress         `protobuf:"bytes,24,rep,name=accepted_refund_agent_node_addresses,json=acceptedRefundAgentNodeAddresses,proto3" json:"accepted_refund_agent_node_addresses,omitempty"`
	RefundAgentNodeAddress              *NodeAddress           `protobuf:"bytes,25,opt,name=refund_agent_node_address,json=refundAgentNodeAddress,proto3" json:"refund_agent_node_address,omitempty"`
}

func (x *InputsForDepositTxRequest) Reset() {
	*x = InputsForDepositTxRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InputsForDepositTxRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputsForDepositTxRequest) ProtoMessage() {}

func (x *InputsForDepositTxRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputsForDepositTxRequest.ProtoReflect.Descriptor instead.
func (*InputsForDepositTxRequest) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{21}
}

func (x *InputsForDepositTxRequest) GetTradeId() string {
	if x != nil {
		return x.TradeId
	}
	return ""
}

func (x *InputsForDepositTxRequest) GetSenderNodeAddress() *NodeAddress {
	if x != nil {
		return x.SenderNodeAddress
	}
	return nil
}

func (x *InputsForDepositTxRequest) GetTradeAmount() int64 {
	if x != nil {
		return x.TradeAmount
	}
	return 0
}

func (x *InputsForDepositTxRequest) GetTradePrice() int64 {
	if x != nil {
		return x.TradePrice
	}
	return 0
}

func (x *InputsForDepositTxRequest) GetTxFee() int64 {
	if x != nil {
		return x.TxFee
	}
	return 0
}

func (x *InputsForDepositTxRequest) GetTakerFee() int64 {
	if x != nil {
		return x.TakerFee
	}
	return 0
}

func (x *InputsForDepositTxRequest) GetIsCurrencyForTakerFeeBtc() bool {
	if x != nil {
		return x.IsCurrencyForTakerFeeBtc
	}
	return false
}

func (x *InputsForDepositTxRequest) GetRawTransactionInputs() []*RawTransactionInput {
	if x != nil {
		return x.RawTransactionInputs
	}
	return nil
}

func (x *InputsForDepositTxRequest) GetChangeOutputValue() int64 {
	if x != nil {
		return x.ChangeOutputValue
	}
	return 0
}

func (x *InputsForDepositTxRequest) GetChangeOutputAddress() string {
	if x != nil {
		return x.ChangeOutputAddress
	}
	return ""
}

func (x *InputsForDepositTxRequest) GetTakerMultiSigPubKey() []byte {
	if x != nil {
		return x.TakerMultiSigPubKey
	}
	return nil
}

func (x *InputsForDepositTxRequest) GetTakerPayoutAddressString() string {
	if x != nil {
		return x.TakerPayoutAddressString
	}
	return ""
}

func (x *InputsForDepositTxRequest) GetTakerPubKeyRing() *PubKeyRing {
	if x != nil {
		return x.TakerPubKeyRing
	}
	return nil
}

func (x *InputsForDepositTxRequest) GetTakerPaymentAccountPayload() *PaymentAccountPayload {
	if x != nil {
		return x.TakerPaymentAccountPayload
	}
	return nil
}

func (x *InputsForDepositTxRequest) GetTakerAccountId() string {
	if x != nil {
		return x.TakerAccountId
	}
	return ""
}

func (x *InputsForDepositTxRequest) GetTakerFeeTxId() string {
	if x != nil {
		return x.TakerFeeTxId
	}
	return ""
}

func (x *InputsForDepositTxRequest) GetAcceptedArbitratorNodeAddresses() []*NodeAddress {
	if x != nil {
		return x.AcceptedArbitratorNodeAddresses
	}
	return nil
}

func (x *InputsForDepositTxRequest) GetAcceptedMediatorNodeAddresses() []*NodeAddress {
	if x != nil {
		return x.AcceptedMediatorNodeAddresses
	}
	return nil
}

func (x *InputsForDepositTxRequest) GetArbitratorNodeAddress() *NodeAddress {
	if x != nil {
		return x.ArbitratorNodeAddress
	}
	return nil
}

func (x *InputsForDepositTxRequest) GetMediatorNodeAddress() *NodeAddress {
	if x != nil {
		return x.MediatorNodeAddress
	}
	return nil
}

func (x *InputsForDepositTxRequest) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *InputsForDepositTxRequest) GetAccountAgeWitnessSignatureOfOfferId() []byte {
	if x != nil {
		return x.AccountAgeWitnessSignatureOfOfferId
	}
	return nil
}

func (x *InputsForDepositTxRequest) GetCurrentDate() int64 {
	if x != nil {
		return x.CurrentDate
	}
	return 0
}

func (x *InputsForDepositTxRequest) GetAcceptedRefundAgentNodeAddresses() []*NodeAddress {
	if x != nil {
		return x.AcceptedRefundAgentNodeAddresses
	}
	return nil
}

func (x *InputsForDepositTxRequest) GetRefundAgentNodeAddress() *NodeAddress {
	if x != nil {
		return x.RefundAgentNodeAddress
	}
	return nil
}

type InputsForDepositTxResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeId                                       string                 `protobuf:"bytes,1,opt,name=trade_id,json=tradeId,proto3" json:"trade_id,omitempty"`
	MakerPaymentAccountPayload                    *PaymentAccountPayload `protobuf:"bytes,2,opt,name=maker_payment_account_payload,json=makerPaymentAccountPayload,proto3" json:"maker_payment_account_payload,omitempty"`
	MakerAccountId                                string                 `protobuf:"bytes,3,opt,name=maker_account_id,json=makerAccountId,proto3" json:"maker_account_id,omitempty"`
	MakerContractAsJson                           string                 `protobuf:"bytes,4,opt,name=maker_contract_as_json,json=makerContractAsJson,proto3" json:"maker_contract_as_json,omitempty"`
	MakerContractSignature                        string                 `protobuf:"bytes,5,opt,name=maker_contract_signature,json=makerContractSignature,proto3" json:"maker_contract_signature,omitempty"`
	MakerPayoutAddressString                      string                 `protobuf:"bytes,6,opt,name=maker_payout_address_string,json=makerPayoutAddressString,proto3" json:"maker_payout_address_string,omitempty"`
	PreparedDepositTx                             []byte                 `protobuf:"bytes,7,opt,name=prepared_deposit_tx,json=preparedDepositTx,proto3" json:"prepared_deposit_tx,omitempty"`
	MakerInputs                                   []*RawTransactionInput `protobuf:"bytes,8,rep,name=maker_inputs,json=makerInputs,proto3" json:"maker_inputs,omitempty"`
	MakerMultiSigPubKey                           []byte                 `protobuf:"bytes,9,opt,name=maker_multi_sig_pub_key,json=makerMultiSigPubKey,proto3" json:"maker_multi_sig_pub_key,omitempty"`
	SenderNodeAddress                             *NodeAddress           `protobuf:"bytes,10,opt,name=sender_node_address,json=senderNodeAddress,proto3" json:"sender_node_address,omitempty"`
	Uid                                           string                 `protobuf:"bytes,11,opt,name=uid,proto3" json:"uid,omitempty"`
	AccountAgeWitnessSignatureOfPreparedDepositTx []byte                 `protobuf:"bytes,12,opt,name=account_age_witness_signature_of_prepared_deposit_tx,json=accountAgeWitnessSignatureOfPreparedDepositTx,proto3" json:"account_age_witness_signature_of_prepared_deposit_tx,omitempty"`
	CurrentDate                                   int64                  `protobuf:"varint,13,opt,name=current_date,json=currentDate,proto3" json:"current_date,omitempty"`
	LockTime                                      int64                  `protobuf:"varint,14,opt,name=lock_time,json=lockTime,proto3" json:"lock_time,omitempty"`
}

func (x *InputsForDepositTxResponse) Reset() {
	*x = InputsForDepositTxResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InputsForDepositTxResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputsForDepositTxResponse) ProtoMessage() {}

func (x *InputsForDepositTxResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputsForDepositTxResponse.ProtoReflect.Descriptor instead.
func (*InputsForDepositTxResponse) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{22}
}

func (x *InputsForDepositTxResponse) GetTradeId() string {
	if x != nil {
		return x.TradeId
	}
	return ""
}

func (x *InputsForDepositTxResponse) GetMakerPaymentAccountPayload() *PaymentAccountPayload {
	if x != nil {
		return x.MakerPaymentAccountPayload
	}
	return nil
}

func (x *InputsForDepositTxResponse) GetMakerAccountId() string {
	if x != nil {
		return x.MakerAccountId
	}
	return ""
}

func (x *InputsForDepositTxResponse) GetMakerContractAsJson() string {
	if x != nil {
		return x.MakerContractAsJson
	}
	return ""
}

func (x *InputsForDepositTxResponse) GetMakerContractSignature() string {
	if x != nil {
		return x.MakerContractSignature
	}
	return ""
}

func (x *InputsForDepositTxResponse) GetMakerPayoutAddressString() string {
	if x != nil {
		return x.MakerPayoutAddressString
	}
	return ""
}

func (x *InputsForDepositTxResponse) GetPreparedDepositTx() []byte {
	if x != nil {
		return x.PreparedDepositTx
	}
	return nil
}

func (x *InputsForDepositTxResponse) GetMakerInputs() []*RawTransactionInput {
	if x != nil {
		return x.MakerInputs
	}
	return nil
}

func (x *InputsForDepositTxResponse) GetMakerMultiSigPubKey() []byte {
	if x != nil {
		return x.MakerMultiSigPubKey
	}
	return nil
}

func (x *InputsForDepositTxResponse) GetSenderNodeAddress() *NodeAddress {
	if x != nil {
		return x.SenderNodeAddress
	}
	return nil
}

func (x *InputsForDepositTxResponse) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *InputsForDepositTxResponse) GetAccountAgeWitnessSignatureOfPreparedDepositTx() []byte {
	if x != nil {
		return x.AccountAgeWitnessSignatureOfPreparedDepositTx
	}
	return nil
}

func (x *InputsForDepositTxResponse) GetCurrentDate() int64 {
	if x != nil {
		return x.CurrentDate
	}
	return 0
}

func (x *InputsForDepositTxResponse) GetLockTime() int64 {
	if x != nil {
		return x.LockTime
	}
	return 0
}

type DelayedPayoutTxSignatureRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid                            string       `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	TradeId                        string       `protobuf:"bytes,2,opt,name=trade_id,json=tradeId,proto3" json:"trade_id,omitempty"`
	SenderNodeAddress              *NodeAddress `protobuf:"bytes,3,opt,name=sender_node_address,json=senderNodeAddress,proto3" json:"sender_node_address,omitempty"`
	DelayedPayoutTx                []byte       `protobuf:"bytes,4,opt,name=delayed_payout_tx,json=delayedPayoutTx,proto3" json:"delayed_payout_tx,omitempty"`
	DelayedPayoutTxSellerSignature []byte       `protobuf:"bytes,5,opt,name=delayed_payout_tx_seller_signature,json=delayedPayoutTxSellerSignature,proto3" json:"delayed_payout_tx_seller_signature,omitempty"`
}

func (x *DelayedPayoutTxSignatureRequest) Reset() {
	*x = DelayedPayoutTxSignatureRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelayedPayoutTxSignatureRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelayedPayoutTxSignatureRequest) ProtoMessage() {}

func (x *DelayedPayoutTxSignatureRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelayedPayoutTxSignatureRequest.ProtoReflect.Descriptor instead.
func (*DelayedPayoutTxSignatureRequest) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{23}
}

func (x *DelayedPayoutTxSignatureRequest) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *DelayedPayoutTxSignatureRequest) GetTradeId() string {
	if x != nil {
		return x.TradeId
	}
	return ""
}

func (x *DelayedPayoutTxSignatureRequest) GetSenderNodeAddress() *NodeAddress {
	if x != nil {
		return x.SenderNodeAddress
	}
	return nil
}

func (x *DelayedPayoutTxSignatureRequest) GetDelayedPayoutTx() []byte {
	if x != nil {
		return x.DelayedPayoutTx
	}
	return nil
}

func (x *DelayedPayoutTxSignatureRequest) GetDelayedPayoutTxSellerSignature() []byte {
	if x != nil {
		return x.DelayedPayoutTxSellerSignature
	}
	return nil
}

type DelayedPayoutTxSignatureResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid                           string       `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	TradeId                       string       `protobuf:"bytes,2,opt,name=trade_id,json=tradeId,proto3" json:"trade_id,omitempty"`
	SenderNodeAddress             *NodeAddress `protobuf:"bytes,3,opt,name=sender_node_address,json=senderNodeAddress,proto3" json:"sender_node_address,omitempty"`
	DelayedPayoutTxBuyerSignature []byte       `protobuf:"bytes,4,opt,name=delayed_payout_tx_buyer_signature,json=delayedPayoutTxBuyerSignature,proto3" json:"delayed_payout_tx_buyer_signature,omitempty"`
	DepositTx                     []byte       `protobuf:"bytes,5,opt,name=deposit_tx,json=depositTx,proto3" json:"deposit_tx,omitempty"`
}

func (x *DelayedPayoutTxSignatureResponse) Reset() {
	*x = DelayedPayoutTxSignatureResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelayedPayoutTxSignatureResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelayedPayoutTxSignatureResponse) ProtoMessage() {}

func (x *DelayedPayoutTxSignatureResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelayedPayoutTxSignatureResponse.ProtoReflect.Descriptor instead.
func (*DelayedPayoutTxSignatureResponse) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{24}
}

func (x *DelayedPayoutTxSignatureResponse) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *DelayedPayoutTxSignatureResponse) GetTradeId() string {
	if x != nil {
		return x.TradeId
	}
	return ""
}

func (x *DelayedPayoutTxSignatureResponse) GetSenderNodeAddress() *NodeAddress {
	if x != nil {
		return x.SenderNodeAddress
	}
	return nil
}

func (x *DelayedPayoutTxSignatureResponse) GetDelayedPayoutTxBuyerSignature() []byte {
	if x != nil {
		return x.DelayedPayoutTxBuyerSignature
	}
	return nil
}

func (x *DelayedPayoutTxSignatureResponse) GetDepositTx() []byte {
	if x != nil {
		return x.DepositTx
	}
	return nil
}

type DepositTxAndDelayedPayoutTxMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid               string       `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	TradeId           string       `protobuf:"bytes,2,opt,name=trade_id,json=tradeId,proto3" json:"trade_id,omitempty"`
	SenderNodeAddress *NodeAddress `protobuf:"bytes,3,opt,name=sender_node_address,json=senderNodeAddress,proto3" json:"sender_node_address,omitempty"`
	DepositTx         []byte       `protobuf:"bytes,4,opt,name=deposit_tx,json=depositTx,proto3" json:"deposit_tx,omitempty"`
	DelayedPayoutTx   []byte       `protobuf:"bytes,5,opt,name=delayed_payout_tx,json=delayedPayoutTx,proto3" json:"delayed_payout_tx,omitempty"`
}

func (x *DepositTxAndDelayedPayoutTxMessage) Reset() {
	*x = DepositTxAndDelayedPayoutTxMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DepositTxAndDelayedPayoutTxMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DepositTxAndDelayedPayoutTxMessage) ProtoMessage() {}

func (x *DepositTxAndDelayedPayoutTxMessage) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DepositTxAndDelayedPayoutTxMessage.ProtoReflect.Descriptor instead.
func (*DepositTxAndDelayedPayoutTxMessage) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{25}
}

func (x *DepositTxAndDelayedPayoutTxMessage) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *DepositTxAndDelayedPayoutTxMessage) GetTradeId() string {
	if x != nil {
		return x.TradeId
	}
	return ""
}

func (x *DepositTxAndDelayedPayoutTxMessage) GetSenderNodeAddress() *NodeAddress {
	if x != nil {
		return x.SenderNodeAddress
	}
	return nil
}

func (x *DepositTxAndDelayedPayoutTxMessage) GetDepositTx() []byte {
	if x != nil {
		return x.DepositTx
	}
	return nil
}

func (x *DepositTxAndDelayedPayoutTxMessage) GetDelayedPayoutTx() []byte {
	if x != nil {
		return x.DelayedPayoutTx
	}
	return nil
}

type DepositTxMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid                       string       `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	TradeId                   string       `protobuf:"bytes,2,opt,name=trade_id,json=tradeId,proto3" json:"trade_id,omitempty"`
	SenderNodeAddress         *NodeAddress `protobuf:"bytes,3,opt,name=sender_node_address,json=senderNodeAddress,proto3" json:"sender_node_address,omitempty"`
	DepositTxWithoutWitnesses []byte       `protobuf:"bytes,4,opt,name=deposit_tx_without_witnesses,json=depositTxWithoutWitnesses,proto3" json:"deposit_tx_without_witnesses,omitempty"`
}

func (x *DepositTxMessage) Reset() {
	*x = DepositTxMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DepositTxMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DepositTxMessage) ProtoMessage() {}

func (x *DepositTxMessage) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DepositTxMessage.ProtoReflect.Descriptor instead.
func (*DepositTxMessage) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{26}
}

func (x *DepositTxMessage) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *DepositTxMessage) GetTradeId() string {
	if x != nil {
		return x.TradeId
	}
	return ""
}

func (x *DepositTxMessage) GetSenderNodeAddress() *NodeAddress {
	if x != nil {
		return x.SenderNodeAddress
	}
	return nil
}

func (x *DepositTxMessage) GetDepositTxWithoutWitnesses() []byte {
	if x != nil {
		return x.DepositTxWithoutWitnesses
	}
	return nil
}

type PeerPublishedDelayedPayoutTxMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid               string       `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	TradeId           string       `protobuf:"bytes,2,opt,name=trade_id,json=tradeId,proto3" json:"trade_id,omitempty"`
	SenderNodeAddress *NodeAddress `protobuf:"bytes,3,opt,name=sender_node_address,json=senderNodeAddress,proto3" json:"sender_node_address,omitempty"`
}

func (x *PeerPublishedDelayedPayoutTxMessage) Reset() {
	*x = PeerPublishedDelayedPayoutTxMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeerPublishedDelayedPayoutTxMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeerPublishedDelayedPayoutTxMessage) ProtoMessage() {}

func (x *PeerPublishedDelayedPayoutTxMessage) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeerPublishedDelayedPayoutTxMessage.ProtoReflect.Descriptor instead.
func (*PeerPublishedDelayedPayoutTxMessage) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{27}
}

func (x *PeerPublishedDelayedPayoutTxMessage) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *PeerPublishedDelayedPayoutTxMessage) GetTradeId() string {
	if x != nil {
		return x.TradeId
	}
	return ""
}

func (x *PeerPublishedDelayedPayoutTxMessage) GetSenderNodeAddress() *NodeAddress {
	if x != nil {
		return x.SenderNodeAddress
	}
	return nil
}

type CounterCurrencyTransferStartedMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeId                  string       `protobuf:"bytes,1,opt,name=trade_id,json=tradeId,proto3" json:"trade_id,omitempty"`
	BuyerPayoutAddress       string       `protobuf:"bytes,2,opt,name=buyer_payout_address,json=buyerPayoutAddress,proto3" json:"buyer_payout_address,omitempty"`
	SenderNodeAddress        *NodeAddress `protobuf:"bytes,3,opt,name=sender_node_address,json=senderNodeAddress,proto3" json:"sender_node_address,omitempty"`
	BuyerSignature           []byte       `protobuf:"bytes,4,opt,name=buyer_signature,json=buyerSignature,proto3" json:"buyer_signature,omitempty"`
	CounterCurrencyTxId      string       `protobuf:"bytes,5,opt,name=counter_currency_tx_id,json=counterCurrencyTxId,proto3" json:"counter_currency_tx_id,omitempty"`
	Uid                      string       `protobuf:"bytes,6,opt,name=uid,proto3" json:"uid,omitempty"`
	CounterCurrencyExtraData string       `protobuf:"bytes,7,opt,name=counter_currency_extra_data,json=counterCurrencyExtraData,proto3" json:"counter_currency_extra_data,omitempty"`
}

func (x *CounterCurrencyTransferStartedMessage) Reset() {
	*x = CounterCurrencyTransferStartedMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CounterCurrencyTransferStartedMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CounterCurrencyTransferStartedMessage) ProtoMessage() {}

func (x *CounterCurrencyTransferStartedMessage) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CounterCurrencyTransferStartedMessage.ProtoReflect.Descriptor instead.
func (*CounterCurrencyTransferStartedMessage) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{28}
}

func (x *CounterCurrencyTransferStartedMessage) GetTradeId() string {
	if x != nil {
		return x.TradeId
	}
	return ""
}

func (x *CounterCurrencyTransferStartedMessage) GetBuyerPayoutAddress() string {
	if x != nil {
		return x.BuyerPayoutAddress
	}
	return ""
}

func (x *CounterCurrencyTransferStartedMessage) GetSenderNodeAddress() *NodeAddress {
	if x != nil {
		return x.SenderNodeAddress
	}
	return nil
}

func (x *CounterCurrencyTransferStartedMessage) GetBuyerSignature() []byte {
	if x != nil {
		return x.BuyerSignature
	}
	return nil
}

func (x *CounterCurrencyTransferStartedMessage) GetCounterCurrencyTxId() string {
	if x != nil {
		return x.CounterCurrencyTxId
	}
	return ""
}

func (x *CounterCurrencyTransferStartedMessage) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *CounterCurrencyTransferStartedMessage) GetCounterCurrencyExtraData() string {
	if x != nil {
		return x.CounterCurrencyExtraData
	}
	return ""
}

type FinalizePayoutTxRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeId             string       `protobuf:"bytes,1,opt,name=trade_id,json=tradeId,proto3" json:"trade_id,omitempty"`
	SellerSignature     []byte       `protobuf:"bytes,2,opt,name=seller_signature,json=sellerSignature,proto3" json:"seller_signature,omitempty"`
	SellerPayoutAddress string       `protobuf:"bytes,3,opt,name=seller_payout_address,json=sellerPayoutAddress,proto3" json:"seller_payout_address,omitempty"`
	SenderNodeAddress   *NodeAddress `protobuf:"bytes,4,opt,name=sender_node_address,json=senderNodeAddress,proto3" json:"sender_node_address,omitempty"`
	Uid                 string       `protobuf:"bytes,5,opt,name=uid,proto3" json:"uid,omitempty"`
}

func (x *FinalizePayoutTxRequest) Reset() {
	*x = FinalizePayoutTxRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinalizePayoutTxRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinalizePayoutTxRequest) ProtoMessage() {}

func (x *FinalizePayoutTxRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinalizePayoutTxRequest.ProtoReflect.Descriptor instead.
func (*FinalizePayoutTxRequest) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{29}
}

func (x *FinalizePayoutTxRequest) GetTradeId() string {
	if x != nil {
		return x.TradeId
	}
	return ""
}

func (x *FinalizePayoutTxRequest) GetSellerSignature() []byte {
	if x != nil {
		return x.SellerSignature
	}
	return nil
}

func (x *FinalizePayoutTxRequest) GetSellerPayoutAddress() string {
	if x != nil {
		return x.SellerPayoutAddress
	}
	return ""
}

func (x *FinalizePayoutTxRequest) GetSenderNodeAddress() *NodeAddress {
	if x != nil {
		return x.SenderNodeAddress
	}
	return nil
}

func (x *FinalizePayoutTxRequest) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

type PayoutTxPublishedMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeId           string         `protobuf:"bytes,1,opt,name=trade_id,json=tradeId,proto3" json:"trade_id,omitempty"`
	PayoutTx          []byte         `protobuf:"bytes,2,opt,name=payout_tx,json=payoutTx,proto3" json:"payout_tx,omitempty"`
	SenderNodeAddress *NodeAddress   `protobuf:"bytes,3,opt,name=sender_node_address,json=senderNodeAddress,proto3" json:"sender_node_address,omitempty"`
	Uid               string         `protobuf:"bytes,4,opt,name=uid,proto3" json:"uid,omitempty"`
	SignedWitness     *SignedWitness `protobuf:"bytes,5,opt,name=signed_witness,json=signedWitness,proto3" json:"signed_witness,omitempty"` // Added in v1.4.0
}

func (x *PayoutTxPublishedMessage) Reset() {
	*x = PayoutTxPublishedMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PayoutTxPublishedMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayoutTxPublishedMessage) ProtoMessage() {}

func (x *PayoutTxPublishedMessage) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayoutTxPublishedMessage.ProtoReflect.Descriptor instead.
func (*PayoutTxPublishedMessage) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{30}
}

func (x *PayoutTxPublishedMessage) GetTradeId() string {
	if x != nil {
		return x.TradeId
	}
	return ""
}

func (x *PayoutTxPublishedMessage) GetPayoutTx() []byte {
	if x != nil {
		return x.PayoutTx
	}
	return nil
}

func (x *PayoutTxPublishedMessage) GetSenderNodeAddress() *NodeAddress {
	if x != nil {
		return x.SenderNodeAddress
	}
	return nil
}

func (x *PayoutTxPublishedMessage) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *PayoutTxPublishedMessage) GetSignedWitness() *SignedWitness {
	if x != nil {
		return x.SignedWitness
	}
	return nil
}

type MediatedPayoutTxPublishedMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeId           string       `protobuf:"bytes,1,opt,name=trade_id,json=tradeId,proto3" json:"trade_id,omitempty"`
	PayoutTx          []byte       `protobuf:"bytes,2,opt,name=payout_tx,json=payoutTx,proto3" json:"payout_tx,omitempty"`
	SenderNodeAddress *NodeAddress `protobuf:"bytes,3,opt,name=sender_node_address,json=senderNodeAddress,proto3" json:"sender_node_address,omitempty"`
	Uid               string       `protobuf:"bytes,4,opt,name=uid,proto3" json:"uid,omitempty"`
}

func (x *MediatedPayoutTxPublishedMessage) Reset() {
	*x = MediatedPayoutTxPublishedMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MediatedPayoutTxPublishedMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MediatedPayoutTxPublishedMessage) ProtoMessage() {}

func (x *MediatedPayoutTxPublishedMessage) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MediatedPayoutTxPublishedMessage.ProtoReflect.Descriptor instead.
func (*MediatedPayoutTxPublishedMessage) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{31}
}

func (x *MediatedPayoutTxPublishedMessage) GetTradeId() string {
	if x != nil {
		return x.TradeId
	}
	return ""
}

func (x *MediatedPayoutTxPublishedMessage) GetPayoutTx() []byte {
	if x != nil {
		return x.PayoutTx
	}
	return nil
}

func (x *MediatedPayoutTxPublishedMessage) GetSenderNodeAddress() *NodeAddress {
	if x != nil {
		return x.SenderNodeAddress
	}
	return nil
}

func (x *MediatedPayoutTxPublishedMessage) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

type MediatedPayoutTxSignatureMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid               string       `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	TradeId           string       `protobuf:"bytes,3,opt,name=trade_id,json=tradeId,proto3" json:"trade_id,omitempty"`
	TxSignature       []byte       `protobuf:"bytes,2,opt,name=tx_signature,json=txSignature,proto3" json:"tx_signature,omitempty"`
	SenderNodeAddress *NodeAddress `protobuf:"bytes,4,opt,name=sender_node_address,json=senderNodeAddress,proto3" json:"sender_node_address,omitempty"`
}

func (x *MediatedPayoutTxSignatureMessage) Reset() {
	*x = MediatedPayoutTxSignatureMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MediatedPayoutTxSignatureMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MediatedPayoutTxSignatureMessage) ProtoMessage() {}

func (x *MediatedPayoutTxSignatureMessage) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MediatedPayoutTxSignatureMessage.ProtoReflect.Descriptor instead.
func (*MediatedPayoutTxSignatureMessage) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{32}
}

func (x *MediatedPayoutTxSignatureMessage) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *MediatedPayoutTxSignatureMessage) GetTradeId() string {
	if x != nil {
		return x.TradeId
	}
	return ""
}

func (x *MediatedPayoutTxSignatureMessage) GetTxSignature() []byte {
	if x != nil {
		return x.TxSignature
	}
	return nil
}

func (x *MediatedPayoutTxSignatureMessage) GetSenderNodeAddress() *NodeAddress {
	if x != nil {
		return x.SenderNodeAddress
	}
	return nil
}

// Deprecated since 1.4.0
type RefreshTradeStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated: Do not use.
	Uid string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	// Deprecated: Do not use.
	TradeId string `protobuf:"bytes,2,opt,name=trade_id,json=tradeId,proto3" json:"trade_id,omitempty"`
	// Deprecated: Do not use.
	SenderNodeAddress *NodeAddress `protobuf:"bytes,3,opt,name=sender_node_address,json=senderNodeAddress,proto3" json:"sender_node_address,omitempty"`
}

func (x *RefreshTradeStateRequest) Reset() {
	*x = RefreshTradeStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefreshTradeStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshTradeStateRequest) ProtoMessage() {}

func (x *RefreshTradeStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshTradeStateRequest.ProtoReflect.Descriptor instead.
func (*RefreshTradeStateRequest) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{33}
}

// Deprecated: Do not use.
func (x *RefreshTradeStateRequest) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

// Deprecated: Do not use.
func (x *RefreshTradeStateRequest) GetTradeId() string {
	if x != nil {
		return x.TradeId
	}
	return ""
}

// Deprecated: Do not use.
func (x *RefreshTradeStateRequest) GetSenderNodeAddress() *NodeAddress {
	if x != nil {
		return x.SenderNodeAddress
	}
	return nil
}

// Deprecated since 1.4.0
type TraderSignedWitnessMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated: Do not use.
	Uid string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	// Deprecated: Do not use.
	TradeId string `protobuf:"bytes,2,opt,name=trade_id,json=tradeId,proto3" json:"trade_id,omitempty"`
	// Deprecated: Do not use.
	SenderNodeAddress *NodeAddress `protobuf:"bytes,3,opt,name=sender_node_address,json=senderNodeAddress,proto3" json:"sender_node_address,omitempty"`
	// Deprecated: Do not use.
	SignedWitness *SignedWitness `protobuf:"bytes,4,opt,name=signed_witness,json=signedWitness,proto3" json:"signed_witness,omitempty"`
}

func (x *TraderSignedWitnessMessage) Reset() {
	*x = TraderSignedWitnessMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TraderSignedWitnessMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraderSignedWitnessMessage) ProtoMessage() {}

func (x *TraderSignedWitnessMessage) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraderSignedWitnessMessage.ProtoReflect.Descriptor instead.
func (*TraderSignedWitnessMessage) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{34}
}

// Deprecated: Do not use.
func (x *TraderSignedWitnessMessage) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

// Deprecated: Do not use.
func (x *TraderSignedWitnessMessage) GetTradeId() string {
	if x != nil {
		return x.TradeId
	}
	return ""
}

// Deprecated: Do not use.
func (x *TraderSignedWitnessMessage) GetSenderNodeAddress() *NodeAddress {
	if x != nil {
		return x.SenderNodeAddress
	}
	return nil
}

// Deprecated: Do not use.
func (x *TraderSignedWitnessMessage) GetSignedWitness() *SignedWitness {
	if x != nil {
		return x.SignedWitness
	}
	return nil
}

type OpenNewDisputeMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dispute           *Dispute     `protobuf:"bytes,1,opt,name=dispute,proto3" json:"dispute,omitempty"`
	SenderNodeAddress *NodeAddress `protobuf:"bytes,2,opt,name=sender_node_address,json=senderNodeAddress,proto3" json:"sender_node_address,omitempty"`
	Uid               string       `protobuf:"bytes,3,opt,name=uid,proto3" json:"uid,omitempty"`
	Type              SupportType  `protobuf:"varint,4,opt,name=type,proto3,enum=io.bisq.protobuffer.SupportType" json:"type,omitempty"`
}

func (x *OpenNewDisputeMessage) Reset() {
	*x = OpenNewDisputeMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenNewDisputeMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenNewDisputeMessage) ProtoMessage() {}

func (x *OpenNewDisputeMessage) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenNewDisputeMessage.ProtoReflect.Descriptor instead.
func (*OpenNewDisputeMessage) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{35}
}

func (x *OpenNewDisputeMessage) GetDispute() *Dispute {
	if x != nil {
		return x.Dispute
	}
	return nil
}

func (x *OpenNewDisputeMessage) GetSenderNodeAddress() *NodeAddress {
	if x != nil {
		return x.SenderNodeAddress
	}
	return nil
}

func (x *OpenNewDisputeMessage) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *OpenNewDisputeMessage) GetType() SupportType {
	if x != nil {
		return x.Type
	}
	return SupportType_ARBITRATION
}

type PeerOpenedDisputeMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dispute           *Dispute     `protobuf:"bytes,1,opt,name=dispute,proto3" json:"dispute,omitempty"`
	SenderNodeAddress *NodeAddress `protobuf:"bytes,2,opt,name=sender_node_address,json=senderNodeAddress,proto3" json:"sender_node_address,omitempty"`
	Uid               string       `protobuf:"bytes,3,opt,name=uid,proto3" json:"uid,omitempty"`
	Type              SupportType  `protobuf:"varint,4,opt,name=type,proto3,enum=io.bisq.protobuffer.SupportType" json:"type,omitempty"`
}

func (x *PeerOpenedDisputeMessage) Reset() {
	*x = PeerOpenedDisputeMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeerOpenedDisputeMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeerOpenedDisputeMessage) ProtoMessage() {}

func (x *PeerOpenedDisputeMessage) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeerOpenedDisputeMessage.ProtoReflect.Descriptor instead.
func (*PeerOpenedDisputeMessage) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{36}
}

func (x *PeerOpenedDisputeMessage) GetDispute() *Dispute {
	if x != nil {
		return x.Dispute
	}
	return nil
}

func (x *PeerOpenedDisputeMessage) GetSenderNodeAddress() *NodeAddress {
	if x != nil {
		return x.SenderNodeAddress
	}
	return nil
}

func (x *PeerOpenedDisputeMessage) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *PeerOpenedDisputeMessage) GetType() SupportType {
	if x != nil {
		return x.Type
	}
	return SupportType_ARBITRATION
}

type ChatMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Date              int64         `protobuf:"varint,1,opt,name=date,proto3" json:"date,omitempty"`
	TradeId           string        `protobuf:"bytes,2,opt,name=trade_id,json=tradeId,proto3" json:"trade_id,omitempty"`
	TraderId          int32         `protobuf:"varint,3,opt,name=trader_id,json=traderId,proto3" json:"trader_id,omitempty"`
	SenderIsTrader    bool          `protobuf:"varint,4,opt,name=sender_is_trader,json=senderIsTrader,proto3" json:"sender_is_trader,omitempty"`
	Message           string        `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`
	Attachments       []*Attachment `protobuf:"bytes,6,rep,name=attachments,proto3" json:"attachments,omitempty"`
	Arrived           bool          `protobuf:"varint,7,opt,name=arrived,proto3" json:"arrived,omitempty"`
	StoredInMailbox   bool          `protobuf:"varint,8,opt,name=stored_in_mailbox,json=storedInMailbox,proto3" json:"stored_in_mailbox,omitempty"`
	IsSystemMessage   bool          `protobuf:"varint,9,opt,name=is_system_message,json=isSystemMessage,proto3" json:"is_system_message,omitempty"`
	SenderNodeAddress *NodeAddress  `protobuf:"bytes,10,opt,name=sender_node_address,json=senderNodeAddress,proto3" json:"sender_node_address,omitempty"`
	Uid               string        `protobuf:"bytes,11,opt,name=uid,proto3" json:"uid,omitempty"`
	SendMessageError  string        `protobuf:"bytes,12,opt,name=send_message_error,json=sendMessageError,proto3" json:"send_message_error,omitempty"`
	Acknowledged      bool          `protobuf:"varint,13,opt,name=acknowledged,proto3" json:"acknowledged,omitempty"`
	AckError          string        `protobuf:"bytes,14,opt,name=ack_error,json=ackError,proto3" json:"ack_error,omitempty"`
	Type              SupportType   `protobuf:"varint,15,opt,name=type,proto3,enum=io.bisq.protobuffer.SupportType" json:"type,omitempty"`
	WasDisplayed      bool          `protobuf:"varint,16,opt,name=was_displayed,json=wasDisplayed,proto3" json:"was_displayed,omitempty"`
}

func (x *ChatMessage) Reset() {
	*x = ChatMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatMessage) ProtoMessage() {}

func (x *ChatMessage) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatMessage.ProtoReflect.Descriptor instead.
func (*ChatMessage) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{37}
}

func (x *ChatMessage) GetDate() int64 {
	if x != nil {
		return x.Date
	}
	return 0
}

func (x *ChatMessage) GetTradeId() string {
	if x != nil {
		return x.TradeId
	}
	return ""
}

func (x *ChatMessage) GetTraderId() int32 {
	if x != nil {
		return x.TraderId
	}
	return 0
}

func (x *ChatMessage) GetSenderIsTrader() bool {
	if x != nil {
		return x.SenderIsTrader
	}
	return false
}

func (x *ChatMessage) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ChatMessage) GetAttachments() []*Attachment {
	if x != nil {
		return x.Attachments
	}
	return nil
}

func (x *ChatMessage) GetArrived() bool {
	if x != nil {
		return x.Arrived
	}
	return false
}

func (x *ChatMessage) GetStoredInMailbox() bool {
	if x != nil {
		return x.StoredInMailbox
	}
	return false
}

func (x *ChatMessage) GetIsSystemMessage() bool {
	if x != nil {
		return x.IsSystemMessage
	}
	return false
}

func (x *ChatMessage) GetSenderNodeAddress() *NodeAddress {
	if x != nil {
		return x.SenderNodeAddress
	}
	return nil
}

func (x *ChatMessage) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *ChatMessage) GetSendMessageError() string {
	if x != nil {
		return x.SendMessageError
	}
	return ""
}

func (x *ChatMessage) GetAcknowledged() bool {
	if x != nil {
		return x.Acknowledged
	}
	return false
}

func (x *ChatMessage) GetAckError() string {
	if x != nil {
		return x.AckError
	}
	return ""
}

func (x *ChatMessage) GetType() SupportType {
	if x != nil {
		return x.Type
	}
	return SupportType_ARBITRATION
}

func (x *ChatMessage) GetWasDisplayed() bool {
	if x != nil {
		return x.WasDisplayed
	}
	return false
}

type DisputeResultMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid               string         `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	DisputeResult     *DisputeResult `protobuf:"bytes,2,opt,name=dispute_result,json=disputeResult,proto3" json:"dispute_result,omitempty"`
	SenderNodeAddress *NodeAddress   `protobuf:"bytes,3,opt,name=sender_node_address,json=senderNodeAddress,proto3" json:"sender_node_address,omitempty"`
	Type              SupportType    `protobuf:"varint,4,opt,name=type,proto3,enum=io.bisq.protobuffer.SupportType" json:"type,omitempty"`
}

func (x *DisputeResultMessage) Reset() {
	*x = DisputeResultMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisputeResultMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisputeResultMessage) ProtoMessage() {}

func (x *DisputeResultMessage) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisputeResultMessage.ProtoReflect.Descriptor instead.
func (*DisputeResultMessage) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{38}
}

func (x *DisputeResultMessage) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *DisputeResultMessage) GetDisputeResult() *DisputeResult {
	if x != nil {
		return x.DisputeResult
	}
	return nil
}

func (x *DisputeResultMessage) GetSenderNodeAddress() *NodeAddress {
	if x != nil {
		return x.SenderNodeAddress
	}
	return nil
}

func (x *DisputeResultMessage) GetType() SupportType {
	if x != nil {
		return x.Type
	}
	return SupportType_ARBITRATION
}

type PeerPublishedDisputePayoutTxMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid               string       `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Transaction       []byte       `protobuf:"bytes,2,opt,name=transaction,proto3" json:"transaction,omitempty"`
	TradeId           string       `protobuf:"bytes,3,opt,name=trade_id,json=tradeId,proto3" json:"trade_id,omitempty"`
	SenderNodeAddress *NodeAddress `protobuf:"bytes,4,opt,name=sender_node_address,json=senderNodeAddress,proto3" json:"sender_node_address,omitempty"`
	Type              SupportType  `protobuf:"varint,5,opt,name=type,proto3,enum=io.bisq.protobuffer.SupportType" json:"type,omitempty"`
}

func (x *PeerPublishedDisputePayoutTxMessage) Reset() {
	*x = PeerPublishedDisputePayoutTxMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeerPublishedDisputePayoutTxMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeerPublishedDisputePayoutTxMessage) ProtoMessage() {}

func (x *PeerPublishedDisputePayoutTxMessage) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeerPublishedDisputePayoutTxMessage.ProtoReflect.Descriptor instead.
func (*PeerPublishedDisputePayoutTxMessage) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{39}
}

func (x *PeerPublishedDisputePayoutTxMessage) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *PeerPublishedDisputePayoutTxMessage) GetTransaction() []byte {
	if x != nil {
		return x.Transaction
	}
	return nil
}

func (x *PeerPublishedDisputePayoutTxMessage) GetTradeId() string {
	if x != nil {
		return x.TradeId
	}
	return ""
}

func (x *PeerPublishedDisputePayoutTxMessage) GetSenderNodeAddress() *NodeAddress {
	if x != nil {
		return x.SenderNodeAddress
	}
	return nil
}

func (x *PeerPublishedDisputePayoutTxMessage) GetType() SupportType {
	if x != nil {
		return x.Type
	}
	return SupportType_ARBITRATION
}

type PrivateNotificationMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid                        string                      `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	SenderNodeAddress          *NodeAddress                `protobuf:"bytes,2,opt,name=sender_node_address,json=senderNodeAddress,proto3" json:"sender_node_address,omitempty"`
	PrivateNotificationPayload *PrivateNotificationPayload `protobuf:"bytes,3,opt,name=private_notification_payload,json=privateNotificationPayload,proto3" json:"private_notification_payload,omitempty"`
}

func (x *PrivateNotificationMessage) Reset() {
	*x = PrivateNotificationMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrivateNotificationMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrivateNotificationMessage) ProtoMessage() {}

func (x *PrivateNotificationMessage) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrivateNotificationMessage.ProtoReflect.Descriptor instead.
func (*PrivateNotificationMessage) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{40}
}

func (x *PrivateNotificationMessage) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *PrivateNotificationMessage) GetSenderNodeAddress() *NodeAddress {
	if x != nil {
		return x.SenderNodeAddress
	}
	return nil
}

func (x *PrivateNotificationMessage) GetPrivateNotificationPayload() *PrivateNotificationPayload {
	if x != nil {
		return x.PrivateNotificationPayload
	}
	return nil
}

type GetBlocksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromBlockHeight       int32        `protobuf:"varint,1,opt,name=from_block_height,json=fromBlockHeight,proto3" json:"from_block_height,omitempty"`
	Nonce                 int32        `protobuf:"varint,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
	SenderNodeAddress     *NodeAddress `protobuf:"bytes,3,opt,name=sender_node_address,json=senderNodeAddress,proto3" json:"sender_node_address,omitempty"`
	SupportedCapabilities []int32      `protobuf:"varint,4,rep,packed,name=supported_capabilities,json=supportedCapabilities,proto3" json:"supported_capabilities,omitempty"`
}

func (x *GetBlocksRequest) Reset() {
	*x = GetBlocksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBlocksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlocksRequest) ProtoMessage() {}

func (x *GetBlocksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlocksRequest.ProtoReflect.Descriptor instead.
func (*GetBlocksRequest) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{41}
}

func (x *GetBlocksRequest) GetFromBlockHeight() int32 {
	if x != nil {
		return x.FromBlockHeight
	}
	return 0
}

func (x *GetBlocksRequest) GetNonce() int32 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *GetBlocksRequest) GetSenderNodeAddress() *NodeAddress {
	if x != nil {
		return x.SenderNodeAddress
	}
	return nil
}

func (x *GetBlocksRequest) GetSupportedCapabilities() []int32 {
	if x != nil {
		return x.SupportedCapabilities
	}
	return nil
}

type GetBlocksResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Because of the way how PB implements inheritance we need to use the super class as type
	RawBlocks    []*BaseBlock `protobuf:"bytes,1,rep,name=raw_blocks,json=rawBlocks,proto3" json:"raw_blocks,omitempty"`
	RequestNonce int32        `protobuf:"varint,2,opt,name=request_nonce,json=requestNonce,proto3" json:"request_nonce,omitempty"`
}

func (x *GetBlocksResponse) Reset() {
	*x = GetBlocksResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBlocksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlocksResponse) ProtoMessage() {}

func (x *GetBlocksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlocksResponse.ProtoReflect.Descriptor instead.
func (*GetBlocksResponse) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{42}
}

func (x *GetBlocksResponse) GetRawBlocks() []*BaseBlock {
	if x != nil {
		return x.RawBlocks
	}
	return nil
}

func (x *GetBlocksResponse) GetRequestNonce() int32 {
	if x != nil {
		return x.RequestNonce
	}
	return 0
}

type NewBlockBroadcastMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Because of the way how PB implements inheritance we need to use the super class as type
	RawBlock *BaseBlock `protobuf:"bytes,1,opt,name=raw_block,json=rawBlock,proto3" json:"raw_block,omitempty"`
}

func (x *NewBlockBroadcastMessage) Reset() {
	*x = NewBlockBroadcastMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewBlockBroadcastMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewBlockBroadcastMessage) ProtoMessage() {}

func (x *NewBlockBroadcastMessage) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewBlockBroadcastMessage.ProtoReflect.Descriptor instead.
func (*NewBlockBroadcastMessage) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{43}
}

func (x *NewBlockBroadcastMessage) GetRawBlock() *BaseBlock {
	if x != nil {
		return x.RawBlock
	}
	return nil
}

type RepublishGovernanceDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RepublishGovernanceDataRequest) Reset() {
	*x = RepublishGovernanceDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepublishGovernanceDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepublishGovernanceDataRequest) ProtoMessage() {}

func (x *RepublishGovernanceDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepublishGovernanceDataRequest.ProtoReflect.Descriptor instead.
func (*RepublishGovernanceDataRequest) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{44}
}

type NewDaoStateHashMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StateHash *DaoStateHash `protobuf:"bytes,1,opt,name=state_hash,json=stateHash,proto3" json:"state_hash,omitempty"`
}

func (x *NewDaoStateHashMessage) Reset() {
	*x = NewDaoStateHashMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewDaoStateHashMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewDaoStateHashMessage) ProtoMessage() {}

func (x *NewDaoStateHashMessage) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewDaoStateHashMessage.ProtoReflect.Descriptor instead.
func (*NewDaoStateHashMessage) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{45}
}

func (x *NewDaoStateHashMessage) GetStateHash() *DaoStateHash {
	if x != nil {
		return x.StateHash
	}
	return nil
}

type NewProposalStateHashMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StateHash *ProposalStateHash `protobuf:"bytes,1,opt,name=state_hash,json=stateHash,proto3" json:"state_hash,omitempty"`
}

func (x *NewProposalStateHashMessage) Reset() {
	*x = NewProposalStateHashMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewProposalStateHashMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewProposalStateHashMessage) ProtoMessage() {}

func (x *NewProposalStateHashMessage) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewProposalStateHashMessage.ProtoReflect.Descriptor instead.
func (*NewProposalStateHashMessage) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{46}
}

func (x *NewProposalStateHashMessage) GetStateHash() *ProposalStateHash {
	if x != nil {
		return x.StateHash
	}
	return nil
}

type NewBlindVoteStateHashMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StateHash *BlindVoteStateHash `protobuf:"bytes,1,opt,name=state_hash,json=stateHash,proto3" json:"state_hash,omitempty"`
}

func (x *NewBlindVoteStateHashMessage) Reset() {
	*x = NewBlindVoteStateHashMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewBlindVoteStateHashMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewBlindVoteStateHashMessage) ProtoMessage() {}

func (x *NewBlindVoteStateHashMessage) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewBlindVoteStateHashMessage.ProtoReflect.Descriptor instead.
func (*NewBlindVoteStateHashMessage) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{47}
}

func (x *NewBlindVoteStateHashMessage) GetStateHash() *BlindVoteStateHash {
	if x != nil {
		return x.StateHash
	}
	return nil
}

type GetDaoStateHashesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Height int32 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	Nonce  int32 `protobuf:"varint,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (x *GetDaoStateHashesRequest) Reset() {
	*x = GetDaoStateHashesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDaoStateHashesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDaoStateHashesRequest) ProtoMessage() {}

func (x *GetDaoStateHashesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDaoStateHashesRequest.ProtoReflect.Descriptor instead.
func (*GetDaoStateHashesRequest) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{48}
}

func (x *GetDaoStateHashesRequest) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *GetDaoStateHashesRequest) GetNonce() int32 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

type GetProposalStateHashesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Height int32 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	Nonce  int32 `protobuf:"varint,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (x *GetProposalStateHashesRequest) Reset() {
	*x = GetProposalStateHashesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProposalStateHashesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProposalStateHashesRequest) ProtoMessage() {}

func (x *GetProposalStateHashesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProposalStateHashesRequest.ProtoReflect.Descriptor instead.
func (*GetProposalStateHashesRequest) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{49}
}

func (x *GetProposalStateHashesRequest) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *GetProposalStateHashesRequest) GetNonce() int32 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

type GetBlindVoteStateHashesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Height int32 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	Nonce  int32 `protobuf:"varint,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (x *GetBlindVoteStateHashesRequest) Reset() {
	*x = GetBlindVoteStateHashesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBlindVoteStateHashesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlindVoteStateHashesRequest) ProtoMessage() {}

func (x *GetBlindVoteStateHashesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlindVoteStateHashesRequest.ProtoReflect.Descriptor instead.
func (*GetBlindVoteStateHashesRequest) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{50}
}

func (x *GetBlindVoteStateHashesRequest) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *GetBlindVoteStateHashesRequest) GetNonce() int32 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

type GetDaoStateHashesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StateHashes  []*DaoStateHash `protobuf:"bytes,1,rep,name=state_hashes,json=stateHashes,proto3" json:"state_hashes,omitempty"`
	RequestNonce int32           `protobuf:"varint,2,opt,name=request_nonce,json=requestNonce,proto3" json:"request_nonce,omitempty"`
}

func (x *GetDaoStateHashesResponse) Reset() {
	*x = GetDaoStateHashesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDaoStateHashesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDaoStateHashesResponse) ProtoMessage() {}

func (x *GetDaoStateHashesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDaoStateHashesResponse.ProtoReflect.Descriptor instead.
func (*GetDaoStateHashesResponse) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{51}
}

func (x *GetDaoStateHashesResponse) GetStateHashes() []*DaoStateHash {
	if x != nil {
		return x.StateHashes
	}
	return nil
}

func (x *GetDaoStateHashesResponse) GetRequestNonce() int32 {
	if x != nil {
		return x.RequestNonce
	}
	return 0
}

type GetProposalStateHashesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StateHashes  []*ProposalStateHash `protobuf:"bytes,1,rep,name=state_hashes,json=stateHashes,proto3" json:"state_hashes,omitempty"`
	RequestNonce int32                `protobuf:"varint,2,opt,name=request_nonce,json=requestNonce,proto3" json:"request_nonce,omitempty"`
}

func (x *GetProposalStateHashesResponse) Reset() {
	*x = GetProposalStateHashesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProposalStateHashesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProposalStateHashesResponse) ProtoMessage() {}

func (x *GetProposalStateHashesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProposalStateHashesResponse.ProtoReflect.Descriptor instead.
func (*GetProposalStateHashesResponse) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{52}
}

func (x *GetProposalStateHashesResponse) GetStateHashes() []*ProposalStateHash {
	if x != nil {
		return x.StateHashes
	}
	return nil
}

func (x *GetProposalStateHashesResponse) GetRequestNonce() int32 {
	if x != nil {
		return x.RequestNonce
	}
	return 0
}

type GetBlindVoteStateHashesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StateHashes  []*BlindVoteStateHash `protobuf:"bytes,1,rep,name=state_hashes,json=stateHashes,proto3" json:"state_hashes,omitempty"`
	RequestNonce int32                 `protobuf:"varint,2,opt,name=request_nonce,json=requestNonce,proto3" json:"request_nonce,omitempty"`
}

func (x *GetBlindVoteStateHashesResponse) Reset() {
	*x = GetBlindVoteStateHashesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBlindVoteStateHashesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlindVoteStateHashesResponse) ProtoMessage() {}

func (x *GetBlindVoteStateHashesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlindVoteStateHashesResponse.ProtoReflect.Descriptor instead.
func (*GetBlindVoteStateHashesResponse) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{53}
}

func (x *GetBlindVoteStateHashesResponse) GetStateHashes() []*BlindVoteStateHash {
	if x != nil {
		return x.StateHashes
	}
	return nil
}

func (x *GetBlindVoteStateHashesResponse) GetRequestNonce() int32 {
	if x != nil {
		return x.RequestNonce
	}
	return 0
}

type NodeAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HostName string `protobuf:"bytes,1,opt,name=host_name,json=hostName,proto3" json:"host_name,omitempty"`
	Port     int32  `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *NodeAddress) Reset() {
	*x = NodeAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeAddress) ProtoMessage() {}

func (x *NodeAddress) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeAddress.ProtoReflect.Descriptor instead.
func (*NodeAddress) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{54}
}

func (x *NodeAddress) GetHostName() string {
	if x != nil {
		return x.HostName
	}
	return ""
}

func (x *NodeAddress) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

type Peer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeAddress           *NodeAddress `protobuf:"bytes,1,opt,name=node_address,json=nodeAddress,proto3" json:"node_address,omitempty"`
	Date                  int64        `protobuf:"varint,2,opt,name=date,proto3" json:"date,omitempty"`
	SupportedCapabilities []int32      `protobuf:"varint,3,rep,packed,name=supported_capabilities,json=supportedCapabilities,proto3" json:"supported_capabilities,omitempty"`
}

func (x *Peer) Reset() {
	*x = Peer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Peer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Peer) ProtoMessage() {}

func (x *Peer) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Peer.ProtoReflect.Descriptor instead.
func (*Peer) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{55}
}

func (x *Peer) GetNodeAddress() *NodeAddress {
	if x != nil {
		return x.NodeAddress
	}
	return nil
}

func (x *Peer) GetDate() int64 {
	if x != nil {
		return x.Date
	}
	return 0
}

func (x *Peer) GetSupportedCapabilities() []int32 {
	if x != nil {
		return x.SupportedCapabilities
	}
	return nil
}

type PubKeyRing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SignaturePubKeyBytes  []byte `protobuf:"bytes,1,opt,name=signature_pub_key_bytes,json=signaturePubKeyBytes,proto3" json:"signature_pub_key_bytes,omitempty"`
	EncryptionPubKeyBytes []byte `protobuf:"bytes,2,opt,name=encryption_pub_key_bytes,json=encryptionPubKeyBytes,proto3" json:"encryption_pub_key_bytes,omitempty"`
}

func (x *PubKeyRing) Reset() {
	*x = PubKeyRing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PubKeyRing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PubKeyRing) ProtoMessage() {}

func (x *PubKeyRing) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PubKeyRing.ProtoReflect.Descriptor instead.
func (*PubKeyRing) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{56}
}

func (x *PubKeyRing) GetSignaturePubKeyBytes() []byte {
	if x != nil {
		return x.SignaturePubKeyBytes
	}
	return nil
}

func (x *PubKeyRing) GetEncryptionPubKeyBytes() []byte {
	if x != nil {
		return x.EncryptionPubKeyBytes
	}
	return nil
}

type SealedAndSigned struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EncryptedSecretKey       []byte `protobuf:"bytes,1,opt,name=encrypted_secret_key,json=encryptedSecretKey,proto3" json:"encrypted_secret_key,omitempty"`
	EncryptedPayloadWithHmac []byte `protobuf:"bytes,2,opt,name=encrypted_payload_with_hmac,json=encryptedPayloadWithHmac,proto3" json:"encrypted_payload_with_hmac,omitempty"`
	Signature                []byte `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
	SigPublicKeyBytes        []byte `protobuf:"bytes,4,opt,name=sig_public_key_bytes,json=sigPublicKeyBytes,proto3" json:"sig_public_key_bytes,omitempty"`
}

func (x *SealedAndSigned) Reset() {
	*x = SealedAndSigned{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SealedAndSigned) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SealedAndSigned) ProtoMessage() {}

func (x *SealedAndSigned) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SealedAndSigned.ProtoReflect.Descriptor instead.
func (*SealedAndSigned) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{57}
}

func (x *SealedAndSigned) GetEncryptedSecretKey() []byte {
	if x != nil {
		return x.EncryptedSecretKey
	}
	return nil
}

func (x *SealedAndSigned) GetEncryptedPayloadWithHmac() []byte {
	if x != nil {
		return x.EncryptedPayloadWithHmac
	}
	return nil
}

func (x *SealedAndSigned) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *SealedAndSigned) GetSigPublicKeyBytes() []byte {
	if x != nil {
		return x.SigPublicKeyBytes
	}
	return nil
}

type StoragePayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Message:
	//	*StoragePayload_Alert
	//	*StoragePayload_Arbitrator
	//	*StoragePayload_Mediator
	//	*StoragePayload_Filter
	//	*StoragePayload_MailboxStoragePayload
	//	*StoragePayload_OfferPayload
	//	*StoragePayload_TempProposalPayload
	//	*StoragePayload_RefundAgent
	Message isStoragePayload_Message `protobuf_oneof:"message"`
}

func (x *StoragePayload) Reset() {
	*x = StoragePayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoragePayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoragePayload) ProtoMessage() {}

func (x *StoragePayload) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoragePayload.ProtoReflect.Descriptor instead.
func (*StoragePayload) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{58}
}

func (m *StoragePayload) GetMessage() isStoragePayload_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (x *StoragePayload) GetAlert() *Alert {
	if x, ok := x.GetMessage().(*StoragePayload_Alert); ok {
		return x.Alert
	}
	return nil
}

func (x *StoragePayload) GetArbitrator() *Arbitrator {
	if x, ok := x.GetMessage().(*StoragePayload_Arbitrator); ok {
		return x.Arbitrator
	}
	return nil
}

func (x *StoragePayload) GetMediator() *Mediator {
	if x, ok := x.GetMessage().(*StoragePayload_Mediator); ok {
		return x.Mediator
	}
	return nil
}

func (x *StoragePayload) GetFilter() *Filter {
	if x, ok := x.GetMessage().(*StoragePayload_Filter); ok {
		return x.Filter
	}
	return nil
}

func (x *StoragePayload) GetMailboxStoragePayload() *MailboxStoragePayload {
	if x, ok := x.GetMessage().(*StoragePayload_MailboxStoragePayload); ok {
		return x.MailboxStoragePayload
	}
	return nil
}

func (x *StoragePayload) GetOfferPayload() *OfferPayload {
	if x, ok := x.GetMessage().(*StoragePayload_OfferPayload); ok {
		return x.OfferPayload
	}
	return nil
}

func (x *StoragePayload) GetTempProposalPayload() *TempProposalPayload {
	if x, ok := x.GetMessage().(*StoragePayload_TempProposalPayload); ok {
		return x.TempProposalPayload
	}
	return nil
}

func (x *StoragePayload) GetRefundAgent() *RefundAgent {
	if x, ok := x.GetMessage().(*StoragePayload_RefundAgent); ok {
		return x.RefundAgent
	}
	return nil
}

type isStoragePayload_Message interface {
	isStoragePayload_Message()
}

type StoragePayload_Alert struct {
	Alert *Alert `protobuf:"bytes,1,opt,name=alert,proto3,oneof"`
}

type StoragePayload_Arbitrator struct {
	Arbitrator *Arbitrator `protobuf:"bytes,2,opt,name=arbitrator,proto3,oneof"`
}

type StoragePayload_Mediator struct {
	Mediator *Mediator `protobuf:"bytes,3,opt,name=mediator,proto3,oneof"`
}

type StoragePayload_Filter struct {
	Filter *Filter `protobuf:"bytes,4,opt,name=filter,proto3,oneof"`
}

type StoragePayload_MailboxStoragePayload struct {
	MailboxStoragePayload *MailboxStoragePayload `protobuf:"bytes,6,opt,name=mailbox_storage_payload,json=mailboxStoragePayload,proto3,oneof"`
}

type StoragePayload_OfferPayload struct {
	OfferPayload *OfferPayload `protobuf:"bytes,7,opt,name=offer_payload,json=offerPayload,proto3,oneof"`
}

type StoragePayload_TempProposalPayload struct {
	TempProposalPayload *TempProposalPayload `protobuf:"bytes,8,opt,name=temp_proposal_payload,json=tempProposalPayload,proto3,oneof"`
}

type StoragePayload_RefundAgent struct {
	RefundAgent *RefundAgent `protobuf:"bytes,9,opt,name=refund_agent,json=refundAgent,proto3,oneof"`
}

func (*StoragePayload_Alert) isStoragePayload_Message() {}

func (*StoragePayload_Arbitrator) isStoragePayload_Message() {}

func (*StoragePayload_Mediator) isStoragePayload_Message() {}

func (*StoragePayload_Filter) isStoragePayload_Message() {}

func (*StoragePayload_MailboxStoragePayload) isStoragePayload_Message() {}

func (*StoragePayload_OfferPayload) isStoragePayload_Message() {}

func (*StoragePayload_TempProposalPayload) isStoragePayload_Message() {}

func (*StoragePayload_RefundAgent) isStoragePayload_Message() {}

type PersistableNetworkPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Message:
	//	*PersistableNetworkPayload_AccountAgeWitness
	//	*PersistableNetworkPayload_TradeStatistics2
	//	*PersistableNetworkPayload_ProposalPayload
	//	*PersistableNetworkPayload_BlindVotePayload
	//	*PersistableNetworkPayload_SignedWitness
	//	*PersistableNetworkPayload_TradeStatistics3
	Message isPersistableNetworkPayload_Message `protobuf_oneof:"message"`
}

func (x *PersistableNetworkPayload) Reset() {
	*x = PersistableNetworkPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PersistableNetworkPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PersistableNetworkPayload) ProtoMessage() {}

func (x *PersistableNetworkPayload) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PersistableNetworkPayload.ProtoReflect.Descriptor instead.
func (*PersistableNetworkPayload) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{59}
}

func (m *PersistableNetworkPayload) GetMessage() isPersistableNetworkPayload_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (x *PersistableNetworkPayload) GetAccountAgeWitness() *AccountAgeWitness {
	if x, ok := x.GetMessage().(*PersistableNetworkPayload_AccountAgeWitness); ok {
		return x.AccountAgeWitness
	}
	return nil
}

// Deprecated: Do not use.
func (x *PersistableNetworkPayload) GetTradeStatistics2() *TradeStatistics2 {
	if x, ok := x.GetMessage().(*PersistableNetworkPayload_TradeStatistics2); ok {
		return x.TradeStatistics2
	}
	return nil
}

func (x *PersistableNetworkPayload) GetProposalPayload() *ProposalPayload {
	if x, ok := x.GetMessage().(*PersistableNetworkPayload_ProposalPayload); ok {
		return x.ProposalPayload
	}
	return nil
}

func (x *PersistableNetworkPayload) GetBlindVotePayload() *BlindVotePayload {
	if x, ok := x.GetMessage().(*PersistableNetworkPayload_BlindVotePayload); ok {
		return x.BlindVotePayload
	}
	return nil
}

func (x *PersistableNetworkPayload) GetSignedWitness() *SignedWitness {
	if x, ok := x.GetMessage().(*PersistableNetworkPayload_SignedWitness); ok {
		return x.SignedWitness
	}
	return nil
}

func (x *PersistableNetworkPayload) GetTradeStatistics3() *TradeStatistics3 {
	if x, ok := x.GetMessage().(*PersistableNetworkPayload_TradeStatistics3); ok {
		return x.TradeStatistics3
	}
	return nil
}

type isPersistableNetworkPayload_Message interface {
	isPersistableNetworkPayload_Message()
}

type PersistableNetworkPayload_AccountAgeWitness struct {
	AccountAgeWitness *AccountAgeWitness `protobuf:"bytes,1,opt,name=account_age_witness,json=accountAgeWitness,proto3,oneof"`
}

type PersistableNetworkPayload_TradeStatistics2 struct {
	// Deprecated: Do not use.
	TradeStatistics2 *TradeStatistics2 `protobuf:"bytes,2,opt,name=trade_statistics2,json=tradeStatistics2,proto3,oneof"`
}

type PersistableNetworkPayload_ProposalPayload struct {
	ProposalPayload *ProposalPayload `protobuf:"bytes,3,opt,name=proposal_payload,json=proposalPayload,proto3,oneof"`
}

type PersistableNetworkPayload_BlindVotePayload struct {
	BlindVotePayload *BlindVotePayload `protobuf:"bytes,4,opt,name=blind_vote_payload,json=blindVotePayload,proto3,oneof"`
}

type PersistableNetworkPayload_SignedWitness struct {
	SignedWitness *SignedWitness `protobuf:"bytes,5,opt,name=signed_witness,json=signedWitness,proto3,oneof"`
}

type PersistableNetworkPayload_TradeStatistics3 struct {
	TradeStatistics3 *TradeStatistics3 `protobuf:"bytes,6,opt,name=trade_statistics3,json=tradeStatistics3,proto3,oneof"`
}

func (*PersistableNetworkPayload_AccountAgeWitness) isPersistableNetworkPayload_Message() {}

func (*PersistableNetworkPayload_TradeStatistics2) isPersistableNetworkPayload_Message() {}

func (*PersistableNetworkPayload_ProposalPayload) isPersistableNetworkPayload_Message() {}

func (*PersistableNetworkPayload_BlindVotePayload) isPersistableNetworkPayload_Message() {}

func (*PersistableNetworkPayload_SignedWitness) isPersistableNetworkPayload_Message() {}

func (*PersistableNetworkPayload_TradeStatistics3) isPersistableNetworkPayload_Message() {}

type ProtectedStorageEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StoragePayload    *StoragePayload `protobuf:"bytes,1,opt,name=storagePayload,proto3" json:"storagePayload,omitempty"`
	OwnerPubKeyBytes  []byte          `protobuf:"bytes,2,opt,name=owner_pub_key_bytes,json=ownerPubKeyBytes,proto3" json:"owner_pub_key_bytes,omitempty"`
	SequenceNumber    int32           `protobuf:"varint,3,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
	Signature         []byte          `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`
	CreationTimeStamp int64           `protobuf:"varint,5,opt,name=creation_time_stamp,json=creationTimeStamp,proto3" json:"creation_time_stamp,omitempty"`
}

func (x *ProtectedStorageEntry) Reset() {
	*x = ProtectedStorageEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtectedStorageEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtectedStorageEntry) ProtoMessage() {}

func (x *ProtectedStorageEntry) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtectedStorageEntry.ProtoReflect.Descriptor instead.
func (*ProtectedStorageEntry) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{60}
}

func (x *ProtectedStorageEntry) GetStoragePayload() *StoragePayload {
	if x != nil {
		return x.StoragePayload
	}
	return nil
}

func (x *ProtectedStorageEntry) GetOwnerPubKeyBytes() []byte {
	if x != nil {
		return x.OwnerPubKeyBytes
	}
	return nil
}

func (x *ProtectedStorageEntry) GetSequenceNumber() int32 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

func (x *ProtectedStorageEntry) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *ProtectedStorageEntry) GetCreationTimeStamp() int64 {
	if x != nil {
		return x.CreationTimeStamp
	}
	return 0
}

type StorageEntryWrapper struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Message:
	//	*StorageEntryWrapper_ProtectedStorageEntry
	//	*StorageEntryWrapper_ProtectedMailboxStorageEntry
	Message isStorageEntryWrapper_Message `protobuf_oneof:"message"`
}

func (x *StorageEntryWrapper) Reset() {
	*x = StorageEntryWrapper{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorageEntryWrapper) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorageEntryWrapper) ProtoMessage() {}

func (x *StorageEntryWrapper) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorageEntryWrapper.ProtoReflect.Descriptor instead.
func (*StorageEntryWrapper) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{61}
}

func (m *StorageEntryWrapper) GetMessage() isStorageEntryWrapper_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (x *StorageEntryWrapper) GetProtectedStorageEntry() *ProtectedStorageEntry {
	if x, ok := x.GetMessage().(*StorageEntryWrapper_ProtectedStorageEntry); ok {
		return x.ProtectedStorageEntry
	}
	return nil
}

func (x *StorageEntryWrapper) GetProtectedMailboxStorageEntry() *ProtectedMailboxStorageEntry {
	if x, ok := x.GetMessage().(*StorageEntryWrapper_ProtectedMailboxStorageEntry); ok {
		return x.ProtectedMailboxStorageEntry
	}
	return nil
}

type isStorageEntryWrapper_Message interface {
	isStorageEntryWrapper_Message()
}

type StorageEntryWrapper_ProtectedStorageEntry struct {
	ProtectedStorageEntry *ProtectedStorageEntry `protobuf:"bytes,1,opt,name=protected_storage_entry,json=protectedStorageEntry,proto3,oneof"`
}

type StorageEntryWrapper_ProtectedMailboxStorageEntry struct {
	ProtectedMailboxStorageEntry *ProtectedMailboxStorageEntry `protobuf:"bytes,2,opt,name=protected_mailbox_storage_entry,json=protectedMailboxStorageEntry,proto3,oneof"`
}

func (*StorageEntryWrapper_ProtectedStorageEntry) isStorageEntryWrapper_Message() {}

func (*StorageEntryWrapper_ProtectedMailboxStorageEntry) isStorageEntryWrapper_Message() {}

type ProtectedMailboxStorageEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entry                *ProtectedStorageEntry `protobuf:"bytes,1,opt,name=entry,proto3" json:"entry,omitempty"`
	ReceiversPubKeyBytes []byte                 `protobuf:"bytes,2,opt,name=receivers_pub_key_bytes,json=receiversPubKeyBytes,proto3" json:"receivers_pub_key_bytes,omitempty"`
}

func (x *ProtectedMailboxStorageEntry) Reset() {
	*x = ProtectedMailboxStorageEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtectedMailboxStorageEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtectedMailboxStorageEntry) ProtoMessage() {}

func (x *ProtectedMailboxStorageEntry) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtectedMailboxStorageEntry.ProtoReflect.Descriptor instead.
func (*ProtectedMailboxStorageEntry) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{62}
}

func (x *ProtectedMailboxStorageEntry) GetEntry() *ProtectedStorageEntry {
	if x != nil {
		return x.Entry
	}
	return nil
}

func (x *ProtectedMailboxStorageEntry) GetReceiversPubKeyBytes() []byte {
	if x != nil {
		return x.ReceiversPubKeyBytes
	}
	return nil
}

type DataAndSeqNrPair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Payload        *StoragePayload `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	SequenceNumber int32           `protobuf:"varint,2,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
}

func (x *DataAndSeqNrPair) Reset() {
	*x = DataAndSeqNrPair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataAndSeqNrPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataAndSeqNrPair) ProtoMessage() {}

func (x *DataAndSeqNrPair) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataAndSeqNrPair.ProtoReflect.Descriptor instead.
func (*DataAndSeqNrPair) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{63}
}

func (x *DataAndSeqNrPair) GetPayload() *StoragePayload {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *DataAndSeqNrPair) GetSequenceNumber() int32 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

type MailboxMessageList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MailboxItem []*MailboxItem `protobuf:"bytes,1,rep,name=mailbox_item,json=mailboxItem,proto3" json:"mailbox_item,omitempty"`
}

func (x *MailboxMessageList) Reset() {
	*x = MailboxMessageList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MailboxMessageList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MailboxMessageList) ProtoMessage() {}

func (x *MailboxMessageList) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MailboxMessageList.ProtoReflect.Descriptor instead.
func (*MailboxMessageList) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{64}
}

func (x *MailboxMessageList) GetMailboxItem() []*MailboxItem {
	if x != nil {
		return x.MailboxItem
	}
	return nil
}

type RemovedPayloadsMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DateByHashes map[string]uint64 `protobuf:"bytes,1,rep,name=date_by_hashes,json=dateByHashes,proto3" json:"date_by_hashes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *RemovedPayloadsMap) Reset() {
	*x = RemovedPayloadsMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemovedPayloadsMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemovedPayloadsMap) ProtoMessage() {}

func (x *RemovedPayloadsMap) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemovedPayloadsMap.ProtoReflect.Descriptor instead.
func (*RemovedPayloadsMap) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{65}
}

func (x *RemovedPayloadsMap) GetDateByHashes() map[string]uint64 {
	if x != nil {
		return x.DateByHashes
	}
	return nil
}

type IgnoredMailboxMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data map[string]uint64 `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *IgnoredMailboxMap) Reset() {
	*x = IgnoredMailboxMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IgnoredMailboxMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IgnoredMailboxMap) ProtoMessage() {}

func (x *IgnoredMailboxMap) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IgnoredMailboxMap.ProtoReflect.Descriptor instead.
func (*IgnoredMailboxMap) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{66}
}

func (x *IgnoredMailboxMap) GetData() map[string]uint64 {
	if x != nil {
		return x.Data
	}
	return nil
}

type MailboxItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProtectedMailboxStorageEntry *ProtectedMailboxStorageEntry `protobuf:"bytes,1,opt,name=protected_mailbox_storage_entry,json=protectedMailboxStorageEntry,proto3" json:"protected_mailbox_storage_entry,omitempty"`
	DecryptedMessageWithPubKey   *DecryptedMessageWithPubKey   `protobuf:"bytes,2,opt,name=decrypted_message_with_pub_key,json=decryptedMessageWithPubKey,proto3" json:"decrypted_message_with_pub_key,omitempty"`
}

func (x *MailboxItem) Reset() {
	*x = MailboxItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MailboxItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MailboxItem) ProtoMessage() {}

func (x *MailboxItem) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MailboxItem.ProtoReflect.Descriptor instead.
func (*MailboxItem) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{67}
}

func (x *MailboxItem) GetProtectedMailboxStorageEntry() *ProtectedMailboxStorageEntry {
	if x != nil {
		return x.ProtectedMailboxStorageEntry
	}
	return nil
}

func (x *MailboxItem) GetDecryptedMessageWithPubKey() *DecryptedMessageWithPubKey {
	if x != nil {
		return x.DecryptedMessageWithPubKey
	}
	return nil
}

type DecryptedMessageWithPubKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NetworkEnvelope      *NetworkEnvelope `protobuf:"bytes,1,opt,name=network_envelope,json=networkEnvelope,proto3" json:"network_envelope,omitempty"`
	SignaturePubKeyBytes []byte           `protobuf:"bytes,2,opt,name=signature_pub_key_bytes,json=signaturePubKeyBytes,proto3" json:"signature_pub_key_bytes,omitempty"`
}

func (x *DecryptedMessageWithPubKey) Reset() {
	*x = DecryptedMessageWithPubKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecryptedMessageWithPubKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecryptedMessageWithPubKey) ProtoMessage() {}

func (x *DecryptedMessageWithPubKey) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecryptedMessageWithPubKey.ProtoReflect.Descriptor instead.
func (*DecryptedMessageWithPubKey) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{68}
}

func (x *DecryptedMessageWithPubKey) GetNetworkEnvelope() *NetworkEnvelope {
	if x != nil {
		return x.NetworkEnvelope
	}
	return nil
}

func (x *DecryptedMessageWithPubKey) GetSignaturePubKeyBytes() []byte {
	if x != nil {
		return x.SignaturePubKeyBytes
	}
	return nil
}

type PrivateNotificationPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message           string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	SignatureAsBase64 string `protobuf:"bytes,2,opt,name=signature_as_base64,json=signatureAsBase64,proto3" json:"signature_as_base64,omitempty"`
	SigPublicKeyBytes []byte `protobuf:"bytes,3,opt,name=sig_public_key_bytes,json=sigPublicKeyBytes,proto3" json:"sig_public_key_bytes,omitempty"`
}

func (x *PrivateNotificationPayload) Reset() {
	*x = PrivateNotificationPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrivateNotificationPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrivateNotificationPayload) ProtoMessage() {}

func (x *PrivateNotificationPayload) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrivateNotificationPayload.ProtoReflect.Descriptor instead.
func (*PrivateNotificationPayload) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{69}
}

func (x *PrivateNotificationPayload) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *PrivateNotificationPayload) GetSignatureAsBase64() string {
	if x != nil {
		return x.SignatureAsBase64
	}
	return ""
}

func (x *PrivateNotificationPayload) GetSigPublicKeyBytes() []byte {
	if x != nil {
		return x.SigPublicKeyBytes
	}
	return nil
}

type PaymentAccountFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PaymentMethodId string `protobuf:"bytes,1,opt,name=payment_method_id,json=paymentMethodId,proto3" json:"payment_method_id,omitempty"`
	GetMethodName   string `protobuf:"bytes,2,opt,name=get_method_name,json=getMethodName,proto3" json:"get_method_name,omitempty"`
	Value           string `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *PaymentAccountFilter) Reset() {
	*x = PaymentAccountFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentAccountFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentAccountFilter) ProtoMessage() {}

func (x *PaymentAccountFilter) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentAccountFilter.ProtoReflect.Descriptor instead.
func (*PaymentAccountFilter) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{70}
}

func (x *PaymentAccountFilter) GetPaymentMethodId() string {
	if x != nil {
		return x.PaymentMethodId
	}
	return ""
}

func (x *PaymentAccountFilter) GetGetMethodName() string {
	if x != nil {
		return x.GetMethodName
	}
	return ""
}

func (x *PaymentAccountFilter) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type Alert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message           string            `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Version           string            `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	IsUpdateInfo      bool              `protobuf:"varint,3,opt,name=is_update_info,json=isUpdateInfo,proto3" json:"is_update_info,omitempty"`
	SignatureAsBase64 string            `protobuf:"bytes,4,opt,name=signature_as_base64,json=signatureAsBase64,proto3" json:"signature_as_base64,omitempty"`
	OwnerPubKeyBytes  []byte            `protobuf:"bytes,5,opt,name=owner_pub_key_bytes,json=ownerPubKeyBytes,proto3" json:"owner_pub_key_bytes,omitempty"`
	ExtraData         map[string]string `protobuf:"bytes,6,rep,name=extra_data,json=extraData,proto3" json:"extra_data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	IsPreReleaseInfo  bool              `protobuf:"varint,7,opt,name=is_pre_release_info,json=isPreReleaseInfo,proto3" json:"is_pre_release_info,omitempty"`
}

func (x *Alert) Reset() {
	*x = Alert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Alert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Alert) ProtoMessage() {}

func (x *Alert) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Alert.ProtoReflect.Descriptor instead.
func (*Alert) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{71}
}

func (x *Alert) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Alert) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Alert) GetIsUpdateInfo() bool {
	if x != nil {
		return x.IsUpdateInfo
	}
	return false
}

func (x *Alert) GetSignatureAsBase64() string {
	if x != nil {
		return x.SignatureAsBase64
	}
	return ""
}

func (x *Alert) GetOwnerPubKeyBytes() []byte {
	if x != nil {
		return x.OwnerPubKeyBytes
	}
	return nil
}

func (x *Alert) GetExtraData() map[string]string {
	if x != nil {
		return x.ExtraData
	}
	return nil
}

func (x *Alert) GetIsPreReleaseInfo() bool {
	if x != nil {
		return x.IsPreReleaseInfo
	}
	return false
}

type Arbitrator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeAddress           *NodeAddress      `protobuf:"bytes,1,opt,name=node_address,json=nodeAddress,proto3" json:"node_address,omitempty"`
	LanguageCodes         []string          `protobuf:"bytes,2,rep,name=language_codes,json=languageCodes,proto3" json:"language_codes,omitempty"`
	RegistrationDate      int64             `protobuf:"varint,3,opt,name=registration_date,json=registrationDate,proto3" json:"registration_date,omitempty"`
	RegistrationSignature string            `protobuf:"bytes,4,opt,name=registration_signature,json=registrationSignature,proto3" json:"registration_signature,omitempty"`
	RegistrationPubKey    []byte            `protobuf:"bytes,5,opt,name=registration_pub_key,json=registrationPubKey,proto3" json:"registration_pub_key,omitempty"`
	PubKeyRing            *PubKeyRing       `protobuf:"bytes,6,opt,name=pub_key_ring,json=pubKeyRing,proto3" json:"pub_key_ring,omitempty"`
	BtcPubKey             []byte            `protobuf:"bytes,7,opt,name=btc_pub_key,json=btcPubKey,proto3" json:"btc_pub_key,omitempty"`
	BtcAddress            string            `protobuf:"bytes,8,opt,name=btc_address,json=btcAddress,proto3" json:"btc_address,omitempty"`
	EmailAddress          string            `protobuf:"bytes,9,opt,name=email_address,json=emailAddress,proto3" json:"email_address,omitempty"`
	Info                  string            `protobuf:"bytes,10,opt,name=info,proto3" json:"info,omitempty"`
	ExtraData             map[string]string `protobuf:"bytes,11,rep,name=extra_data,json=extraData,proto3" json:"extra_data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Arbitrator) Reset() {
	*x = Arbitrator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Arbitrator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Arbitrator) ProtoMessage() {}

func (x *Arbitrator) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Arbitrator.ProtoReflect.Descriptor instead.
func (*Arbitrator) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{72}
}

func (x *Arbitrator) GetNodeAddress() *NodeAddress {
	if x != nil {
		return x.NodeAddress
	}
	return nil
}

func (x *Arbitrator) GetLanguageCodes() []string {
	if x != nil {
		return x.LanguageCodes
	}
	return nil
}

func (x *Arbitrator) GetRegistrationDate() int64 {
	if x != nil {
		return x.RegistrationDate
	}
	return 0
}

func (x *Arbitrator) GetRegistrationSignature() string {
	if x != nil {
		return x.RegistrationSignature
	}
	return ""
}

func (x *Arbitrator) GetRegistrationPubKey() []byte {
	if x != nil {
		return x.RegistrationPubKey
	}
	return nil
}

func (x *Arbitrator) GetPubKeyRing() *PubKeyRing {
	if x != nil {
		return x.PubKeyRing
	}
	return nil
}

func (x *Arbitrator) GetBtcPubKey() []byte {
	if x != nil {
		return x.BtcPubKey
	}
	return nil
}

func (x *Arbitrator) GetBtcAddress() string {
	if x != nil {
		return x.BtcAddress
	}
	return ""
}

func (x *Arbitrator) GetEmailAddress() string {
	if x != nil {
		return x.EmailAddress
	}
	return ""
}

func (x *Arbitrator) GetInfo() string {
	if x != nil {
		return x.Info
	}
	return ""
}

func (x *Arbitrator) GetExtraData() map[string]string {
	if x != nil {
		return x.ExtraData
	}
	return nil
}

type Mediator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeAddress           *NodeAddress      `protobuf:"bytes,1,opt,name=node_address,json=nodeAddress,proto3" json:"node_address,omitempty"`
	LanguageCodes         []string          `protobuf:"bytes,2,rep,name=language_codes,json=languageCodes,proto3" json:"language_codes,omitempty"`
	RegistrationDate      int64             `protobuf:"varint,3,opt,name=registration_date,json=registrationDate,proto3" json:"registration_date,omitempty"`
	RegistrationSignature string            `protobuf:"bytes,4,opt,name=registration_signature,json=registrationSignature,proto3" json:"registration_signature,omitempty"`
	RegistrationPubKey    []byte            `protobuf:"bytes,5,opt,name=registration_pub_key,json=registrationPubKey,proto3" json:"registration_pub_key,omitempty"`
	PubKeyRing            *PubKeyRing       `protobuf:"bytes,6,opt,name=pub_key_ring,json=pubKeyRing,proto3" json:"pub_key_ring,omitempty"`
	EmailAddress          string            `protobuf:"bytes,7,opt,name=email_address,json=emailAddress,proto3" json:"email_address,omitempty"`
	Info                  string            `protobuf:"bytes,8,opt,name=info,proto3" json:"info,omitempty"`
	ExtraData             map[string]string `protobuf:"bytes,9,rep,name=extra_data,json=extraData,proto3" json:"extra_data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Mediator) Reset() {
	*x = Mediator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Mediator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Mediator) ProtoMessage() {}

func (x *Mediator) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Mediator.ProtoReflect.Descriptor instead.
func (*Mediator) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{73}
}

func (x *Mediator) GetNodeAddress() *NodeAddress {
	if x != nil {
		return x.NodeAddress
	}
	return nil
}

func (x *Mediator) GetLanguageCodes() []string {
	if x != nil {
		return x.LanguageCodes
	}
	return nil
}

func (x *Mediator) GetRegistrationDate() int64 {
	if x != nil {
		return x.RegistrationDate
	}
	return 0
}

func (x *Mediator) GetRegistrationSignature() string {
	if x != nil {
		return x.RegistrationSignature
	}
	return ""
}

func (x *Mediator) GetRegistrationPubKey() []byte {
	if x != nil {
		return x.RegistrationPubKey
	}
	return nil
}

func (x *Mediator) GetPubKeyRing() *PubKeyRing {
	if x != nil {
		return x.PubKeyRing
	}
	return nil
}

func (x *Mediator) GetEmailAddress() string {
	if x != nil {
		return x.EmailAddress
	}
	return ""
}

func (x *Mediator) GetInfo() string {
	if x != nil {
		return x.Info
	}
	return ""
}

func (x *Mediator) GetExtraData() map[string]string {
	if x != nil {
		return x.ExtraData
	}
	return nil
}

type RefundAgent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeAddress           *NodeAddress      `protobuf:"bytes,1,opt,name=node_address,json=nodeAddress,proto3" json:"node_address,omitempty"`
	LanguageCodes         []string          `protobuf:"bytes,2,rep,name=language_codes,json=languageCodes,proto3" json:"language_codes,omitempty"`
	RegistrationDate      int64             `protobuf:"varint,3,opt,name=registration_date,json=registrationDate,proto3" json:"registration_date,omitempty"`
	RegistrationSignature string            `protobuf:"bytes,4,opt,name=registration_signature,json=registrationSignature,proto3" json:"registration_signature,omitempty"`
	RegistrationPubKey    []byte            `protobuf:"bytes,5,opt,name=registration_pub_key,json=registrationPubKey,proto3" json:"registration_pub_key,omitempty"`
	PubKeyRing            *PubKeyRing       `protobuf:"bytes,6,opt,name=pub_key_ring,json=pubKeyRing,proto3" json:"pub_key_ring,omitempty"`
	EmailAddress          string            `protobuf:"bytes,7,opt,name=email_address,json=emailAddress,proto3" json:"email_address,omitempty"`
	Info                  string            `protobuf:"bytes,8,opt,name=info,proto3" json:"info,omitempty"`
	ExtraData             map[string]string `protobuf:"bytes,9,rep,name=extra_data,json=extraData,proto3" json:"extra_data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *RefundAgent) Reset() {
	*x = RefundAgent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefundAgent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefundAgent) ProtoMessage() {}

func (x *RefundAgent) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefundAgent.ProtoReflect.Descriptor instead.
func (*RefundAgent) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{74}
}

func (x *RefundAgent) GetNodeAddress() *NodeAddress {
	if x != nil {
		return x.NodeAddress
	}
	return nil
}

func (x *RefundAgent) GetLanguageCodes() []string {
	if x != nil {
		return x.LanguageCodes
	}
	return nil
}

func (x *RefundAgent) GetRegistrationDate() int64 {
	if x != nil {
		return x.RegistrationDate
	}
	return 0
}

func (x *RefundAgent) GetRegistrationSignature() string {
	if x != nil {
		return x.RegistrationSignature
	}
	return ""
}

func (x *RefundAgent) GetRegistrationPubKey() []byte {
	if x != nil {
		return x.RegistrationPubKey
	}
	return nil
}

func (x *RefundAgent) GetPubKeyRing() *PubKeyRing {
	if x != nil {
		return x.PubKeyRing
	}
	return nil
}

func (x *RefundAgent) GetEmailAddress() string {
	if x != nil {
		return x.EmailAddress
	}
	return ""
}

func (x *RefundAgent) GetInfo() string {
	if x != nil {
		return x.Info
	}
	return ""
}

func (x *RefundAgent) GetExtraData() map[string]string {
	if x != nil {
		return x.ExtraData
	}
	return nil
}

type Filter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeAddressesBannedFromTrading []string                `protobuf:"bytes,1,rep,name=node_addresses_banned_from_trading,json=nodeAddressesBannedFromTrading,proto3" json:"node_addresses_banned_from_trading,omitempty"`
	BannedOfferIds                 []string                `protobuf:"bytes,2,rep,name=banned_offer_ids,json=bannedOfferIds,proto3" json:"banned_offer_ids,omitempty"`
	BannedPaymentAccounts          []*PaymentAccountFilter `protobuf:"bytes,3,rep,name=banned_payment_accounts,json=bannedPaymentAccounts,proto3" json:"banned_payment_accounts,omitempty"`
	SignatureAsBase64              string                  `protobuf:"bytes,4,opt,name=signature_as_base64,json=signatureAsBase64,proto3" json:"signature_as_base64,omitempty"`
	OwnerPubKeyBytes               []byte                  `protobuf:"bytes,5,opt,name=owner_pub_key_bytes,json=ownerPubKeyBytes,proto3" json:"owner_pub_key_bytes,omitempty"`
	ExtraData                      map[string]string       `protobuf:"bytes,6,rep,name=extra_data,json=extraData,proto3" json:"extra_data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	BannedCurrencies               []string                `protobuf:"bytes,7,rep,name=banned_currencies,json=bannedCurrencies,proto3" json:"banned_currencies,omitempty"`
	BannedPaymentMethods           []string                `protobuf:"bytes,8,rep,name=banned_payment_methods,json=bannedPaymentMethods,proto3" json:"banned_payment_methods,omitempty"`
	Arbitrators                    []string                `protobuf:"bytes,9,rep,name=arbitrators,proto3" json:"arbitrators,omitempty"`
	SeedNodes                      []string                `protobuf:"bytes,10,rep,name=seed_nodes,json=seedNodes,proto3" json:"seed_nodes,omitempty"`
	PriceRelayNodes                []string                `protobuf:"bytes,11,rep,name=price_relay_nodes,json=priceRelayNodes,proto3" json:"price_relay_nodes,omitempty"`
	PreventPublicBtcNetwork        bool                    `protobuf:"varint,12,opt,name=prevent_public_btc_network,json=preventPublicBtcNetwork,proto3" json:"prevent_public_btc_network,omitempty"`
	BtcNodes                       []string                `protobuf:"bytes,13,rep,name=btc_nodes,json=btcNodes,proto3" json:"btc_nodes,omitempty"`
	DisableDao                     bool                    `protobuf:"varint,14,opt,name=disable_dao,json=disableDao,proto3" json:"disable_dao,omitempty"`
	DisableDaoBelowVersion         string                  `protobuf:"bytes,15,opt,name=disable_dao_below_version,json=disableDaoBelowVersion,proto3" json:"disable_dao_below_version,omitempty"`
	DisableTradeBelowVersion       string                  `protobuf:"bytes,16,opt,name=disable_trade_below_version,json=disableTradeBelowVersion,proto3" json:"disable_trade_below_version,omitempty"`
	Mediators                      []string                `protobuf:"bytes,17,rep,name=mediators,proto3" json:"mediators,omitempty"`
	RefundAgents                   []string                `protobuf:"bytes,18,rep,name=refundAgents,proto3" json:"refundAgents,omitempty"`
	BannedSignerPubKeys            []string                `protobuf:"bytes,19,rep,name=bannedSignerPubKeys,proto3" json:"bannedSignerPubKeys,omitempty"`
	BtcFeeReceiverAddresses        []string                `protobuf:"bytes,20,rep,name=btc_fee_receiver_addresses,json=btcFeeReceiverAddresses,proto3" json:"btc_fee_receiver_addresses,omitempty"`
	CreationDate                   int64                   `protobuf:"varint,21,opt,name=creation_date,json=creationDate,proto3" json:"creation_date,omitempty"`
	SignerPubKeyAsHex              string                  `protobuf:"bytes,22,opt,name=signer_pub_key_as_hex,json=signerPubKeyAsHex,proto3" json:"signer_pub_key_as_hex,omitempty"`
	BannedPrivilegedDevPubKeys     []string                `protobuf:"bytes,23,rep,name=bannedPrivilegedDevPubKeys,proto3" json:"bannedPrivilegedDevPubKeys,omitempty"`
	DisableAutoConf                bool                    `protobuf:"varint,24,opt,name=disable_auto_conf,json=disableAutoConf,proto3" json:"disable_auto_conf,omitempty"`
	BannedAutoConfExplorers        []string                `protobuf:"bytes,25,rep,name=banned_auto_conf_explorers,json=bannedAutoConfExplorers,proto3" json:"banned_auto_conf_explorers,omitempty"`
	NodeAddressesBannedFromNetwork []string                `protobuf:"bytes,26,rep,name=node_addresses_banned_from_network,json=nodeAddressesBannedFromNetwork,proto3" json:"node_addresses_banned_from_network,omitempty"`
	DisableApi                     bool                    `protobuf:"varint,27,opt,name=disable_api,json=disableApi,proto3" json:"disable_api,omitempty"`
}

func (x *Filter) Reset() {
	*x = Filter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Filter) ProtoMessage() {}

func (x *Filter) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Filter.ProtoReflect.Descriptor instead.
func (*Filter) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{75}
}

func (x *Filter) GetNodeAddressesBannedFromTrading() []string {
	if x != nil {
		return x.NodeAddressesBannedFromTrading
	}
	return nil
}

func (x *Filter) GetBannedOfferIds() []string {
	if x != nil {
		return x.BannedOfferIds
	}
	return nil
}

func (x *Filter) GetBannedPaymentAccounts() []*PaymentAccountFilter {
	if x != nil {
		return x.BannedPaymentAccounts
	}
	return nil
}

func (x *Filter) GetSignatureAsBase64() string {
	if x != nil {
		return x.SignatureAsBase64
	}
	return ""
}

func (x *Filter) GetOwnerPubKeyBytes() []byte {
	if x != nil {
		return x.OwnerPubKeyBytes
	}
	return nil
}

func (x *Filter) GetExtraData() map[string]string {
	if x != nil {
		return x.ExtraData
	}
	return nil
}

func (x *Filter) GetBannedCurrencies() []string {
	if x != nil {
		return x.BannedCurrencies
	}
	return nil
}

func (x *Filter) GetBannedPaymentMethods() []string {
	if x != nil {
		return x.BannedPaymentMethods
	}
	return nil
}

func (x *Filter) GetArbitrators() []string {
	if x != nil {
		return x.Arbitrators
	}
	return nil
}

func (x *Filter) GetSeedNodes() []string {
	if x != nil {
		return x.SeedNodes
	}
	return nil
}

func (x *Filter) GetPriceRelayNodes() []string {
	if x != nil {
		return x.PriceRelayNodes
	}
	return nil
}

func (x *Filter) GetPreventPublicBtcNetwork() bool {
	if x != nil {
		return x.PreventPublicBtcNetwork
	}
	return false
}

func (x *Filter) GetBtcNodes() []string {
	if x != nil {
		return x.BtcNodes
	}
	return nil
}

func (x *Filter) GetDisableDao() bool {
	if x != nil {
		return x.DisableDao
	}
	return false
}

func (x *Filter) GetDisableDaoBelowVersion() string {
	if x != nil {
		return x.DisableDaoBelowVersion
	}
	return ""
}

func (x *Filter) GetDisableTradeBelowVersion() string {
	if x != nil {
		return x.DisableTradeBelowVersion
	}
	return ""
}

func (x *Filter) GetMediators() []string {
	if x != nil {
		return x.Mediators
	}
	return nil
}

func (x *Filter) GetRefundAgents() []string {
	if x != nil {
		return x.RefundAgents
	}
	return nil
}

func (x *Filter) GetBannedSignerPubKeys() []string {
	if x != nil {
		return x.BannedSignerPubKeys
	}
	return nil
}

func (x *Filter) GetBtcFeeReceiverAddresses() []string {
	if x != nil {
		return x.BtcFeeReceiverAddresses
	}
	return nil
}

func (x *Filter) GetCreationDate() int64 {
	if x != nil {
		return x.CreationDate
	}
	return 0
}

func (x *Filter) GetSignerPubKeyAsHex() string {
	if x != nil {
		return x.SignerPubKeyAsHex
	}
	return ""
}

func (x *Filter) GetBannedPrivilegedDevPubKeys() []string {
	if x != nil {
		return x.BannedPrivilegedDevPubKeys
	}
	return nil
}

func (x *Filter) GetDisableAutoConf() bool {
	if x != nil {
		return x.DisableAutoConf
	}
	return false
}

func (x *Filter) GetBannedAutoConfExplorers() []string {
	if x != nil {
		return x.BannedAutoConfExplorers
	}
	return nil
}

func (x *Filter) GetNodeAddressesBannedFromNetwork() []string {
	if x != nil {
		return x.NodeAddressesBannedFromNetwork
	}
	return nil
}

func (x *Filter) GetDisableApi() bool {
	if x != nil {
		return x.DisableApi
	}
	return false
}

// Deprecated
type TradeStatistics2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated: Do not use.
	BaseCurrency string `protobuf:"bytes,1,opt,name=base_currency,json=baseCurrency,proto3" json:"base_currency,omitempty"`
	// Deprecated: Do not use.
	CounterCurrency string `protobuf:"bytes,2,opt,name=counter_currency,json=counterCurrency,proto3" json:"counter_currency,omitempty"`
	// Deprecated: Do not use.
	Direction OfferPayload_Direction `protobuf:"varint,3,opt,name=direction,proto3,enum=io.bisq.protobuffer.OfferPayload_Direction" json:"direction,omitempty"`
	// Deprecated: Do not use.
	TradePrice int64 `protobuf:"varint,4,opt,name=trade_price,json=tradePrice,proto3" json:"trade_price,omitempty"`
	// Deprecated: Do not use.
	TradeAmount int64 `protobuf:"varint,5,opt,name=trade_amount,json=tradeAmount,proto3" json:"trade_amount,omitempty"`
	// Deprecated: Do not use.
	TradeDate int64 `protobuf:"varint,6,opt,name=trade_date,json=tradeDate,proto3" json:"trade_date,omitempty"`
	// Deprecated: Do not use.
	PaymentMethodId string `protobuf:"bytes,7,opt,name=payment_method_id,json=paymentMethodId,proto3" json:"payment_method_id,omitempty"`
	// Deprecated: Do not use.
	OfferDate int64 `protobuf:"varint,8,opt,name=offer_date,json=offerDate,proto3" json:"offer_date,omitempty"`
	// Deprecated: Do not use.
	OfferUseMarketBasedPrice bool `protobuf:"varint,9,opt,name=offer_use_market_based_price,json=offerUseMarketBasedPrice,proto3" json:"offer_use_market_based_price,omitempty"`
	// Deprecated: Do not use.
	OfferMarketPriceMargin float64 `protobuf:"fixed64,10,opt,name=offer_market_price_margin,json=offerMarketPriceMargin,proto3" json:"offer_market_price_margin,omitempty"`
	// Deprecated: Do not use.
	OfferAmount int64 `protobuf:"varint,11,opt,name=offer_amount,json=offerAmount,proto3" json:"offer_amount,omitempty"`
	// Deprecated: Do not use.
	OfferMinAmount int64 `protobuf:"varint,12,opt,name=offer_min_amount,json=offerMinAmount,proto3" json:"offer_min_amount,omitempty"`
	// Deprecated: Do not use.
	OfferId string `protobuf:"bytes,13,opt,name=offer_id,json=offerId,proto3" json:"offer_id,omitempty"`
	// Deprecated: Do not use.
	DepositTxId string `protobuf:"bytes,14,opt,name=deposit_tx_id,json=depositTxId,proto3" json:"deposit_tx_id,omitempty"`
	// Deprecated: Do not use.
	Hash []byte `protobuf:"bytes,15,opt,name=hash,proto3" json:"hash,omitempty"`
	// Deprecated: Do not use.
	ExtraData map[string]string `protobuf:"bytes,16,rep,name=extra_data,json=extraData,proto3" json:"extra_data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *TradeStatistics2) Reset() {
	*x = TradeStatistics2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradeStatistics2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeStatistics2) ProtoMessage() {}

func (x *TradeStatistics2) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeStatistics2.ProtoReflect.Descriptor instead.
func (*TradeStatistics2) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{76}
}

// Deprecated: Do not use.
func (x *TradeStatistics2) GetBaseCurrency() string {
	if x != nil {
		return x.BaseCurrency
	}
	return ""
}

// Deprecated: Do not use.
func (x *TradeStatistics2) GetCounterCurrency() string {
	if x != nil {
		return x.CounterCurrency
	}
	return ""
}

// Deprecated: Do not use.
func (x *TradeStatistics2) GetDirection() OfferPayload_Direction {
	if x != nil {
		return x.Direction
	}
	return OfferPayload_PB_ERROR
}

// Deprecated: Do not use.
func (x *TradeStatistics2) GetTradePrice() int64 {
	if x != nil {
		return x.TradePrice
	}
	return 0
}

// Deprecated: Do not use.
func (x *TradeStatistics2) GetTradeAmount() int64 {
	if x != nil {
		return x.TradeAmount
	}
	return 0
}

// Deprecated: Do not use.
func (x *TradeStatistics2) GetTradeDate() int64 {
	if x != nil {
		return x.TradeDate
	}
	return 0
}

// Deprecated: Do not use.
func (x *TradeStatistics2) GetPaymentMethodId() string {
	if x != nil {
		return x.PaymentMethodId
	}
	return ""
}

// Deprecated: Do not use.
func (x *TradeStatistics2) GetOfferDate() int64 {
	if x != nil {
		return x.OfferDate
	}
	return 0
}

// Deprecated: Do not use.
func (x *TradeStatistics2) GetOfferUseMarketBasedPrice() bool {
	if x != nil {
		return x.OfferUseMarketBasedPrice
	}
	return false
}

// Deprecated: Do not use.
func (x *TradeStatistics2) GetOfferMarketPriceMargin() float64 {
	if x != nil {
		return x.OfferMarketPriceMargin
	}
	return 0
}

// Deprecated: Do not use.
func (x *TradeStatistics2) GetOfferAmount() int64 {
	if x != nil {
		return x.OfferAmount
	}
	return 0
}

// Deprecated: Do not use.
func (x *TradeStatistics2) GetOfferMinAmount() int64 {
	if x != nil {
		return x.OfferMinAmount
	}
	return 0
}

// Deprecated: Do not use.
func (x *TradeStatistics2) GetOfferId() string {
	if x != nil {
		return x.OfferId
	}
	return ""
}

// Deprecated: Do not use.
func (x *TradeStatistics2) GetDepositTxId() string {
	if x != nil {
		return x.DepositTxId
	}
	return ""
}

// Deprecated: Do not use.
func (x *TradeStatistics2) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

// Deprecated: Do not use.
func (x *TradeStatistics2) GetExtraData() map[string]string {
	if x != nil {
		return x.ExtraData
	}
	return nil
}

type TradeStatistics3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Currency      string            `protobuf:"bytes,1,opt,name=currency,proto3" json:"currency,omitempty"`
	Price         int64             `protobuf:"varint,2,opt,name=price,proto3" json:"price,omitempty"`
	Amount        int64             `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
	PaymentMethod string            `protobuf:"bytes,4,opt,name=payment_method,json=paymentMethod,proto3" json:"payment_method,omitempty"`
	Date          int64             `protobuf:"varint,5,opt,name=date,proto3" json:"date,omitempty"`
	Mediator      string            `protobuf:"bytes,6,opt,name=mediator,proto3" json:"mediator,omitempty"`
	RefundAgent   string            `protobuf:"bytes,7,opt,name=refund_agent,json=refundAgent,proto3" json:"refund_agent,omitempty"`
	Hash          []byte            `protobuf:"bytes,8,opt,name=hash,proto3" json:"hash,omitempty"`
	ExtraData     map[string]string `protobuf:"bytes,9,rep,name=extra_data,json=extraData,proto3" json:"extra_data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *TradeStatistics3) Reset() {
	*x = TradeStatistics3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradeStatistics3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeStatistics3) ProtoMessage() {}

func (x *TradeStatistics3) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeStatistics3.ProtoReflect.Descriptor instead.
func (*TradeStatistics3) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{77}
}

func (x *TradeStatistics3) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *TradeStatistics3) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *TradeStatistics3) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *TradeStatistics3) GetPaymentMethod() string {
	if x != nil {
		return x.PaymentMethod
	}
	return ""
}

func (x *TradeStatistics3) GetDate() int64 {
	if x != nil {
		return x.Date
	}
	return 0
}

func (x *TradeStatistics3) GetMediator() string {
	if x != nil {
		return x.Mediator
	}
	return ""
}

func (x *TradeStatistics3) GetRefundAgent() string {
	if x != nil {
		return x.RefundAgent
	}
	return ""
}

func (x *TradeStatistics3) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *TradeStatistics3) GetExtraData() map[string]string {
	if x != nil {
		return x.ExtraData
	}
	return nil
}

type MailboxStoragePayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrefixedSealedAndSignedMessage   *PrefixedSealedAndSignedMessage `protobuf:"bytes,1,opt,name=prefixed_sealed_and_signed_message,json=prefixedSealedAndSignedMessage,proto3" json:"prefixed_sealed_and_signed_message,omitempty"`
	SenderPubKeyForAddOperationBytes []byte                          `protobuf:"bytes,2,opt,name=sender_pub_key_for_add_operation_bytes,json=senderPubKeyForAddOperationBytes,proto3" json:"sender_pub_key_for_add_operation_bytes,omitempty"`
	OwnerPubKeyBytes                 []byte                          `protobuf:"bytes,3,opt,name=owner_pub_key_bytes,json=ownerPubKeyBytes,proto3" json:"owner_pub_key_bytes,omitempty"`
	ExtraData                        map[string]string               `protobuf:"bytes,4,rep,name=extra_data,json=extraData,proto3" json:"extra_data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *MailboxStoragePayload) Reset() {
	*x = MailboxStoragePayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MailboxStoragePayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MailboxStoragePayload) ProtoMessage() {}

func (x *MailboxStoragePayload) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MailboxStoragePayload.ProtoReflect.Descriptor instead.
func (*MailboxStoragePayload) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{78}
}

func (x *MailboxStoragePayload) GetPrefixedSealedAndSignedMessage() *PrefixedSealedAndSignedMessage {
	if x != nil {
		return x.PrefixedSealedAndSignedMessage
	}
	return nil
}

func (x *MailboxStoragePayload) GetSenderPubKeyForAddOperationBytes() []byte {
	if x != nil {
		return x.SenderPubKeyForAddOperationBytes
	}
	return nil
}

func (x *MailboxStoragePayload) GetOwnerPubKeyBytes() []byte {
	if x != nil {
		return x.OwnerPubKeyBytes
	}
	return nil
}

func (x *MailboxStoragePayload) GetExtraData() map[string]string {
	if x != nil {
		return x.ExtraData
	}
	return nil
}

type OfferPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Date                int64                  `protobuf:"varint,2,opt,name=date,proto3" json:"date,omitempty"`
	OwnerNodeAddress    *NodeAddress           `protobuf:"bytes,3,opt,name=owner_node_address,json=ownerNodeAddress,proto3" json:"owner_node_address,omitempty"`
	PubKeyRing          *PubKeyRing            `protobuf:"bytes,4,opt,name=pub_key_ring,json=pubKeyRing,proto3" json:"pub_key_ring,omitempty"`
	Direction           OfferPayload_Direction `protobuf:"varint,5,opt,name=direction,proto3,enum=io.bisq.protobuffer.OfferPayload_Direction" json:"direction,omitempty"`
	Price               int64                  `protobuf:"varint,6,opt,name=price,proto3" json:"price,omitempty"`
	MarketPriceMargin   float64                `protobuf:"fixed64,7,opt,name=market_price_margin,json=marketPriceMargin,proto3" json:"market_price_margin,omitempty"`
	UseMarketBasedPrice bool                   `protobuf:"varint,8,opt,name=use_market_based_price,json=useMarketBasedPrice,proto3" json:"use_market_based_price,omitempty"`
	Amount              int64                  `protobuf:"varint,9,opt,name=amount,proto3" json:"amount,omitempty"`
	MinAmount           int64                  `protobuf:"varint,10,opt,name=min_amount,json=minAmount,proto3" json:"min_amount,omitempty"`
	BaseCurrencyCode    string                 `protobuf:"bytes,11,opt,name=base_currency_code,json=baseCurrencyCode,proto3" json:"base_currency_code,omitempty"`
	CounterCurrencyCode string                 `protobuf:"bytes,12,opt,name=counter_currency_code,json=counterCurrencyCode,proto3" json:"counter_currency_code,omitempty"`
	// Deprecated: Do not use.
	ArbitratorNodeAddresses []*NodeAddress `protobuf:"bytes,13,rep,name=arbitrator_node_addresses,json=arbitratorNodeAddresses,proto3" json:"arbitrator_node_addresses,omitempty"` // not used anymore but still required as old clients check for nonNull
	// Deprecated: Do not use.
	MediatorNodeAddresses      []*NodeAddress    `protobuf:"bytes,14,rep,name=mediator_node_addresses,json=mediatorNodeAddresses,proto3" json:"mediator_node_addresses,omitempty"` // not used anymore but still required as old clients check for nonNull
	PaymentMethodId            string            `protobuf:"bytes,15,opt,name=payment_method_id,json=paymentMethodId,proto3" json:"payment_method_id,omitempty"`
	MakerPaymentAccountId      string            `protobuf:"bytes,16,opt,name=maker_payment_account_id,json=makerPaymentAccountId,proto3" json:"maker_payment_account_id,omitempty"`
	OfferFeePaymentTxId        string            `protobuf:"bytes,17,opt,name=offer_fee_payment_tx_id,json=offerFeePaymentTxId,proto3" json:"offer_fee_payment_tx_id,omitempty"`
	CountryCode                string            `protobuf:"bytes,18,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"`
	AcceptedCountryCodes       []string          `protobuf:"bytes,19,rep,name=accepted_country_codes,json=acceptedCountryCodes,proto3" json:"accepted_country_codes,omitempty"`
	BankId                     string            `protobuf:"bytes,20,opt,name=bank_id,json=bankId,proto3" json:"bank_id,omitempty"`
	AcceptedBankIds            []string          `protobuf:"bytes,21,rep,name=accepted_bank_ids,json=acceptedBankIds,proto3" json:"accepted_bank_ids,omitempty"`
	VersionNr                  string            `protobuf:"bytes,22,opt,name=version_nr,json=versionNr,proto3" json:"version_nr,omitempty"`
	BlockHeightAtOfferCreation int64             `protobuf:"varint,23,opt,name=block_height_at_offer_creation,json=blockHeightAtOfferCreation,proto3" json:"block_height_at_offer_creation,omitempty"`
	TxFee                      int64             `protobuf:"varint,24,opt,name=tx_fee,json=txFee,proto3" json:"tx_fee,omitempty"`
	MakerFee                   int64             `protobuf:"varint,25,opt,name=maker_fee,json=makerFee,proto3" json:"maker_fee,omitempty"`
	IsCurrencyForMakerFeeBtc   bool              `protobuf:"varint,26,opt,name=is_currency_for_maker_fee_btc,json=isCurrencyForMakerFeeBtc,proto3" json:"is_currency_for_maker_fee_btc,omitempty"`
	BuyerSecurityDeposit       int64             `protobuf:"varint,27,opt,name=buyer_security_deposit,json=buyerSecurityDeposit,proto3" json:"buyer_security_deposit,omitempty"`
	SellerSecurityDeposit      int64             `protobuf:"varint,28,opt,name=seller_security_deposit,json=sellerSecurityDeposit,proto3" json:"seller_security_deposit,omitempty"`
	MaxTradeLimit              int64             `protobuf:"varint,29,opt,name=max_trade_limit,json=maxTradeLimit,proto3" json:"max_trade_limit,omitempty"`
	MaxTradePeriod             int64             `protobuf:"varint,30,opt,name=max_trade_period,json=maxTradePeriod,proto3" json:"max_trade_period,omitempty"`
	UseAutoClose               bool              `protobuf:"varint,31,opt,name=use_auto_close,json=useAutoClose,proto3" json:"use_auto_close,omitempty"`
	UseReOpenAfterAutoClose    bool              `protobuf:"varint,32,opt,name=use_re_open_after_auto_close,json=useReOpenAfterAutoClose,proto3" json:"use_re_open_after_auto_close,omitempty"`
	LowerClosePrice            int64             `protobuf:"varint,33,opt,name=lower_close_price,json=lowerClosePrice,proto3" json:"lower_close_price,omitempty"`
	UpperClosePrice            int64             `protobuf:"varint,34,opt,name=upper_close_price,json=upperClosePrice,proto3" json:"upper_close_price,omitempty"`
	IsPrivateOffer             bool              `protobuf:"varint,35,opt,name=is_private_offer,json=isPrivateOffer,proto3" json:"is_private_offer,omitempty"`
	HashOfChallenge            string            `protobuf:"bytes,36,opt,name=hash_of_challenge,json=hashOfChallenge,proto3" json:"hash_of_challenge,omitempty"`
	ExtraData                  map[string]string `protobuf:"bytes,37,rep,name=extra_data,json=extraData,proto3" json:"extra_data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ProtocolVersion            int32             `protobuf:"varint,38,opt,name=protocol_version,json=protocolVersion,proto3" json:"protocol_version,omitempty"`
}

func (x *OfferPayload) Reset() {
	*x = OfferPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OfferPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OfferPayload) ProtoMessage() {}

func (x *OfferPayload) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OfferPayload.ProtoReflect.Descriptor instead.
func (*OfferPayload) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{79}
}

func (x *OfferPayload) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *OfferPayload) GetDate() int64 {
	if x != nil {
		return x.Date
	}
	return 0
}

func (x *OfferPayload) GetOwnerNodeAddress() *NodeAddress {
	if x != nil {
		return x.OwnerNodeAddress
	}
	return nil
}

func (x *OfferPayload) GetPubKeyRing() *PubKeyRing {
	if x != nil {
		return x.PubKeyRing
	}
	return nil
}

func (x *OfferPayload) GetDirection() OfferPayload_Direction {
	if x != nil {
		return x.Direction
	}
	return OfferPayload_PB_ERROR
}

func (x *OfferPayload) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *OfferPayload) GetMarketPriceMargin() float64 {
	if x != nil {
		return x.MarketPriceMargin
	}
	return 0
}

func (x *OfferPayload) GetUseMarketBasedPrice() bool {
	if x != nil {
		return x.UseMarketBasedPrice
	}
	return false
}

func (x *OfferPayload) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *OfferPayload) GetMinAmount() int64 {
	if x != nil {
		return x.MinAmount
	}
	return 0
}

func (x *OfferPayload) GetBaseCurrencyCode() string {
	if x != nil {
		return x.BaseCurrencyCode
	}
	return ""
}

func (x *OfferPayload) GetCounterCurrencyCode() string {
	if x != nil {
		return x.CounterCurrencyCode
	}
	return ""
}

// Deprecated: Do not use.
func (x *OfferPayload) GetArbitratorNodeAddresses() []*NodeAddress {
	if x != nil {
		return x.ArbitratorNodeAddresses
	}
	return nil
}

// Deprecated: Do not use.
func (x *OfferPayload) GetMediatorNodeAddresses() []*NodeAddress {
	if x != nil {
		return x.MediatorNodeAddresses
	}
	return nil
}

func (x *OfferPayload) GetPaymentMethodId() string {
	if x != nil {
		return x.PaymentMethodId
	}
	return ""
}

func (x *OfferPayload) GetMakerPaymentAccountId() string {
	if x != nil {
		return x.MakerPaymentAccountId
	}
	return ""
}

func (x *OfferPayload) GetOfferFeePaymentTxId() string {
	if x != nil {
		return x.OfferFeePaymentTxId
	}
	return ""
}

func (x *OfferPayload) GetCountryCode() string {
	if x != nil {
		return x.CountryCode
	}
	return ""
}

func (x *OfferPayload) GetAcceptedCountryCodes() []string {
	if x != nil {
		return x.AcceptedCountryCodes
	}
	return nil
}

func (x *OfferPayload) GetBankId() string {
	if x != nil {
		return x.BankId
	}
	return ""
}

func (x *OfferPayload) GetAcceptedBankIds() []string {
	if x != nil {
		return x.AcceptedBankIds
	}
	return nil
}

func (x *OfferPayload) GetVersionNr() string {
	if x != nil {
		return x.VersionNr
	}
	return ""
}

func (x *OfferPayload) GetBlockHeightAtOfferCreation() int64 {
	if x != nil {
		return x.BlockHeightAtOfferCreation
	}
	return 0
}

func (x *OfferPayload) GetTxFee() int64 {
	if x != nil {
		return x.TxFee
	}
	return 0
}

func (x *OfferPayload) GetMakerFee() int64 {
	if x != nil {
		return x.MakerFee
	}
	return 0
}

func (x *OfferPayload) GetIsCurrencyForMakerFeeBtc() bool {
	if x != nil {
		return x.IsCurrencyForMakerFeeBtc
	}
	return false
}

func (x *OfferPayload) GetBuyerSecurityDeposit() int64 {
	if x != nil {
		return x.BuyerSecurityDeposit
	}
	return 0
}

func (x *OfferPayload) GetSellerSecurityDeposit() int64 {
	if x != nil {
		return x.SellerSecurityDeposit
	}
	return 0
}

func (x *OfferPayload) GetMaxTradeLimit() int64 {
	if x != nil {
		return x.MaxTradeLimit
	}
	return 0
}

func (x *OfferPayload) GetMaxTradePeriod() int64 {
	if x != nil {
		return x.MaxTradePeriod
	}
	return 0
}

func (x *OfferPayload) GetUseAutoClose() bool {
	if x != nil {
		return x.UseAutoClose
	}
	return false
}

func (x *OfferPayload) GetUseReOpenAfterAutoClose() bool {
	if x != nil {
		return x.UseReOpenAfterAutoClose
	}
	return false
}

func (x *OfferPayload) GetLowerClosePrice() int64 {
	if x != nil {
		return x.LowerClosePrice
	}
	return 0
}

func (x *OfferPayload) GetUpperClosePrice() int64 {
	if x != nil {
		return x.UpperClosePrice
	}
	return 0
}

func (x *OfferPayload) GetIsPrivateOffer() bool {
	if x != nil {
		return x.IsPrivateOffer
	}
	return false
}

func (x *OfferPayload) GetHashOfChallenge() string {
	if x != nil {
		return x.HashOfChallenge
	}
	return ""
}

func (x *OfferPayload) GetExtraData() map[string]string {
	if x != nil {
		return x.ExtraData
	}
	return nil
}

func (x *OfferPayload) GetProtocolVersion() int32 {
	if x != nil {
		return x.ProtocolVersion
	}
	return 0
}

type AccountAgeWitness struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash []byte `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	Date int64  `protobuf:"varint,2,opt,name=date,proto3" json:"date,omitempty"`
}

func (x *AccountAgeWitness) Reset() {
	*x = AccountAgeWitness{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountAgeWitness) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountAgeWitness) ProtoMessage() {}

func (x *AccountAgeWitness) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountAgeWitness.ProtoReflect.Descriptor instead.
func (*AccountAgeWitness) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{80}
}

func (x *AccountAgeWitness) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *AccountAgeWitness) GetDate() int64 {
	if x != nil {
		return x.Date
	}
	return 0
}

type SignedWitness struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VerificationMethod    SignedWitness_VerificationMethod `protobuf:"varint,1,opt,name=verification_method,json=verificationMethod,proto3,enum=io.bisq.protobuffer.SignedWitness_VerificationMethod" json:"verification_method,omitempty"`
	AccountAgeWitnessHash []byte                           `protobuf:"bytes,2,opt,name=account_age_witness_hash,json=accountAgeWitnessHash,proto3" json:"account_age_witness_hash,omitempty"`
	Signature             []byte                           `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
	SignerPubKey          []byte                           `protobuf:"bytes,4,opt,name=signer_pub_key,json=signerPubKey,proto3" json:"signer_pub_key,omitempty"`
	WitnessOwnerPubKey    []byte                           `protobuf:"bytes,5,opt,name=witness_owner_pub_key,json=witnessOwnerPubKey,proto3" json:"witness_owner_pub_key,omitempty"`
	Date                  int64                            `protobuf:"varint,6,opt,name=date,proto3" json:"date,omitempty"`
	TradeAmount           int64                            `protobuf:"varint,7,opt,name=trade_amount,json=tradeAmount,proto3" json:"trade_amount,omitempty"`
}

func (x *SignedWitness) Reset() {
	*x = SignedWitness{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignedWitness) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignedWitness) ProtoMessage() {}

func (x *SignedWitness) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignedWitness.ProtoReflect.Descriptor instead.
func (*SignedWitness) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{81}
}

func (x *SignedWitness) GetVerificationMethod() SignedWitness_VerificationMethod {
	if x != nil {
		return x.VerificationMethod
	}
	return SignedWitness_PB_ERROR
}

func (x *SignedWitness) GetAccountAgeWitnessHash() []byte {
	if x != nil {
		return x.AccountAgeWitnessHash
	}
	return nil
}

func (x *SignedWitness) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *SignedWitness) GetSignerPubKey() []byte {
	if x != nil {
		return x.SignerPubKey
	}
	return nil
}

func (x *SignedWitness) GetWitnessOwnerPubKey() []byte {
	if x != nil {
		return x.WitnessOwnerPubKey
	}
	return nil
}

func (x *SignedWitness) GetDate() int64 {
	if x != nil {
		return x.Date
	}
	return 0
}

func (x *SignedWitness) GetTradeAmount() int64 {
	if x != nil {
		return x.TradeAmount
	}
	return 0
}

type Dispute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeId                          string         `protobuf:"bytes,1,opt,name=trade_id,json=tradeId,proto3" json:"trade_id,omitempty"`
	Id                               string         `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	TraderId                         int32          `protobuf:"varint,3,opt,name=trader_id,json=traderId,proto3" json:"trader_id,omitempty"`
	DisputeOpenerIsBuyer             bool           `protobuf:"varint,4,opt,name=dispute_opener_is_buyer,json=disputeOpenerIsBuyer,proto3" json:"dispute_opener_is_buyer,omitempty"`
	DisputeOpenerIsMaker             bool           `protobuf:"varint,5,opt,name=dispute_opener_is_maker,json=disputeOpenerIsMaker,proto3" json:"dispute_opener_is_maker,omitempty"`
	OpeningDate                      int64          `protobuf:"varint,6,opt,name=opening_date,json=openingDate,proto3" json:"opening_date,omitempty"`
	TraderPubKeyRing                 *PubKeyRing    `protobuf:"bytes,7,opt,name=trader_pub_key_ring,json=traderPubKeyRing,proto3" json:"trader_pub_key_ring,omitempty"`
	TradeDate                        int64          `protobuf:"varint,8,opt,name=trade_date,json=tradeDate,proto3" json:"trade_date,omitempty"`
	Contract                         *Contract      `protobuf:"bytes,9,opt,name=contract,proto3" json:"contract,omitempty"`
	ContractHash                     []byte         `protobuf:"bytes,10,opt,name=contract_hash,json=contractHash,proto3" json:"contract_hash,omitempty"`
	DepositTxSerialized              []byte         `protobuf:"bytes,11,opt,name=deposit_tx_serialized,json=depositTxSerialized,proto3" json:"deposit_tx_serialized,omitempty"`
	PayoutTxSerialized               []byte         `protobuf:"bytes,12,opt,name=payout_tx_serialized,json=payoutTxSerialized,proto3" json:"payout_tx_serialized,omitempty"`
	DepositTxId                      string         `protobuf:"bytes,13,opt,name=deposit_tx_id,json=depositTxId,proto3" json:"deposit_tx_id,omitempty"`
	PayoutTxId                       string         `protobuf:"bytes,14,opt,name=payout_tx_id,json=payoutTxId,proto3" json:"payout_tx_id,omitempty"`
	ContractAsJson                   string         `protobuf:"bytes,15,opt,name=contract_as_json,json=contractAsJson,proto3" json:"contract_as_json,omitempty"`
	MakerContractSignature           string         `protobuf:"bytes,16,opt,name=maker_contract_signature,json=makerContractSignature,proto3" json:"maker_contract_signature,omitempty"`
	TakerContractSignature           string         `protobuf:"bytes,17,opt,name=taker_contract_signature,json=takerContractSignature,proto3" json:"taker_contract_signature,omitempty"`
	AgentPubKeyRing                  *PubKeyRing    `protobuf:"bytes,18,opt,name=agent_pub_key_ring,json=agentPubKeyRing,proto3" json:"agent_pub_key_ring,omitempty"`
	IsSupportTicket                  bool           `protobuf:"varint,19,opt,name=is_support_ticket,json=isSupportTicket,proto3" json:"is_support_ticket,omitempty"`
	ChatMessage                      []*ChatMessage `protobuf:"bytes,20,rep,name=chat_message,json=chatMessage,proto3" json:"chat_message,omitempty"`
	IsClosed                         bool           `protobuf:"varint,21,opt,name=is_closed,json=isClosed,proto3" json:"is_closed,omitempty"`
	DisputeResult                    *DisputeResult `protobuf:"bytes,22,opt,name=dispute_result,json=disputeResult,proto3" json:"dispute_result,omitempty"`
	DisputePayoutTxId                string         `protobuf:"bytes,23,opt,name=dispute_payout_tx_id,json=disputePayoutTxId,proto3" json:"dispute_payout_tx_id,omitempty"`
	SupportType                      SupportType    `protobuf:"varint,24,opt,name=support_type,json=supportType,proto3,enum=io.bisq.protobuffer.SupportType" json:"support_type,omitempty"`
	MediatorsDisputeResult           string         `protobuf:"bytes,25,opt,name=mediators_dispute_result,json=mediatorsDisputeResult,proto3" json:"mediators_dispute_result,omitempty"`
	DelayedPayoutTxId                string         `protobuf:"bytes,26,opt,name=delayed_payout_tx_id,json=delayedPayoutTxId,proto3" json:"delayed_payout_tx_id,omitempty"`
	DonationAddressOfDelayedPayoutTx string         `protobuf:"bytes,27,opt,name=donation_address_of_delayed_payout_tx,json=donationAddressOfDelayedPayoutTx,proto3" json:"donation_address_of_delayed_payout_tx,omitempty"`
}

func (x *Dispute) Reset() {
	*x = Dispute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Dispute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dispute) ProtoMessage() {}

func (x *Dispute) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dispute.ProtoReflect.Descriptor instead.
func (*Dispute) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{82}
}

func (x *Dispute) GetTradeId() string {
	if x != nil {
		return x.TradeId
	}
	return ""
}

func (x *Dispute) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Dispute) GetTraderId() int32 {
	if x != nil {
		return x.TraderId
	}
	return 0
}

func (x *Dispute) GetDisputeOpenerIsBuyer() bool {
	if x != nil {
		return x.DisputeOpenerIsBuyer
	}
	return false
}

func (x *Dispute) GetDisputeOpenerIsMaker() bool {
	if x != nil {
		return x.DisputeOpenerIsMaker
	}
	return false
}

func (x *Dispute) GetOpeningDate() int64 {
	if x != nil {
		return x.OpeningDate
	}
	return 0
}

func (x *Dispute) GetTraderPubKeyRing() *PubKeyRing {
	if x != nil {
		return x.TraderPubKeyRing
	}
	return nil
}

func (x *Dispute) GetTradeDate() int64 {
	if x != nil {
		return x.TradeDate
	}
	return 0
}

func (x *Dispute) GetContract() *Contract {
	if x != nil {
		return x.Contract
	}
	return nil
}

func (x *Dispute) GetContractHash() []byte {
	if x != nil {
		return x.ContractHash
	}
	return nil
}

func (x *Dispute) GetDepositTxSerialized() []byte {
	if x != nil {
		return x.DepositTxSerialized
	}
	return nil
}

func (x *Dispute) GetPayoutTxSerialized() []byte {
	if x != nil {
		return x.PayoutTxSerialized
	}
	return nil
}

func (x *Dispute) GetDepositTxId() string {
	if x != nil {
		return x.DepositTxId
	}
	return ""
}

func (x *Dispute) GetPayoutTxId() string {
	if x != nil {
		return x.PayoutTxId
	}
	return ""
}

func (x *Dispute) GetContractAsJson() string {
	if x != nil {
		return x.ContractAsJson
	}
	return ""
}

func (x *Dispute) GetMakerContractSignature() string {
	if x != nil {
		return x.MakerContractSignature
	}
	return ""
}

func (x *Dispute) GetTakerContractSignature() string {
	if x != nil {
		return x.TakerContractSignature
	}
	return ""
}

func (x *Dispute) GetAgentPubKeyRing() *PubKeyRing {
	if x != nil {
		return x.AgentPubKeyRing
	}
	return nil
}

func (x *Dispute) GetIsSupportTicket() bool {
	if x != nil {
		return x.IsSupportTicket
	}
	return false
}

func (x *Dispute) GetChatMessage() []*ChatMessage {
	if x != nil {
		return x.ChatMessage
	}
	return nil
}

func (x *Dispute) GetIsClosed() bool {
	if x != nil {
		return x.IsClosed
	}
	return false
}

func (x *Dispute) GetDisputeResult() *DisputeResult {
	if x != nil {
		return x.DisputeResult
	}
	return nil
}

func (x *Dispute) GetDisputePayoutTxId() string {
	if x != nil {
		return x.DisputePayoutTxId
	}
	return ""
}

func (x *Dispute) GetSupportType() SupportType {
	if x != nil {
		return x.SupportType
	}
	return SupportType_ARBITRATION
}

func (x *Dispute) GetMediatorsDisputeResult() string {
	if x != nil {
		return x.MediatorsDisputeResult
	}
	return ""
}

func (x *Dispute) GetDelayedPayoutTxId() string {
	if x != nil {
		return x.DelayedPayoutTxId
	}
	return ""
}

func (x *Dispute) GetDonationAddressOfDelayedPayoutTx() string {
	if x != nil {
		return x.DonationAddressOfDelayedPayoutTx
	}
	return ""
}

type Attachment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileName string `protobuf:"bytes,1,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	Bytes    []byte `protobuf:"bytes,2,opt,name=bytes,proto3" json:"bytes,omitempty"`
}

func (x *Attachment) Reset() {
	*x = Attachment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Attachment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Attachment) ProtoMessage() {}

func (x *Attachment) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Attachment.ProtoReflect.Descriptor instead.
func (*Attachment) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{83}
}

func (x *Attachment) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *Attachment) GetBytes() []byte {
	if x != nil {
		return x.Bytes
	}
	return nil
}

type DisputeResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeId             string               `protobuf:"bytes,1,opt,name=trade_id,json=tradeId,proto3" json:"trade_id,omitempty"`
	TraderId            int32                `protobuf:"varint,2,opt,name=trader_id,json=traderId,proto3" json:"trader_id,omitempty"`
	Winner              DisputeResult_Winner `protobuf:"varint,3,opt,name=winner,proto3,enum=io.bisq.protobuffer.DisputeResult_Winner" json:"winner,omitempty"`
	ReasonOrdinal       int32                `protobuf:"varint,4,opt,name=reason_ordinal,json=reasonOrdinal,proto3" json:"reason_ordinal,omitempty"`
	TamperProofEvidence bool                 `protobuf:"varint,5,opt,name=tamper_proof_evidence,json=tamperProofEvidence,proto3" json:"tamper_proof_evidence,omitempty"`
	IdVerification      bool                 `protobuf:"varint,6,opt,name=id_verification,json=idVerification,proto3" json:"id_verification,omitempty"`
	ScreenCast          bool                 `protobuf:"varint,7,opt,name=screen_cast,json=screenCast,proto3" json:"screen_cast,omitempty"`
	SummaryNotes        string               `protobuf:"bytes,8,opt,name=summary_notes,json=summaryNotes,proto3" json:"summary_notes,omitempty"`
	ChatMessage         *ChatMessage         `protobuf:"bytes,9,opt,name=chat_message,json=chatMessage,proto3" json:"chat_message,omitempty"`
	ArbitratorSignature []byte               `protobuf:"bytes,10,opt,name=arbitrator_signature,json=arbitratorSignature,proto3" json:"arbitrator_signature,omitempty"`
	BuyerPayoutAmount   int64                `protobuf:"varint,11,opt,name=buyer_payout_amount,json=buyerPayoutAmount,proto3" json:"buyer_payout_amount,omitempty"`
	SellerPayoutAmount  int64                `protobuf:"varint,12,opt,name=seller_payout_amount,json=sellerPayoutAmount,proto3" json:"seller_payout_amount,omitempty"`
	ArbitratorPubKey    []byte               `protobuf:"bytes,13,opt,name=arbitrator_pub_key,json=arbitratorPubKey,proto3" json:"arbitrator_pub_key,omitempty"`
	CloseDate           int64                `protobuf:"varint,14,opt,name=close_date,json=closeDate,proto3" json:"close_date,omitempty"`
	IsLoserPublisher    bool                 `protobuf:"varint,15,opt,name=is_loser_publisher,json=isLoserPublisher,proto3" json:"is_loser_publisher,omitempty"`
}

func (x *DisputeResult) Reset() {
	*x = DisputeResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisputeResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisputeResult) ProtoMessage() {}

func (x *DisputeResult) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisputeResult.ProtoReflect.Descriptor instead.
func (*DisputeResult) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{84}
}

func (x *DisputeResult) GetTradeId() string {
	if x != nil {
		return x.TradeId
	}
	return ""
}

func (x *DisputeResult) GetTraderId() int32 {
	if x != nil {
		return x.TraderId
	}
	return 0
}

func (x *DisputeResult) GetWinner() DisputeResult_Winner {
	if x != nil {
		return x.Winner
	}
	return DisputeResult_PB_ERROR_WINNER
}

func (x *DisputeResult) GetReasonOrdinal() int32 {
	if x != nil {
		return x.ReasonOrdinal
	}
	return 0
}

func (x *DisputeResult) GetTamperProofEvidence() bool {
	if x != nil {
		return x.TamperProofEvidence
	}
	return false
}

func (x *DisputeResult) GetIdVerification() bool {
	if x != nil {
		return x.IdVerification
	}
	return false
}

func (x *DisputeResult) GetScreenCast() bool {
	if x != nil {
		return x.ScreenCast
	}
	return false
}

func (x *DisputeResult) GetSummaryNotes() string {
	if x != nil {
		return x.SummaryNotes
	}
	return ""
}

func (x *DisputeResult) GetChatMessage() *ChatMessage {
	if x != nil {
		return x.ChatMessage
	}
	return nil
}

func (x *DisputeResult) GetArbitratorSignature() []byte {
	if x != nil {
		return x.ArbitratorSignature
	}
	return nil
}

func (x *DisputeResult) GetBuyerPayoutAmount() int64 {
	if x != nil {
		return x.BuyerPayoutAmount
	}
	return 0
}

func (x *DisputeResult) GetSellerPayoutAmount() int64 {
	if x != nil {
		return x.SellerPayoutAmount
	}
	return 0
}

func (x *DisputeResult) GetArbitratorPubKey() []byte {
	if x != nil {
		return x.ArbitratorPubKey
	}
	return nil
}

func (x *DisputeResult) GetCloseDate() int64 {
	if x != nil {
		return x.CloseDate
	}
	return 0
}

func (x *DisputeResult) GetIsLoserPublisher() bool {
	if x != nil {
		return x.IsLoserPublisher
	}
	return false
}

type Contract struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OfferPayload               *OfferPayload          `protobuf:"bytes,1,opt,name=offer_payload,json=offerPayload,proto3" json:"offer_payload,omitempty"`
	TradeAmount                int64                  `protobuf:"varint,2,opt,name=trade_amount,json=tradeAmount,proto3" json:"trade_amount,omitempty"`
	TradePrice                 int64                  `protobuf:"varint,3,opt,name=trade_price,json=tradePrice,proto3" json:"trade_price,omitempty"`
	TakerFeeTxId               string                 `protobuf:"bytes,4,opt,name=taker_fee_tx_id,json=takerFeeTxId,proto3" json:"taker_fee_tx_id,omitempty"`
	IsBuyerMakerAndSellerTaker bool                   `protobuf:"varint,6,opt,name=is_buyer_maker_and_seller_taker,json=isBuyerMakerAndSellerTaker,proto3" json:"is_buyer_maker_and_seller_taker,omitempty"`
	MakerAccountId             string                 `protobuf:"bytes,7,opt,name=maker_account_id,json=makerAccountId,proto3" json:"maker_account_id,omitempty"`
	TakerAccountId             string                 `protobuf:"bytes,8,opt,name=taker_account_id,json=takerAccountId,proto3" json:"taker_account_id,omitempty"`
	MakerPaymentAccountPayload *PaymentAccountPayload `protobuf:"bytes,9,opt,name=maker_payment_account_payload,json=makerPaymentAccountPayload,proto3" json:"maker_payment_account_payload,omitempty"`
	TakerPaymentAccountPayload *PaymentAccountPayload `protobuf:"bytes,10,opt,name=taker_payment_account_payload,json=takerPaymentAccountPayload,proto3" json:"taker_payment_account_payload,omitempty"`
	MakerPubKeyRing            *PubKeyRing            `protobuf:"bytes,11,opt,name=maker_pub_key_ring,json=makerPubKeyRing,proto3" json:"maker_pub_key_ring,omitempty"`
	TakerPubKeyRing            *PubKeyRing            `protobuf:"bytes,12,opt,name=taker_pub_key_ring,json=takerPubKeyRing,proto3" json:"taker_pub_key_ring,omitempty"`
	BuyerNodeAddress           *NodeAddress           `protobuf:"bytes,13,opt,name=buyer_node_address,json=buyerNodeAddress,proto3" json:"buyer_node_address,omitempty"`
	SellerNodeAddress          *NodeAddress           `protobuf:"bytes,14,opt,name=seller_node_address,json=sellerNodeAddress,proto3" json:"seller_node_address,omitempty"`
	MakerPayoutAddressString   string                 `protobuf:"bytes,15,opt,name=maker_payout_address_string,json=makerPayoutAddressString,proto3" json:"maker_payout_address_string,omitempty"`
	TakerPayoutAddressString   string                 `protobuf:"bytes,16,opt,name=taker_payout_address_string,json=takerPayoutAddressString,proto3" json:"taker_payout_address_string,omitempty"`
	MakerMultiSigPubKey        []byte                 `protobuf:"bytes,17,opt,name=maker_multi_sig_pub_key,json=makerMultiSigPubKey,proto3" json:"maker_multi_sig_pub_key,omitempty"`
	TakerMultiSigPubKey        []byte                 `protobuf:"bytes,18,opt,name=taker_multi_sig_pub_key,json=takerMultiSigPubKey,proto3" json:"taker_multi_sig_pub_key,omitempty"`
	MediatorNodeAddress        *NodeAddress           `protobuf:"bytes,19,opt,name=mediator_node_address,json=mediatorNodeAddress,proto3" json:"mediator_node_address,omitempty"`
	LockTime                   int64                  `protobuf:"varint,20,opt,name=lock_time,json=lockTime,proto3" json:"lock_time,omitempty"`
	RefundAgentNodeAddress     *NodeAddress           `protobuf:"bytes,21,opt,name=refund_agent_node_address,json=refundAgentNodeAddress,proto3" json:"refund_agent_node_address,omitempty"`
}

func (x *Contract) Reset() {
	*x = Contract{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Contract) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Contract) ProtoMessage() {}

func (x *Contract) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Contract.ProtoReflect.Descriptor instead.
func (*Contract) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{85}
}

func (x *Contract) GetOfferPayload() *OfferPayload {
	if x != nil {
		return x.OfferPayload
	}
	return nil
}

func (x *Contract) GetTradeAmount() int64 {
	if x != nil {
		return x.TradeAmount
	}
	return 0
}

func (x *Contract) GetTradePrice() int64 {
	if x != nil {
		return x.TradePrice
	}
	return 0
}

func (x *Contract) GetTakerFeeTxId() string {
	if x != nil {
		return x.TakerFeeTxId
	}
	return ""
}

func (x *Contract) GetIsBuyerMakerAndSellerTaker() bool {
	if x != nil {
		return x.IsBuyerMakerAndSellerTaker
	}
	return false
}

func (x *Contract) GetMakerAccountId() string {
	if x != nil {
		return x.MakerAccountId
	}
	return ""
}

func (x *Contract) GetTakerAccountId() string {
	if x != nil {
		return x.TakerAccountId
	}
	return ""
}

func (x *Contract) GetMakerPaymentAccountPayload() *PaymentAccountPayload {
	if x != nil {
		return x.MakerPaymentAccountPayload
	}
	return nil
}

func (x *Contract) GetTakerPaymentAccountPayload() *PaymentAccountPayload {
	if x != nil {
		return x.TakerPaymentAccountPayload
	}
	return nil
}

func (x *Contract) GetMakerPubKeyRing() *PubKeyRing {
	if x != nil {
		return x.MakerPubKeyRing
	}
	return nil
}

func (x *Contract) GetTakerPubKeyRing() *PubKeyRing {
	if x != nil {
		return x.TakerPubKeyRing
	}
	return nil
}

func (x *Contract) GetBuyerNodeAddress() *NodeAddress {
	if x != nil {
		return x.BuyerNodeAddress
	}
	return nil
}

func (x *Contract) GetSellerNodeAddress() *NodeAddress {
	if x != nil {
		return x.SellerNodeAddress
	}
	return nil
}

func (x *Contract) GetMakerPayoutAddressString() string {
	if x != nil {
		return x.MakerPayoutAddressString
	}
	return ""
}

func (x *Contract) GetTakerPayoutAddressString() string {
	if x != nil {
		return x.TakerPayoutAddressString
	}
	return ""
}

func (x *Contract) GetMakerMultiSigPubKey() []byte {
	if x != nil {
		return x.MakerMultiSigPubKey
	}
	return nil
}

func (x *Contract) GetTakerMultiSigPubKey() []byte {
	if x != nil {
		return x.TakerMultiSigPubKey
	}
	return nil
}

func (x *Contract) GetMediatorNodeAddress() *NodeAddress {
	if x != nil {
		return x.MediatorNodeAddress
	}
	return nil
}

func (x *Contract) GetLockTime() int64 {
	if x != nil {
		return x.LockTime
	}
	return 0
}

func (x *Contract) GetRefundAgentNodeAddress() *NodeAddress {
	if x != nil {
		return x.RefundAgentNodeAddress
	}
	return nil
}

type RawTransactionInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index             int64  `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	ParentTransaction []byte `protobuf:"bytes,2,opt,name=parent_transaction,json=parentTransaction,proto3" json:"parent_transaction,omitempty"`
	Value             int64  `protobuf:"varint,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *RawTransactionInput) Reset() {
	*x = RawTransactionInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RawTransactionInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RawTransactionInput) ProtoMessage() {}

func (x *RawTransactionInput) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RawTransactionInput.ProtoReflect.Descriptor instead.
func (*RawTransactionInput) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{86}
}

func (x *RawTransactionInput) GetIndex() int64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *RawTransactionInput) GetParentTransaction() []byte {
	if x != nil {
		return x.ParentTransaction
	}
	return nil
}

func (x *RawTransactionInput) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type PaymentAccountPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	PaymentMethodId string `protobuf:"bytes,2,opt,name=payment_method_id,json=paymentMethodId,proto3" json:"payment_method_id,omitempty"`
	// Deprecated: Do not use.
	MaxTradePeriod int64 `protobuf:"varint,3,opt,name=max_trade_period,json=maxTradePeriod,proto3" json:"max_trade_period,omitempty"` // not used anymore but we need to keep it in PB for backward compatibility
	// Types that are assignable to Message:
	//	*PaymentAccountPayload_AliPayAccountPayload
	//	*PaymentAccountPayload_ChaseQuickPayAccountPayload
	//	*PaymentAccountPayload_ClearXchangeAccountPayload
	//	*PaymentAccountPayload_CountryBasedPaymentAccountPayload
	//	*PaymentAccountPayload_CryptoCurrencyAccountPayload
	//	*PaymentAccountPayload_FasterPaymentsAccountPayload
	//	*PaymentAccountPayload_InteracETransferAccountPayload
	//	*PaymentAccountPayload_OKPayAccountPayload
	//	*PaymentAccountPayload_PerfectMoneyAccountPayload
	//	*PaymentAccountPayload_SwishAccountPayload
	//	*PaymentAccountPayload_USPostalMoneyOrderAccountPayload
	//	*PaymentAccountPayload_UpholdAccountPayload
	//	*PaymentAccountPayload_CashAppAccountPayload
	//	*PaymentAccountPayload_MoneyBeamAccountPayload
	//	*PaymentAccountPayload_VenmoAccountPayload
	//	*PaymentAccountPayload_PopmoneyAccountPayload
	//	*PaymentAccountPayload_RevolutAccountPayload
	//	*PaymentAccountPayload_WeChatPayAccountPayload
	//	*PaymentAccountPayload_MoneyGramAccountPayload
	//	*PaymentAccountPayload_HalCashAccountPayload
	//	*PaymentAccountPayload_PromptPayAccountPayload
	//	*PaymentAccountPayload_AdvancedCashAccountPayload
	//	*PaymentAccountPayload_InstantCryptoCurrencyAccountPayload
	//	*PaymentAccountPayload_JapanBankAccountPayload
	//	*PaymentAccountPayload_TransferwiseAccountPayload
	//	*PaymentAccountPayload_AustraliaPayidPayload
	//	*PaymentAccountPayload_AmazonGiftCardAccountPayload
	//	*PaymentAccountPayload_CashByMailAccountPayload
	Message             isPaymentAccountPayload_Message `protobuf_oneof:"message"`
	ExcludeFromJsonData map[string]string               `protobuf:"bytes,15,rep,name=exclude_from_json_data,json=excludeFromJsonData,proto3" json:"exclude_from_json_data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PaymentAccountPayload) Reset() {
	*x = PaymentAccountPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentAccountPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentAccountPayload) ProtoMessage() {}

func (x *PaymentAccountPayload) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentAccountPayload.ProtoReflect.Descriptor instead.
func (*PaymentAccountPayload) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{87}
}

func (x *PaymentAccountPayload) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PaymentAccountPayload) GetPaymentMethodId() string {
	if x != nil {
		return x.PaymentMethodId
	}
	return ""
}

// Deprecated: Do not use.
func (x *PaymentAccountPayload) GetMaxTradePeriod() int64 {
	if x != nil {
		return x.MaxTradePeriod
	}
	return 0
}

func (m *PaymentAccountPayload) GetMessage() isPaymentAccountPayload_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (x *PaymentAccountPayload) GetAliPayAccountPayload() *AliPayAccountPayload {
	if x, ok := x.GetMessage().(*PaymentAccountPayload_AliPayAccountPayload); ok {
		return x.AliPayAccountPayload
	}
	return nil
}

func (x *PaymentAccountPayload) GetChaseQuickPayAccountPayload() *ChaseQuickPayAccountPayload {
	if x, ok := x.GetMessage().(*PaymentAccountPayload_ChaseQuickPayAccountPayload); ok {
		return x.ChaseQuickPayAccountPayload
	}
	return nil
}

func (x *PaymentAccountPayload) GetClearXchangeAccountPayload() *ClearXchangeAccountPayload {
	if x, ok := x.GetMessage().(*PaymentAccountPayload_ClearXchangeAccountPayload); ok {
		return x.ClearXchangeAccountPayload
	}
	return nil
}

func (x *PaymentAccountPayload) GetCountryBasedPaymentAccountPayload() *CountryBasedPaymentAccountPayload {
	if x, ok := x.GetMessage().(*PaymentAccountPayload_CountryBasedPaymentAccountPayload); ok {
		return x.CountryBasedPaymentAccountPayload
	}
	return nil
}

func (x *PaymentAccountPayload) GetCryptoCurrencyAccountPayload() *CryptoCurrencyAccountPayload {
	if x, ok := x.GetMessage().(*PaymentAccountPayload_CryptoCurrencyAccountPayload); ok {
		return x.CryptoCurrencyAccountPayload
	}
	return nil
}

func (x *PaymentAccountPayload) GetFasterPaymentsAccountPayload() *FasterPaymentsAccountPayload {
	if x, ok := x.GetMessage().(*PaymentAccountPayload_FasterPaymentsAccountPayload); ok {
		return x.FasterPaymentsAccountPayload
	}
	return nil
}

func (x *PaymentAccountPayload) GetInteracETransferAccountPayload() *InteracETransferAccountPayload {
	if x, ok := x.GetMessage().(*PaymentAccountPayload_InteracETransferAccountPayload); ok {
		return x.InteracETransferAccountPayload
	}
	return nil
}

// Deprecated: Do not use.
func (x *PaymentAccountPayload) GetOKPayAccountPayload() *OKPayAccountPayload {
	if x, ok := x.GetMessage().(*PaymentAccountPayload_OKPayAccountPayload); ok {
		return x.OKPayAccountPayload
	}
	return nil
}

func (x *PaymentAccountPayload) GetPerfectMoneyAccountPayload() *PerfectMoneyAccountPayload {
	if x, ok := x.GetMessage().(*PaymentAccountPayload_PerfectMoneyAccountPayload); ok {
		return x.PerfectMoneyAccountPayload
	}
	return nil
}

func (x *PaymentAccountPayload) GetSwishAccountPayload() *SwishAccountPayload {
	if x, ok := x.GetMessage().(*PaymentAccountPayload_SwishAccountPayload); ok {
		return x.SwishAccountPayload
	}
	return nil
}

func (x *PaymentAccountPayload) GetUSPostalMoneyOrderAccountPayload() *USPostalMoneyOrderAccountPayload {
	if x, ok := x.GetMessage().(*PaymentAccountPayload_USPostalMoneyOrderAccountPayload); ok {
		return x.USPostalMoneyOrderAccountPayload
	}
	return nil
}

func (x *PaymentAccountPayload) GetUpholdAccountPayload() *UpholdAccountPayload {
	if x, ok := x.GetMessage().(*PaymentAccountPayload_UpholdAccountPayload); ok {
		return x.UpholdAccountPayload
	}
	return nil
}

// Deprecated: Do not use.
func (x *PaymentAccountPayload) GetCashAppAccountPayload() *CashAppAccountPayload {
	if x, ok := x.GetMessage().(*PaymentAccountPayload_CashAppAccountPayload); ok {
		return x.CashAppAccountPayload
	}
	return nil
}

func (x *PaymentAccountPayload) GetMoneyBeamAccountPayload() *MoneyBeamAccountPayload {
	if x, ok := x.GetMessage().(*PaymentAccountPayload_MoneyBeamAccountPayload); ok {
		return x.MoneyBeamAccountPayload
	}
	return nil
}

// Deprecated: Do not use.
func (x *PaymentAccountPayload) GetVenmoAccountPayload() *VenmoAccountPayload {
	if x, ok := x.GetMessage().(*PaymentAccountPayload_VenmoAccountPayload); ok {
		return x.VenmoAccountPayload
	}
	return nil
}

func (x *PaymentAccountPayload) GetPopmoneyAccountPayload() *PopmoneyAccountPayload {
	if x, ok := x.GetMessage().(*PaymentAccountPayload_PopmoneyAccountPayload); ok {
		return x.PopmoneyAccountPayload
	}
	return nil
}

func (x *PaymentAccountPayload) GetRevolutAccountPayload() *RevolutAccountPayload {
	if x, ok := x.GetMessage().(*PaymentAccountPayload_RevolutAccountPayload); ok {
		return x.RevolutAccountPayload
	}
	return nil
}

func (x *PaymentAccountPayload) GetWeChatPayAccountPayload() *WeChatPayAccountPayload {
	if x, ok := x.GetMessage().(*PaymentAccountPayload_WeChatPayAccountPayload); ok {
		return x.WeChatPayAccountPayload
	}
	return nil
}

func (x *PaymentAccountPayload) GetMoneyGramAccountPayload() *MoneyGramAccountPayload {
	if x, ok := x.GetMessage().(*PaymentAccountPayload_MoneyGramAccountPayload); ok {
		return x.MoneyGramAccountPayload
	}
	return nil
}

func (x *PaymentAccountPayload) GetHalCashAccountPayload() *HalCashAccountPayload {
	if x, ok := x.GetMessage().(*PaymentAccountPayload_HalCashAccountPayload); ok {
		return x.HalCashAccountPayload
	}
	return nil
}

func (x *PaymentAccountPayload) GetPromptPayAccountPayload() *PromptPayAccountPayload {
	if x, ok := x.GetMessage().(*PaymentAccountPayload_PromptPayAccountPayload); ok {
		return x.PromptPayAccountPayload
	}
	return nil
}

func (x *PaymentAccountPayload) GetAdvancedCashAccountPayload() *AdvancedCashAccountPayload {
	if x, ok := x.GetMessage().(*PaymentAccountPayload_AdvancedCashAccountPayload); ok {
		return x.AdvancedCashAccountPayload
	}
	return nil
}

func (x *PaymentAccountPayload) GetInstantCryptoCurrencyAccountPayload() *InstantCryptoCurrencyAccountPayload {
	if x, ok := x.GetMessage().(*PaymentAccountPayload_InstantCryptoCurrencyAccountPayload); ok {
		return x.InstantCryptoCurrencyAccountPayload
	}
	return nil
}

func (x *PaymentAccountPayload) GetJapanBankAccountPayload() *JapanBankAccountPayload {
	if x, ok := x.GetMessage().(*PaymentAccountPayload_JapanBankAccountPayload); ok {
		return x.JapanBankAccountPayload
	}
	return nil
}

func (x *PaymentAccountPayload) GetTransferwiseAccountPayload() *TransferwiseAccountPayload {
	if x, ok := x.GetMessage().(*PaymentAccountPayload_TransferwiseAccountPayload); ok {
		return x.TransferwiseAccountPayload
	}
	return nil
}

func (x *PaymentAccountPayload) GetAustraliaPayidPayload() *AustraliaPayidPayload {
	if x, ok := x.GetMessage().(*PaymentAccountPayload_AustraliaPayidPayload); ok {
		return x.AustraliaPayidPayload
	}
	return nil
}

func (x *PaymentAccountPayload) GetAmazonGiftCardAccountPayload() *AmazonGiftCardAccountPayload {
	if x, ok := x.GetMessage().(*PaymentAccountPayload_AmazonGiftCardAccountPayload); ok {
		return x.AmazonGiftCardAccountPayload
	}
	return nil
}

func (x *PaymentAccountPayload) GetCashByMailAccountPayload() *CashByMailAccountPayload {
	if x, ok := x.GetMessage().(*PaymentAccountPayload_CashByMailAccountPayload); ok {
		return x.CashByMailAccountPayload
	}
	return nil
}

func (x *PaymentAccountPayload) GetExcludeFromJsonData() map[string]string {
	if x != nil {
		return x.ExcludeFromJsonData
	}
	return nil
}

type isPaymentAccountPayload_Message interface {
	isPaymentAccountPayload_Message()
}

type PaymentAccountPayload_AliPayAccountPayload struct {
	AliPayAccountPayload *AliPayAccountPayload `protobuf:"bytes,4,opt,name=ali_pay_account_payload,json=aliPayAccountPayload,proto3,oneof"`
}

type PaymentAccountPayload_ChaseQuickPayAccountPayload struct {
	ChaseQuickPayAccountPayload *ChaseQuickPayAccountPayload `protobuf:"bytes,5,opt,name=chase_quick_pay_account_payload,json=chaseQuickPayAccountPayload,proto3,oneof"`
}

type PaymentAccountPayload_ClearXchangeAccountPayload struct {
	ClearXchangeAccountPayload *ClearXchangeAccountPayload `protobuf:"bytes,6,opt,name=clear_xchange_account_payload,json=clearXchangeAccountPayload,proto3,oneof"`
}

type PaymentAccountPayload_CountryBasedPaymentAccountPayload struct {
	CountryBasedPaymentAccountPayload *CountryBasedPaymentAccountPayload `protobuf:"bytes,7,opt,name=country_based_payment_account_payload,json=countryBasedPaymentAccountPayload,proto3,oneof"`
}

type PaymentAccountPayload_CryptoCurrencyAccountPayload struct {
	CryptoCurrencyAccountPayload *CryptoCurrencyAccountPayload `protobuf:"bytes,8,opt,name=crypto_currency_account_payload,json=cryptoCurrencyAccountPayload,proto3,oneof"`
}

type PaymentAccountPayload_FasterPaymentsAccountPayload struct {
	FasterPaymentsAccountPayload *FasterPaymentsAccountPayload `protobuf:"bytes,9,opt,name=faster_payments_account_payload,json=fasterPaymentsAccountPayload,proto3,oneof"`
}

type PaymentAccountPayload_InteracETransferAccountPayload struct {
	InteracETransferAccountPayload *InteracETransferAccountPayload `protobuf:"bytes,10,opt,name=interac_e_transfer_account_payload,json=interacETransferAccountPayload,proto3,oneof"`
}

type PaymentAccountPayload_OKPayAccountPayload struct {
	// Deprecated: Do not use.
	OKPayAccountPayload *OKPayAccountPayload `protobuf:"bytes,11,opt,name=o_k_pay_account_payload,json=oKPayAccountPayload,proto3,oneof"`
}

type PaymentAccountPayload_PerfectMoneyAccountPayload struct {
	PerfectMoneyAccountPayload *PerfectMoneyAccountPayload `protobuf:"bytes,12,opt,name=perfect_money_account_payload,json=perfectMoneyAccountPayload,proto3,oneof"`
}

type PaymentAccountPayload_SwishAccountPayload struct {
	SwishAccountPayload *SwishAccountPayload `protobuf:"bytes,13,opt,name=swish_account_payload,json=swishAccountPayload,proto3,oneof"`
}

type PaymentAccountPayload_USPostalMoneyOrderAccountPayload struct {
	USPostalMoneyOrderAccountPayload *USPostalMoneyOrderAccountPayload `protobuf:"bytes,14,opt,name=u_s_postal_money_order_account_payload,json=uSPostalMoneyOrderAccountPayload,proto3,oneof"`
}

type PaymentAccountPayload_UpholdAccountPayload struct {
	UpholdAccountPayload *UpholdAccountPayload `protobuf:"bytes,16,opt,name=uphold_account_payload,json=upholdAccountPayload,proto3,oneof"`
}

type PaymentAccountPayload_CashAppAccountPayload struct {
	// Deprecated: Do not use.
	CashAppAccountPayload *CashAppAccountPayload `protobuf:"bytes,17,opt,name=cash_app_account_payload,json=cashAppAccountPayload,proto3,oneof"`
}

type PaymentAccountPayload_MoneyBeamAccountPayload struct {
	MoneyBeamAccountPayload *MoneyBeamAccountPayload `protobuf:"bytes,18,opt,name=money_beam_account_payload,json=moneyBeamAccountPayload,proto3,oneof"`
}

type PaymentAccountPayload_VenmoAccountPayload struct {
	// Deprecated: Do not use.
	VenmoAccountPayload *VenmoAccountPayload `protobuf:"bytes,19,opt,name=venmo_account_payload,json=venmoAccountPayload,proto3,oneof"`
}

type PaymentAccountPayload_PopmoneyAccountPayload struct {
	PopmoneyAccountPayload *PopmoneyAccountPayload `protobuf:"bytes,20,opt,name=popmoney_account_payload,json=popmoneyAccountPayload,proto3,oneof"`
}

type PaymentAccountPayload_RevolutAccountPayload struct {
	RevolutAccountPayload *RevolutAccountPayload `protobuf:"bytes,21,opt,name=revolut_account_payload,json=revolutAccountPayload,proto3,oneof"`
}

type PaymentAccountPayload_WeChatPayAccountPayload struct {
	WeChatPayAccountPayload *WeChatPayAccountPayload `protobuf:"bytes,22,opt,name=we_chat_pay_account_payload,json=weChatPayAccountPayload,proto3,oneof"`
}

type PaymentAccountPayload_MoneyGramAccountPayload struct {
	MoneyGramAccountPayload *MoneyGramAccountPayload `protobuf:"bytes,23,opt,name=money_gram_account_payload,json=moneyGramAccountPayload,proto3,oneof"`
}

type PaymentAccountPayload_HalCashAccountPayload struct {
	HalCashAccountPayload *HalCashAccountPayload `protobuf:"bytes,24,opt,name=hal_cash_account_payload,json=halCashAccountPayload,proto3,oneof"`
}

type PaymentAccountPayload_PromptPayAccountPayload struct {
	PromptPayAccountPayload *PromptPayAccountPayload `protobuf:"bytes,25,opt,name=prompt_pay_account_payload,json=promptPayAccountPayload,proto3,oneof"`
}

type PaymentAccountPayload_AdvancedCashAccountPayload struct {
	AdvancedCashAccountPayload *AdvancedCashAccountPayload `protobuf:"bytes,26,opt,name=advanced_cash_account_payload,json=advancedCashAccountPayload,proto3,oneof"`
}

type PaymentAccountPayload_InstantCryptoCurrencyAccountPayload struct {
	InstantCryptoCurrencyAccountPayload *InstantCryptoCurrencyAccountPayload `protobuf:"bytes,27,opt,name=instant_crypto_currency_account_payload,json=instantCryptoCurrencyAccountPayload,proto3,oneof"`
}

type PaymentAccountPayload_JapanBankAccountPayload struct {
	JapanBankAccountPayload *JapanBankAccountPayload `protobuf:"bytes,28,opt,name=japan_bank_account_payload,json=japanBankAccountPayload,proto3,oneof"`
}

type PaymentAccountPayload_TransferwiseAccountPayload struct {
	TransferwiseAccountPayload *TransferwiseAccountPayload `protobuf:"bytes,29,opt,name=Transferwise_account_payload,json=TransferwiseAccountPayload,proto3,oneof"`
}

type PaymentAccountPayload_AustraliaPayidPayload struct {
	AustraliaPayidPayload *AustraliaPayidPayload `protobuf:"bytes,30,opt,name=australia_payid_payload,json=australiaPayidPayload,proto3,oneof"`
}

type PaymentAccountPayload_AmazonGiftCardAccountPayload struct {
	AmazonGiftCardAccountPayload *AmazonGiftCardAccountPayload `protobuf:"bytes,31,opt,name=amazon_gift_card_account_payload,json=amazonGiftCardAccountPayload,proto3,oneof"`
}

type PaymentAccountPayload_CashByMailAccountPayload struct {
	CashByMailAccountPayload *CashByMailAccountPayload `protobuf:"bytes,32,opt,name=cash_by_mail_account_payload,json=cashByMailAccountPayload,proto3,oneof"`
}

func (*PaymentAccountPayload_AliPayAccountPayload) isPaymentAccountPayload_Message() {}

func (*PaymentAccountPayload_ChaseQuickPayAccountPayload) isPaymentAccountPayload_Message() {}

func (*PaymentAccountPayload_ClearXchangeAccountPayload) isPaymentAccountPayload_Message() {}

func (*PaymentAccountPayload_CountryBasedPaymentAccountPayload) isPaymentAccountPayload_Message() {}

func (*PaymentAccountPayload_CryptoCurrencyAccountPayload) isPaymentAccountPayload_Message() {}

func (*PaymentAccountPayload_FasterPaymentsAccountPayload) isPaymentAccountPayload_Message() {}

func (*PaymentAccountPayload_InteracETransferAccountPayload) isPaymentAccountPayload_Message() {}

func (*PaymentAccountPayload_OKPayAccountPayload) isPaymentAccountPayload_Message() {}

func (*PaymentAccountPayload_PerfectMoneyAccountPayload) isPaymentAccountPayload_Message() {}

func (*PaymentAccountPayload_SwishAccountPayload) isPaymentAccountPayload_Message() {}

func (*PaymentAccountPayload_USPostalMoneyOrderAccountPayload) isPaymentAccountPayload_Message() {}

func (*PaymentAccountPayload_UpholdAccountPayload) isPaymentAccountPayload_Message() {}

func (*PaymentAccountPayload_CashAppAccountPayload) isPaymentAccountPayload_Message() {}

func (*PaymentAccountPayload_MoneyBeamAccountPayload) isPaymentAccountPayload_Message() {}

func (*PaymentAccountPayload_VenmoAccountPayload) isPaymentAccountPayload_Message() {}

func (*PaymentAccountPayload_PopmoneyAccountPayload) isPaymentAccountPayload_Message() {}

func (*PaymentAccountPayload_RevolutAccountPayload) isPaymentAccountPayload_Message() {}

func (*PaymentAccountPayload_WeChatPayAccountPayload) isPaymentAccountPayload_Message() {}

func (*PaymentAccountPayload_MoneyGramAccountPayload) isPaymentAccountPayload_Message() {}

func (*PaymentAccountPayload_HalCashAccountPayload) isPaymentAccountPayload_Message() {}

func (*PaymentAccountPayload_PromptPayAccountPayload) isPaymentAccountPayload_Message() {}

func (*PaymentAccountPayload_AdvancedCashAccountPayload) isPaymentAccountPayload_Message() {}

func (*PaymentAccountPayload_InstantCryptoCurrencyAccountPayload) isPaymentAccountPayload_Message() {}

func (*PaymentAccountPayload_JapanBankAccountPayload) isPaymentAccountPayload_Message() {}

func (*PaymentAccountPayload_TransferwiseAccountPayload) isPaymentAccountPayload_Message() {}

func (*PaymentAccountPayload_AustraliaPayidPayload) isPaymentAccountPayload_Message() {}

func (*PaymentAccountPayload_AmazonGiftCardAccountPayload) isPaymentAccountPayload_Message() {}

func (*PaymentAccountPayload_CashByMailAccountPayload) isPaymentAccountPayload_Message() {}

type AliPayAccountPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountNr string `protobuf:"bytes,1,opt,name=account_nr,json=accountNr,proto3" json:"account_nr,omitempty"`
}

func (x *AliPayAccountPayload) Reset() {
	*x = AliPayAccountPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AliPayAccountPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AliPayAccountPayload) ProtoMessage() {}

func (x *AliPayAccountPayload) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AliPayAccountPayload.ProtoReflect.Descriptor instead.
func (*AliPayAccountPayload) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{88}
}

func (x *AliPayAccountPayload) GetAccountNr() string {
	if x != nil {
		return x.AccountNr
	}
	return ""
}

type WeChatPayAccountPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountNr string `protobuf:"bytes,1,opt,name=account_nr,json=accountNr,proto3" json:"account_nr,omitempty"`
}

func (x *WeChatPayAccountPayload) Reset() {
	*x = WeChatPayAccountPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WeChatPayAccountPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WeChatPayAccountPayload) ProtoMessage() {}

func (x *WeChatPayAccountPayload) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WeChatPayAccountPayload.ProtoReflect.Descriptor instead.
func (*WeChatPayAccountPayload) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{89}
}

func (x *WeChatPayAccountPayload) GetAccountNr() string {
	if x != nil {
		return x.AccountNr
	}
	return ""
}

type ChaseQuickPayAccountPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email      string `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	HolderName string `protobuf:"bytes,2,opt,name=holder_name,json=holderName,proto3" json:"holder_name,omitempty"`
}

func (x *ChaseQuickPayAccountPayload) Reset() {
	*x = ChaseQuickPayAccountPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChaseQuickPayAccountPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChaseQuickPayAccountPayload) ProtoMessage() {}

func (x *ChaseQuickPayAccountPayload) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChaseQuickPayAccountPayload.ProtoReflect.Descriptor instead.
func (*ChaseQuickPayAccountPayload) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{90}
}

func (x *ChaseQuickPayAccountPayload) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *ChaseQuickPayAccountPayload) GetHolderName() string {
	if x != nil {
		return x.HolderName
	}
	return ""
}

type ClearXchangeAccountPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HolderName      string `protobuf:"bytes,1,opt,name=holder_name,json=holderName,proto3" json:"holder_name,omitempty"`
	EmailOrMobileNr string `protobuf:"bytes,2,opt,name=email_or_mobile_nr,json=emailOrMobileNr,proto3" json:"email_or_mobile_nr,omitempty"`
}

func (x *ClearXchangeAccountPayload) Reset() {
	*x = ClearXchangeAccountPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClearXchangeAccountPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClearXchangeAccountPayload) ProtoMessage() {}

func (x *ClearXchangeAccountPayload) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClearXchangeAccountPayload.ProtoReflect.Descriptor instead.
func (*ClearXchangeAccountPayload) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{91}
}

func (x *ClearXchangeAccountPayload) GetHolderName() string {
	if x != nil {
		return x.HolderName
	}
	return ""
}

func (x *ClearXchangeAccountPayload) GetEmailOrMobileNr() string {
	if x != nil {
		return x.EmailOrMobileNr
	}
	return ""
}

type CountryBasedPaymentAccountPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CountryCode string `protobuf:"bytes,1,opt,name=countryCode,proto3" json:"countryCode,omitempty"`
	// Types that are assignable to Message:
	//	*CountryBasedPaymentAccountPayload_BankAccountPayload
	//	*CountryBasedPaymentAccountPayload_CashDepositAccountPayload
	//	*CountryBasedPaymentAccountPayload_SepaAccountPayload
	//	*CountryBasedPaymentAccountPayload_WesternUnionAccountPayload
	//	*CountryBasedPaymentAccountPayload_SepaInstantAccountPayload
	//	*CountryBasedPaymentAccountPayload_F2FAccountPayload
	Message isCountryBasedPaymentAccountPayload_Message `protobuf_oneof:"message"`
}

func (x *CountryBasedPaymentAccountPayload) Reset() {
	*x = CountryBasedPaymentAccountPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountryBasedPaymentAccountPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountryBasedPaymentAccountPayload) ProtoMessage() {}

func (x *CountryBasedPaymentAccountPayload) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountryBasedPaymentAccountPayload.ProtoReflect.Descriptor instead.
func (*CountryBasedPaymentAccountPayload) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{92}
}

func (x *CountryBasedPaymentAccountPayload) GetCountryCode() string {
	if x != nil {
		return x.CountryCode
	}
	return ""
}

func (m *CountryBasedPaymentAccountPayload) GetMessage() isCountryBasedPaymentAccountPayload_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (x *CountryBasedPaymentAccountPayload) GetBankAccountPayload() *BankAccountPayload {
	if x, ok := x.GetMessage().(*CountryBasedPaymentAccountPayload_BankAccountPayload); ok {
		return x.BankAccountPayload
	}
	return nil
}

func (x *CountryBasedPaymentAccountPayload) GetCashDepositAccountPayload() *CashDepositAccountPayload {
	if x, ok := x.GetMessage().(*CountryBasedPaymentAccountPayload_CashDepositAccountPayload); ok {
		return x.CashDepositAccountPayload
	}
	return nil
}

func (x *CountryBasedPaymentAccountPayload) GetSepaAccountPayload() *SepaAccountPayload {
	if x, ok := x.GetMessage().(*CountryBasedPaymentAccountPayload_SepaAccountPayload); ok {
		return x.SepaAccountPayload
	}
	return nil
}

func (x *CountryBasedPaymentAccountPayload) GetWesternUnionAccountPayload() *WesternUnionAccountPayload {
	if x, ok := x.GetMessage().(*CountryBasedPaymentAccountPayload_WesternUnionAccountPayload); ok {
		return x.WesternUnionAccountPayload
	}
	return nil
}

func (x *CountryBasedPaymentAccountPayload) GetSepaInstantAccountPayload() *SepaInstantAccountPayload {
	if x, ok := x.GetMessage().(*CountryBasedPaymentAccountPayload_SepaInstantAccountPayload); ok {
		return x.SepaInstantAccountPayload
	}
	return nil
}

func (x *CountryBasedPaymentAccountPayload) GetF2FAccountPayload() *F2FAccountPayload {
	if x, ok := x.GetMessage().(*CountryBasedPaymentAccountPayload_F2FAccountPayload); ok {
		return x.F2FAccountPayload
	}
	return nil
}

type isCountryBasedPaymentAccountPayload_Message interface {
	isCountryBasedPaymentAccountPayload_Message()
}

type CountryBasedPaymentAccountPayload_BankAccountPayload struct {
	BankAccountPayload *BankAccountPayload `protobuf:"bytes,2,opt,name=bank_account_payload,json=bankAccountPayload,proto3,oneof"`
}

type CountryBasedPaymentAccountPayload_CashDepositAccountPayload struct {
	CashDepositAccountPayload *CashDepositAccountPayload `protobuf:"bytes,3,opt,name=cash_deposit_account_payload,json=cashDepositAccountPayload,proto3,oneof"`
}

type CountryBasedPaymentAccountPayload_SepaAccountPayload struct {
	SepaAccountPayload *SepaAccountPayload `protobuf:"bytes,4,opt,name=sepa_account_payload,json=sepaAccountPayload,proto3,oneof"`
}

type CountryBasedPaymentAccountPayload_WesternUnionAccountPayload struct {
	WesternUnionAccountPayload *WesternUnionAccountPayload `protobuf:"bytes,5,opt,name=western_union_account_payload,json=westernUnionAccountPayload,proto3,oneof"`
}

type CountryBasedPaymentAccountPayload_SepaInstantAccountPayload struct {
	SepaInstantAccountPayload *SepaInstantAccountPayload `protobuf:"bytes,6,opt,name=sepa_instant_account_payload,json=sepaInstantAccountPayload,proto3,oneof"`
}

type CountryBasedPaymentAccountPayload_F2FAccountPayload struct {
	F2FAccountPayload *F2FAccountPayload `protobuf:"bytes,7,opt,name=f2f_account_payload,json=f2fAccountPayload,proto3,oneof"`
}

func (*CountryBasedPaymentAccountPayload_BankAccountPayload) isCountryBasedPaymentAccountPayload_Message() {
}

func (*CountryBasedPaymentAccountPayload_CashDepositAccountPayload) isCountryBasedPaymentAccountPayload_Message() {
}

func (*CountryBasedPaymentAccountPayload_SepaAccountPayload) isCountryBasedPaymentAccountPayload_Message() {
}

func (*CountryBasedPaymentAccountPayload_WesternUnionAccountPayload) isCountryBasedPaymentAccountPayload_Message() {
}

func (*CountryBasedPaymentAccountPayload_SepaInstantAccountPayload) isCountryBasedPaymentAccountPayload_Message() {
}

func (*CountryBasedPaymentAccountPayload_F2FAccountPayload) isCountryBasedPaymentAccountPayload_Message() {
}

type BankAccountPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HolderName  string `protobuf:"bytes,1,opt,name=holder_name,json=holderName,proto3" json:"holder_name,omitempty"`
	BankName    string `protobuf:"bytes,2,opt,name=bank_name,json=bankName,proto3" json:"bank_name,omitempty"`
	BankId      string `protobuf:"bytes,3,opt,name=bank_id,json=bankId,proto3" json:"bank_id,omitempty"`
	BranchId    string `protobuf:"bytes,4,opt,name=branch_id,json=branchId,proto3" json:"branch_id,omitempty"`
	AccountNr   string `protobuf:"bytes,5,opt,name=account_nr,json=accountNr,proto3" json:"account_nr,omitempty"`
	AccountType string `protobuf:"bytes,6,opt,name=account_type,json=accountType,proto3" json:"account_type,omitempty"`
	HolderTaxId string `protobuf:"bytes,7,opt,name=holder_tax_id,json=holderTaxId,proto3" json:"holder_tax_id,omitempty"`
	// Deprecated: Do not use.
	Email string `protobuf:"bytes,8,opt,name=email,proto3" json:"email,omitempty"`
	// Types that are assignable to Message:
	//	*BankAccountPayload_NationalBankAccountPayload
	//	*BankAccountPayload_SameBankAccontPayload
	//	*BankAccountPayload_SpecificBanksAccountPayload
	Message           isBankAccountPayload_Message `protobuf_oneof:"message"`
	NationalAccountId string                       `protobuf:"bytes,12,opt,name=national_account_id,json=nationalAccountId,proto3" json:"national_account_id,omitempty"`
}

func (x *BankAccountPayload) Reset() {
	*x = BankAccountPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BankAccountPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BankAccountPayload) ProtoMessage() {}

func (x *BankAccountPayload) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BankAccountPayload.ProtoReflect.Descriptor instead.
func (*BankAccountPayload) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{93}
}

func (x *BankAccountPayload) GetHolderName() string {
	if x != nil {
		return x.HolderName
	}
	return ""
}

func (x *BankAccountPayload) GetBankName() string {
	if x != nil {
		return x.BankName
	}
	return ""
}

func (x *BankAccountPayload) GetBankId() string {
	if x != nil {
		return x.BankId
	}
	return ""
}

func (x *BankAccountPayload) GetBranchId() string {
	if x != nil {
		return x.BranchId
	}
	return ""
}

func (x *BankAccountPayload) GetAccountNr() string {
	if x != nil {
		return x.AccountNr
	}
	return ""
}

func (x *BankAccountPayload) GetAccountType() string {
	if x != nil {
		return x.AccountType
	}
	return ""
}

func (x *BankAccountPayload) GetHolderTaxId() string {
	if x != nil {
		return x.HolderTaxId
	}
	return ""
}

// Deprecated: Do not use.
func (x *BankAccountPayload) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (m *BankAccountPayload) GetMessage() isBankAccountPayload_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (x *BankAccountPayload) GetNationalBankAccountPayload() *NationalBankAccountPayload {
	if x, ok := x.GetMessage().(*BankAccountPayload_NationalBankAccountPayload); ok {
		return x.NationalBankAccountPayload
	}
	return nil
}

func (x *BankAccountPayload) GetSameBankAccontPayload() *SameBankAccountPayload {
	if x, ok := x.GetMessage().(*BankAccountPayload_SameBankAccontPayload); ok {
		return x.SameBankAccontPayload
	}
	return nil
}

func (x *BankAccountPayload) GetSpecificBanksAccountPayload() *SpecificBanksAccountPayload {
	if x, ok := x.GetMessage().(*BankAccountPayload_SpecificBanksAccountPayload); ok {
		return x.SpecificBanksAccountPayload
	}
	return nil
}

func (x *BankAccountPayload) GetNationalAccountId() string {
	if x != nil {
		return x.NationalAccountId
	}
	return ""
}

type isBankAccountPayload_Message interface {
	isBankAccountPayload_Message()
}

type BankAccountPayload_NationalBankAccountPayload struct {
	NationalBankAccountPayload *NationalBankAccountPayload `protobuf:"bytes,9,opt,name=national_bank_account_payload,json=nationalBankAccountPayload,proto3,oneof"`
}

type BankAccountPayload_SameBankAccontPayload struct {
	SameBankAccontPayload *SameBankAccountPayload `protobuf:"bytes,10,opt,name=same_bank_accont_payload,json=sameBankAccontPayload,proto3,oneof"`
}

type BankAccountPayload_SpecificBanksAccountPayload struct {
	SpecificBanksAccountPayload *SpecificBanksAccountPayload `protobuf:"bytes,11,opt,name=specific_banks_account_payload,json=specificBanksAccountPayload,proto3,oneof"`
}

func (*BankAccountPayload_NationalBankAccountPayload) isBankAccountPayload_Message() {}

func (*BankAccountPayload_SameBankAccontPayload) isBankAccountPayload_Message() {}

func (*BankAccountPayload_SpecificBanksAccountPayload) isBankAccountPayload_Message() {}

type NationalBankAccountPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NationalBankAccountPayload) Reset() {
	*x = NationalBankAccountPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NationalBankAccountPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NationalBankAccountPayload) ProtoMessage() {}

func (x *NationalBankAccountPayload) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NationalBankAccountPayload.ProtoReflect.Descriptor instead.
func (*NationalBankAccountPayload) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{94}
}

type SameBankAccountPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SameBankAccountPayload) Reset() {
	*x = SameBankAccountPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SameBankAccountPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SameBankAccountPayload) ProtoMessage() {}

func (x *SameBankAccountPayload) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SameBankAccountPayload.ProtoReflect.Descriptor instead.
func (*SameBankAccountPayload) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{95}
}

type JapanBankAccountPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BankName          string `protobuf:"bytes,1,opt,name=bank_name,json=bankName,proto3" json:"bank_name,omitempty"`
	BankCode          string `protobuf:"bytes,2,opt,name=bank_code,json=bankCode,proto3" json:"bank_code,omitempty"`
	BankBranchName    string `protobuf:"bytes,3,opt,name=bank_branch_name,json=bankBranchName,proto3" json:"bank_branch_name,omitempty"`
	BankBranchCode    string `protobuf:"bytes,4,opt,name=bank_branch_code,json=bankBranchCode,proto3" json:"bank_branch_code,omitempty"`
	BankAccountType   string `protobuf:"bytes,5,opt,name=bank_account_type,json=bankAccountType,proto3" json:"bank_account_type,omitempty"`
	BankAccountName   string `protobuf:"bytes,6,opt,name=bank_account_name,json=bankAccountName,proto3" json:"bank_account_name,omitempty"`
	BankAccountNumber string `protobuf:"bytes,7,opt,name=bank_account_number,json=bankAccountNumber,proto3" json:"bank_account_number,omitempty"`
}

func (x *JapanBankAccountPayload) Reset() {
	*x = JapanBankAccountPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JapanBankAccountPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JapanBankAccountPayload) ProtoMessage() {}

func (x *JapanBankAccountPayload) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JapanBankAccountPayload.ProtoReflect.Descriptor instead.
func (*JapanBankAccountPayload) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{96}
}

func (x *JapanBankAccountPayload) GetBankName() string {
	if x != nil {
		return x.BankName
	}
	return ""
}

func (x *JapanBankAccountPayload) GetBankCode() string {
	if x != nil {
		return x.BankCode
	}
	return ""
}

func (x *JapanBankAccountPayload) GetBankBranchName() string {
	if x != nil {
		return x.BankBranchName
	}
	return ""
}

func (x *JapanBankAccountPayload) GetBankBranchCode() string {
	if x != nil {
		return x.BankBranchCode
	}
	return ""
}

func (x *JapanBankAccountPayload) GetBankAccountType() string {
	if x != nil {
		return x.BankAccountType
	}
	return ""
}

func (x *JapanBankAccountPayload) GetBankAccountName() string {
	if x != nil {
		return x.BankAccountName
	}
	return ""
}

func (x *JapanBankAccountPayload) GetBankAccountNumber() string {
	if x != nil {
		return x.BankAccountNumber
	}
	return ""
}

type AustraliaPayidPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BankAccountName string `protobuf:"bytes,1,opt,name=bank_account_name,json=bankAccountName,proto3" json:"bank_account_name,omitempty"`
	Payid           string `protobuf:"bytes,2,opt,name=payid,proto3" json:"payid,omitempty"`
}

func (x *AustraliaPayidPayload) Reset() {
	*x = AustraliaPayidPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AustraliaPayidPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AustraliaPayidPayload) ProtoMessage() {}

func (x *AustraliaPayidPayload) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AustraliaPayidPayload.ProtoReflect.Descriptor instead.
func (*AustraliaPayidPayload) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{97}
}

func (x *AustraliaPayidPayload) GetBankAccountName() string {
	if x != nil {
		return x.BankAccountName
	}
	return ""
}

func (x *AustraliaPayidPayload) GetPayid() string {
	if x != nil {
		return x.Payid
	}
	return ""
}

type SpecificBanksAccountPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AcceptedBanks []string `protobuf:"bytes,1,rep,name=accepted_banks,json=acceptedBanks,proto3" json:"accepted_banks,omitempty"`
}

func (x *SpecificBanksAccountPayload) Reset() {
	*x = SpecificBanksAccountPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpecificBanksAccountPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecificBanksAccountPayload) ProtoMessage() {}

func (x *SpecificBanksAccountPayload) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecificBanksAccountPayload.ProtoReflect.Descriptor instead.
func (*SpecificBanksAccountPayload) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{98}
}

func (x *SpecificBanksAccountPayload) GetAcceptedBanks() []string {
	if x != nil {
		return x.AcceptedBanks
	}
	return nil
}

type CashDepositAccountPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HolderName        string `protobuf:"bytes,1,opt,name=holder_name,json=holderName,proto3" json:"holder_name,omitempty"`
	HolderEmail       string `protobuf:"bytes,2,opt,name=holder_email,json=holderEmail,proto3" json:"holder_email,omitempty"`
	BankName          string `protobuf:"bytes,3,opt,name=bank_name,json=bankName,proto3" json:"bank_name,omitempty"`
	BankId            string `protobuf:"bytes,4,opt,name=bank_id,json=bankId,proto3" json:"bank_id,omitempty"`
	BranchId          string `protobuf:"bytes,5,opt,name=branch_id,json=branchId,proto3" json:"branch_id,omitempty"`
	AccountNr         string `protobuf:"bytes,6,opt,name=account_nr,json=accountNr,proto3" json:"account_nr,omitempty"`
	AccountType       string `protobuf:"bytes,7,opt,name=account_type,json=accountType,proto3" json:"account_type,omitempty"`
	Requirements      string `protobuf:"bytes,8,opt,name=requirements,proto3" json:"requirements,omitempty"`
	HolderTaxId       string `protobuf:"bytes,9,opt,name=holder_tax_id,json=holderTaxId,proto3" json:"holder_tax_id,omitempty"`
	NationalAccountId string `protobuf:"bytes,10,opt,name=national_account_id,json=nationalAccountId,proto3" json:"national_account_id,omitempty"`
}

func (x *CashDepositAccountPayload) Reset() {
	*x = CashDepositAccountPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CashDepositAccountPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CashDepositAccountPayload) ProtoMessage() {}

func (x *CashDepositAccountPayload) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CashDepositAccountPayload.ProtoReflect.Descriptor instead.
func (*CashDepositAccountPayload) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{99}
}

func (x *CashDepositAccountPayload) GetHolderName() string {
	if x != nil {
		return x.HolderName
	}
	return ""
}

func (x *CashDepositAccountPayload) GetHolderEmail() string {
	if x != nil {
		return x.HolderEmail
	}
	return ""
}

func (x *CashDepositAccountPayload) GetBankName() string {
	if x != nil {
		return x.BankName
	}
	return ""
}

func (x *CashDepositAccountPayload) GetBankId() string {
	if x != nil {
		return x.BankId
	}
	return ""
}

func (x *CashDepositAccountPayload) GetBranchId() string {
	if x != nil {
		return x.BranchId
	}
	return ""
}

func (x *CashDepositAccountPayload) GetAccountNr() string {
	if x != nil {
		return x.AccountNr
	}
	return ""
}

func (x *CashDepositAccountPayload) GetAccountType() string {
	if x != nil {
		return x.AccountType
	}
	return ""
}

func (x *CashDepositAccountPayload) GetRequirements() string {
	if x != nil {
		return x.Requirements
	}
	return ""
}

func (x *CashDepositAccountPayload) GetHolderTaxId() string {
	if x != nil {
		return x.HolderTaxId
	}
	return ""
}

func (x *CashDepositAccountPayload) GetNationalAccountId() string {
	if x != nil {
		return x.NationalAccountId
	}
	return ""
}

type MoneyGramAccountPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HolderName  string `protobuf:"bytes,1,opt,name=holder_name,json=holderName,proto3" json:"holder_name,omitempty"`
	CountryCode string `protobuf:"bytes,2,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"`
	State       string `protobuf:"bytes,3,opt,name=state,proto3" json:"state,omitempty"`
	Email       string `protobuf:"bytes,4,opt,name=email,proto3" json:"email,omitempty"`
}

func (x *MoneyGramAccountPayload) Reset() {
	*x = MoneyGramAccountPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoneyGramAccountPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoneyGramAccountPayload) ProtoMessage() {}

func (x *MoneyGramAccountPayload) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoneyGramAccountPayload.ProtoReflect.Descriptor instead.
func (*MoneyGramAccountPayload) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{100}
}

func (x *MoneyGramAccountPayload) GetHolderName() string {
	if x != nil {
		return x.HolderName
	}
	return ""
}

func (x *MoneyGramAccountPayload) GetCountryCode() string {
	if x != nil {
		return x.CountryCode
	}
	return ""
}

func (x *MoneyGramAccountPayload) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *MoneyGramAccountPayload) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

type HalCashAccountPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MobileNr string `protobuf:"bytes,1,opt,name=mobile_nr,json=mobileNr,proto3" json:"mobile_nr,omitempty"`
}

func (x *HalCashAccountPayload) Reset() {
	*x = HalCashAccountPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HalCashAccountPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HalCashAccountPayload) ProtoMessage() {}

func (x *HalCashAccountPayload) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HalCashAccountPayload.ProtoReflect.Descriptor instead.
func (*HalCashAccountPayload) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{101}
}

func (x *HalCashAccountPayload) GetMobileNr() string {
	if x != nil {
		return x.MobileNr
	}
	return ""
}

type WesternUnionAccountPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HolderName string `protobuf:"bytes,1,opt,name=holder_name,json=holderName,proto3" json:"holder_name,omitempty"`
	City       string `protobuf:"bytes,2,opt,name=city,proto3" json:"city,omitempty"`
	State      string `protobuf:"bytes,3,opt,name=state,proto3" json:"state,omitempty"`
	Email      string `protobuf:"bytes,4,opt,name=email,proto3" json:"email,omitempty"`
}

func (x *WesternUnionAccountPayload) Reset() {
	*x = WesternUnionAccountPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WesternUnionAccountPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WesternUnionAccountPayload) ProtoMessage() {}

func (x *WesternUnionAccountPayload) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WesternUnionAccountPayload.ProtoReflect.Descriptor instead.
func (*WesternUnionAccountPayload) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{102}
}

func (x *WesternUnionAccountPayload) GetHolderName() string {
	if x != nil {
		return x.HolderName
	}
	return ""
}

func (x *WesternUnionAccountPayload) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *WesternUnionAccountPayload) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *WesternUnionAccountPayload) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

type AmazonGiftCardAccountPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EmailOrMobileNr string `protobuf:"bytes,1,opt,name=email_or_mobile_nr,json=emailOrMobileNr,proto3" json:"email_or_mobile_nr,omitempty"`
	CountryCode     string `protobuf:"bytes,2,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"`
}

func (x *AmazonGiftCardAccountPayload) Reset() {
	*x = AmazonGiftCardAccountPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AmazonGiftCardAccountPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AmazonGiftCardAccountPayload) ProtoMessage() {}

func (x *AmazonGiftCardAccountPayload) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AmazonGiftCardAccountPayload.ProtoReflect.Descriptor instead.
func (*AmazonGiftCardAccountPayload) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{103}
}

func (x *AmazonGiftCardAccountPayload) GetEmailOrMobileNr() string {
	if x != nil {
		return x.EmailOrMobileNr
	}
	return ""
}

func (x *AmazonGiftCardAccountPayload) GetCountryCode() string {
	if x != nil {
		return x.CountryCode
	}
	return ""
}

type SepaAccountPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HolderName string `protobuf:"bytes,1,opt,name=holder_name,json=holderName,proto3" json:"holder_name,omitempty"`
	Iban       string `protobuf:"bytes,2,opt,name=iban,proto3" json:"iban,omitempty"`
	Bic        string `protobuf:"bytes,3,opt,name=bic,proto3" json:"bic,omitempty"`
	// Deprecated: Do not use.
	Email                string   `protobuf:"bytes,4,opt,name=email,proto3" json:"email,omitempty"`
	AcceptedCountryCodes []string `protobuf:"bytes,5,rep,name=accepted_country_codes,json=acceptedCountryCodes,proto3" json:"accepted_country_codes,omitempty"`
}

func (x *SepaAccountPayload) Reset() {
	*x = SepaAccountPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SepaAccountPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SepaAccountPayload) ProtoMessage() {}

func (x *SepaAccountPayload) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SepaAccountPayload.ProtoReflect.Descriptor instead.
func (*SepaAccountPayload) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{104}
}

func (x *SepaAccountPayload) GetHolderName() string {
	if x != nil {
		return x.HolderName
	}
	return ""
}

func (x *SepaAccountPayload) GetIban() string {
	if x != nil {
		return x.Iban
	}
	return ""
}

func (x *SepaAccountPayload) GetBic() string {
	if x != nil {
		return x.Bic
	}
	return ""
}

// Deprecated: Do not use.
func (x *SepaAccountPayload) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *SepaAccountPayload) GetAcceptedCountryCodes() []string {
	if x != nil {
		return x.AcceptedCountryCodes
	}
	return nil
}

type SepaInstantAccountPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HolderName           string   `protobuf:"bytes,1,opt,name=holder_name,json=holderName,proto3" json:"holder_name,omitempty"`
	Iban                 string   `protobuf:"bytes,2,opt,name=iban,proto3" json:"iban,omitempty"`
	Bic                  string   `protobuf:"bytes,3,opt,name=bic,proto3" json:"bic,omitempty"`
	AcceptedCountryCodes []string `protobuf:"bytes,4,rep,name=accepted_country_codes,json=acceptedCountryCodes,proto3" json:"accepted_country_codes,omitempty"`
}

func (x *SepaInstantAccountPayload) Reset() {
	*x = SepaInstantAccountPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SepaInstantAccountPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SepaInstantAccountPayload) ProtoMessage() {}

func (x *SepaInstantAccountPayload) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SepaInstantAccountPayload.ProtoReflect.Descriptor instead.
func (*SepaInstantAccountPayload) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{105}
}

func (x *SepaInstantAccountPayload) GetHolderName() string {
	if x != nil {
		return x.HolderName
	}
	return ""
}

func (x *SepaInstantAccountPayload) GetIban() string {
	if x != nil {
		return x.Iban
	}
	return ""
}

func (x *SepaInstantAccountPayload) GetBic() string {
	if x != nil {
		return x.Bic
	}
	return ""
}

func (x *SepaInstantAccountPayload) GetAcceptedCountryCodes() []string {
	if x != nil {
		return x.AcceptedCountryCodes
	}
	return nil
}

type CryptoCurrencyAccountPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *CryptoCurrencyAccountPayload) Reset() {
	*x = CryptoCurrencyAccountPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CryptoCurrencyAccountPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CryptoCurrencyAccountPayload) ProtoMessage() {}

func (x *CryptoCurrencyAccountPayload) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CryptoCurrencyAccountPayload.ProtoReflect.Descriptor instead.
func (*CryptoCurrencyAccountPayload) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{106}
}

func (x *CryptoCurrencyAccountPayload) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type InstantCryptoCurrencyAccountPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *InstantCryptoCurrencyAccountPayload) Reset() {
	*x = InstantCryptoCurrencyAccountPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstantCryptoCurrencyAccountPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstantCryptoCurrencyAccountPayload) ProtoMessage() {}

func (x *InstantCryptoCurrencyAccountPayload) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstantCryptoCurrencyAccountPayload.ProtoReflect.Descriptor instead.
func (*InstantCryptoCurrencyAccountPayload) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{107}
}

func (x *InstantCryptoCurrencyAccountPayload) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type FasterPaymentsAccountPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SortCode  string `protobuf:"bytes,1,opt,name=sort_code,json=sortCode,proto3" json:"sort_code,omitempty"`
	AccountNr string `protobuf:"bytes,2,opt,name=account_nr,json=accountNr,proto3" json:"account_nr,omitempty"`
	// Deprecated: Do not use.
	Email string `protobuf:"bytes,3,opt,name=email,proto3" json:"email,omitempty"`
}

func (x *FasterPaymentsAccountPayload) Reset() {
	*x = FasterPaymentsAccountPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FasterPaymentsAccountPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FasterPaymentsAccountPayload) ProtoMessage() {}

func (x *FasterPaymentsAccountPayload) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FasterPaymentsAccountPayload.ProtoReflect.Descriptor instead.
func (*FasterPaymentsAccountPayload) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{108}
}

func (x *FasterPaymentsAccountPayload) GetSortCode() string {
	if x != nil {
		return x.SortCode
	}
	return ""
}

func (x *FasterPaymentsAccountPayload) GetAccountNr() string {
	if x != nil {
		return x.AccountNr
	}
	return ""
}

// Deprecated: Do not use.
func (x *FasterPaymentsAccountPayload) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

type InteracETransferAccountPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email      string `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	HolderName string `protobuf:"bytes,2,opt,name=holder_name,json=holderName,proto3" json:"holder_name,omitempty"`
	Question   string `protobuf:"bytes,3,opt,name=question,proto3" json:"question,omitempty"`
	Answer     string `protobuf:"bytes,4,opt,name=answer,proto3" json:"answer,omitempty"`
}

func (x *InteracETransferAccountPayload) Reset() {
	*x = InteracETransferAccountPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InteracETransferAccountPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InteracETransferAccountPayload) ProtoMessage() {}

func (x *InteracETransferAccountPayload) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InteracETransferAccountPayload.ProtoReflect.Descriptor instead.
func (*InteracETransferAccountPayload) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{109}
}

func (x *InteracETransferAccountPayload) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *InteracETransferAccountPayload) GetHolderName() string {
	if x != nil {
		return x.HolderName
	}
	return ""
}

func (x *InteracETransferAccountPayload) GetQuestion() string {
	if x != nil {
		return x.Question
	}
	return ""
}

func (x *InteracETransferAccountPayload) GetAnswer() string {
	if x != nil {
		return x.Answer
	}
	return ""
}

// Deprecated, not used anymore
type OKPayAccountPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountNr string `protobuf:"bytes,1,opt,name=account_nr,json=accountNr,proto3" json:"account_nr,omitempty"`
}

func (x *OKPayAccountPayload) Reset() {
	*x = OKPayAccountPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OKPayAccountPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OKPayAccountPayload) ProtoMessage() {}

func (x *OKPayAccountPayload) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OKPayAccountPayload.ProtoReflect.Descriptor instead.
func (*OKPayAccountPayload) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{110}
}

func (x *OKPayAccountPayload) GetAccountNr() string {
	if x != nil {
		return x.AccountNr
	}
	return ""
}

type UpholdAccountPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
}

func (x *UpholdAccountPayload) Reset() {
	*x = UpholdAccountPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpholdAccountPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpholdAccountPayload) ProtoMessage() {}

func (x *UpholdAccountPayload) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpholdAccountPayload.ProtoReflect.Descriptor instead.
func (*UpholdAccountPayload) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{111}
}

func (x *UpholdAccountPayload) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

// Deprecated, not used anymore
type CashAppAccountPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CashTag string `protobuf:"bytes,1,opt,name=cash_tag,json=cashTag,proto3" json:"cash_tag,omitempty"`
}

func (x *CashAppAccountPayload) Reset() {
	*x = CashAppAccountPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CashAppAccountPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CashAppAccountPayload) ProtoMessage() {}

func (x *CashAppAccountPayload) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CashAppAccountPayload.ProtoReflect.Descriptor instead.
func (*CashAppAccountPayload) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{112}
}

func (x *CashAppAccountPayload) GetCashTag() string {
	if x != nil {
		return x.CashTag
	}
	return ""
}

type MoneyBeamAccountPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
}

func (x *MoneyBeamAccountPayload) Reset() {
	*x = MoneyBeamAccountPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoneyBeamAccountPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoneyBeamAccountPayload) ProtoMessage() {}

func (x *MoneyBeamAccountPayload) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoneyBeamAccountPayload.ProtoReflect.Descriptor instead.
func (*MoneyBeamAccountPayload) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{113}
}

func (x *MoneyBeamAccountPayload) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

// Deprecated, not used anymore
type VenmoAccountPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VenmoUserName string `protobuf:"bytes,1,opt,name=venmo_user_name,json=venmoUserName,proto3" json:"venmo_user_name,omitempty"`
	HolderName    string `protobuf:"bytes,2,opt,name=holder_name,json=holderName,proto3" json:"holder_name,omitempty"`
}

func (x *VenmoAccountPayload) Reset() {
	*x = VenmoAccountPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VenmoAccountPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VenmoAccountPayload) ProtoMessage() {}

func (x *VenmoAccountPayload) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VenmoAccountPayload.ProtoReflect.Descriptor instead.
func (*VenmoAccountPayload) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{114}
}

func (x *VenmoAccountPayload) GetVenmoUserName() string {
	if x != nil {
		return x.VenmoUserName
	}
	return ""
}

func (x *VenmoAccountPayload) GetHolderName() string {
	if x != nil {
		return x.HolderName
	}
	return ""
}

type PopmoneyAccountPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId  string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	HolderName string `protobuf:"bytes,2,opt,name=holder_name,json=holderName,proto3" json:"holder_name,omitempty"`
}

func (x *PopmoneyAccountPayload) Reset() {
	*x = PopmoneyAccountPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PopmoneyAccountPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PopmoneyAccountPayload) ProtoMessage() {}

func (x *PopmoneyAccountPayload) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PopmoneyAccountPayload.ProtoReflect.Descriptor instead.
func (*PopmoneyAccountPayload) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{115}
}

func (x *PopmoneyAccountPayload) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *PopmoneyAccountPayload) GetHolderName() string {
	if x != nil {
		return x.HolderName
	}
	return ""
}

type RevolutAccountPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	UserName  string `protobuf:"bytes,2,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
}

func (x *RevolutAccountPayload) Reset() {
	*x = RevolutAccountPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RevolutAccountPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevolutAccountPayload) ProtoMessage() {}

func (x *RevolutAccountPayload) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevolutAccountPayload.ProtoReflect.Descriptor instead.
func (*RevolutAccountPayload) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{116}
}

func (x *RevolutAccountPayload) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *RevolutAccountPayload) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

type PerfectMoneyAccountPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountNr string `protobuf:"bytes,1,opt,name=account_nr,json=accountNr,proto3" json:"account_nr,omitempty"`
}

func (x *PerfectMoneyAccountPayload) Reset() {
	*x = PerfectMoneyAccountPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PerfectMoneyAccountPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PerfectMoneyAccountPayload) ProtoMessage() {}

func (x *PerfectMoneyAccountPayload) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PerfectMoneyAccountPayload.ProtoReflect.Descriptor instead.
func (*PerfectMoneyAccountPayload) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{117}
}

func (x *PerfectMoneyAccountPayload) GetAccountNr() string {
	if x != nil {
		return x.AccountNr
	}
	return ""
}

type SwishAccountPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MobileNr   string `protobuf:"bytes,1,opt,name=mobile_nr,json=mobileNr,proto3" json:"mobile_nr,omitempty"`
	HolderName string `protobuf:"bytes,2,opt,name=holder_name,json=holderName,proto3" json:"holder_name,omitempty"`
}

func (x *SwishAccountPayload) Reset() {
	*x = SwishAccountPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwishAccountPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwishAccountPayload) ProtoMessage() {}

func (x *SwishAccountPayload) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwishAccountPayload.ProtoReflect.Descriptor instead.
func (*SwishAccountPayload) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{118}
}

func (x *SwishAccountPayload) GetMobileNr() string {
	if x != nil {
		return x.MobileNr
	}
	return ""
}

func (x *SwishAccountPayload) GetHolderName() string {
	if x != nil {
		return x.HolderName
	}
	return ""
}

type USPostalMoneyOrderAccountPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PostalAddress string `protobuf:"bytes,1,opt,name=postal_address,json=postalAddress,proto3" json:"postal_address,omitempty"`
	HolderName    string `protobuf:"bytes,2,opt,name=holder_name,json=holderName,proto3" json:"holder_name,omitempty"`
}

func (x *USPostalMoneyOrderAccountPayload) Reset() {
	*x = USPostalMoneyOrderAccountPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USPostalMoneyOrderAccountPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USPostalMoneyOrderAccountPayload) ProtoMessage() {}

func (x *USPostalMoneyOrderAccountPayload) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USPostalMoneyOrderAccountPayload.ProtoReflect.Descriptor instead.
func (*USPostalMoneyOrderAccountPayload) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{119}
}

func (x *USPostalMoneyOrderAccountPayload) GetPostalAddress() string {
	if x != nil {
		return x.PostalAddress
	}
	return ""
}

func (x *USPostalMoneyOrderAccountPayload) GetHolderName() string {
	if x != nil {
		return x.HolderName
	}
	return ""
}

type F2FAccountPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Contact   string `protobuf:"bytes,1,opt,name=contact,proto3" json:"contact,omitempty"`
	City      string `protobuf:"bytes,2,opt,name=city,proto3" json:"city,omitempty"`
	ExtraInfo string `protobuf:"bytes,3,opt,name=extra_info,json=extraInfo,proto3" json:"extra_info,omitempty"`
}

func (x *F2FAccountPayload) Reset() {
	*x = F2FAccountPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *F2FAccountPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*F2FAccountPayload) ProtoMessage() {}

func (x *F2FAccountPayload) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use F2FAccountPayload.ProtoReflect.Descriptor instead.
func (*F2FAccountPayload) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{120}
}

func (x *F2FAccountPayload) GetContact() string {
	if x != nil {
		return x.Contact
	}
	return ""
}

func (x *F2FAccountPayload) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *F2FAccountPayload) GetExtraInfo() string {
	if x != nil {
		return x.ExtraInfo
	}
	return ""
}

type CashByMailAccountPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PostalAddress string `protobuf:"bytes,1,opt,name=postal_address,json=postalAddress,proto3" json:"postal_address,omitempty"`
	Contact       string `protobuf:"bytes,2,opt,name=contact,proto3" json:"contact,omitempty"`
	ExtraInfo     string `protobuf:"bytes,3,opt,name=extra_info,json=extraInfo,proto3" json:"extra_info,omitempty"`
}

func (x *CashByMailAccountPayload) Reset() {
	*x = CashByMailAccountPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CashByMailAccountPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CashByMailAccountPayload) ProtoMessage() {}

func (x *CashByMailAccountPayload) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CashByMailAccountPayload.ProtoReflect.Descriptor instead.
func (*CashByMailAccountPayload) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{121}
}

func (x *CashByMailAccountPayload) GetPostalAddress() string {
	if x != nil {
		return x.PostalAddress
	}
	return ""
}

func (x *CashByMailAccountPayload) GetContact() string {
	if x != nil {
		return x.Contact
	}
	return ""
}

func (x *CashByMailAccountPayload) GetExtraInfo() string {
	if x != nil {
		return x.ExtraInfo
	}
	return ""
}

type PromptPayAccountPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PromptPayId string `protobuf:"bytes,1,opt,name=prompt_pay_id,json=promptPayId,proto3" json:"prompt_pay_id,omitempty"`
}

func (x *PromptPayAccountPayload) Reset() {
	*x = PromptPayAccountPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PromptPayAccountPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PromptPayAccountPayload) ProtoMessage() {}

func (x *PromptPayAccountPayload) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PromptPayAccountPayload.ProtoReflect.Descriptor instead.
func (*PromptPayAccountPayload) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{122}
}

func (x *PromptPayAccountPayload) GetPromptPayId() string {
	if x != nil {
		return x.PromptPayId
	}
	return ""
}

type AdvancedCashAccountPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountNr string `protobuf:"bytes,1,opt,name=account_nr,json=accountNr,proto3" json:"account_nr,omitempty"`
}

func (x *AdvancedCashAccountPayload) Reset() {
	*x = AdvancedCashAccountPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdvancedCashAccountPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdvancedCashAccountPayload) ProtoMessage() {}

func (x *AdvancedCashAccountPayload) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdvancedCashAccountPayload.ProtoReflect.Descriptor instead.
func (*AdvancedCashAccountPayload) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{123}
}

func (x *AdvancedCashAccountPayload) GetAccountNr() string {
	if x != nil {
		return x.AccountNr
	}
	return ""
}

type TransferwiseAccountPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email string `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
}

func (x *TransferwiseAccountPayload) Reset() {
	*x = TransferwiseAccountPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferwiseAccountPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferwiseAccountPayload) ProtoMessage() {}

func (x *TransferwiseAccountPayload) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferwiseAccountPayload.ProtoReflect.Descriptor instead.
func (*TransferwiseAccountPayload) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{124}
}

func (x *TransferwiseAccountPayload) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

// Those are persisted to disc
type PersistableEnvelope struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Message:
	//	*PersistableEnvelope_SequenceNumberMap
	//	*PersistableEnvelope_PersistedEntryMap
	//	*PersistableEnvelope_PeerList
	//	*PersistableEnvelope_AddressEntryList
	//	*PersistableEnvelope_NavigationPath
	//	*PersistableEnvelope_TradableList
	//	*PersistableEnvelope_ArbitrationDisputeList
	//	*PersistableEnvelope_PreferencesPayload
	//	*PersistableEnvelope_UserPayload
	//	*PersistableEnvelope_PaymentAccountList
	//	*PersistableEnvelope_AccountAgeWitnessStore
	//	*PersistableEnvelope_TradeStatistics2Store
	//	*PersistableEnvelope_ProposalStore
	//	*PersistableEnvelope_TempProposalStore
	//	*PersistableEnvelope_BlindVoteStore
	//	*PersistableEnvelope_MyProposalList
	//	*PersistableEnvelope_BallotList
	//	*PersistableEnvelope_MyVoteList
	//	*PersistableEnvelope_MyBlindVoteList
	//	*PersistableEnvelope_DaoStateStore
	//	*PersistableEnvelope_MyReputationList
	//	*PersistableEnvelope_MyProofOfBurnList
	//	*PersistableEnvelope_UnconfirmedBsqChangeOutputList
	//	*PersistableEnvelope_SignedWitnessStore
	//	*PersistableEnvelope_MediationDisputeList
	//	*PersistableEnvelope_RefundDisputeList
	//	*PersistableEnvelope_TradeStatistics3Store
	//	*PersistableEnvelope_MailboxMessageList
	//	*PersistableEnvelope_IgnoredMailboxMap
	//	*PersistableEnvelope_RemovedPayloadsMap
	Message isPersistableEnvelope_Message `protobuf_oneof:"message"`
}

func (x *PersistableEnvelope) Reset() {
	*x = PersistableEnvelope{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PersistableEnvelope) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PersistableEnvelope) ProtoMessage() {}

func (x *PersistableEnvelope) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PersistableEnvelope.ProtoReflect.Descriptor instead.
func (*PersistableEnvelope) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{125}
}

func (m *PersistableEnvelope) GetMessage() isPersistableEnvelope_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (x *PersistableEnvelope) GetSequenceNumberMap() *SequenceNumberMap {
	if x, ok := x.GetMessage().(*PersistableEnvelope_SequenceNumberMap); ok {
		return x.SequenceNumberMap
	}
	return nil
}

// Deprecated: Do not use.
func (x *PersistableEnvelope) GetPersistedEntryMap() *PersistedEntryMap {
	if x, ok := x.GetMessage().(*PersistableEnvelope_PersistedEntryMap); ok {
		return x.PersistedEntryMap
	}
	return nil
}

func (x *PersistableEnvelope) GetPeerList() *PeerList {
	if x, ok := x.GetMessage().(*PersistableEnvelope_PeerList); ok {
		return x.PeerList
	}
	return nil
}

func (x *PersistableEnvelope) GetAddressEntryList() *AddressEntryList {
	if x, ok := x.GetMessage().(*PersistableEnvelope_AddressEntryList); ok {
		return x.AddressEntryList
	}
	return nil
}

func (x *PersistableEnvelope) GetNavigationPath() *NavigationPath {
	if x, ok := x.GetMessage().(*PersistableEnvelope_NavigationPath); ok {
		return x.NavigationPath
	}
	return nil
}

func (x *PersistableEnvelope) GetTradableList() *TradableList {
	if x, ok := x.GetMessage().(*PersistableEnvelope_TradableList); ok {
		return x.TradableList
	}
	return nil
}

func (x *PersistableEnvelope) GetArbitrationDisputeList() *ArbitrationDisputeList {
	if x, ok := x.GetMessage().(*PersistableEnvelope_ArbitrationDisputeList); ok {
		return x.ArbitrationDisputeList
	}
	return nil
}

func (x *PersistableEnvelope) GetPreferencesPayload() *PreferencesPayload {
	if x, ok := x.GetMessage().(*PersistableEnvelope_PreferencesPayload); ok {
		return x.PreferencesPayload
	}
	return nil
}

func (x *PersistableEnvelope) GetUserPayload() *UserPayload {
	if x, ok := x.GetMessage().(*PersistableEnvelope_UserPayload); ok {
		return x.UserPayload
	}
	return nil
}

func (x *PersistableEnvelope) GetPaymentAccountList() *PaymentAccountList {
	if x, ok := x.GetMessage().(*PersistableEnvelope_PaymentAccountList); ok {
		return x.PaymentAccountList
	}
	return nil
}

func (x *PersistableEnvelope) GetAccountAgeWitnessStore() *AccountAgeWitnessStore {
	if x, ok := x.GetMessage().(*PersistableEnvelope_AccountAgeWitnessStore); ok {
		return x.AccountAgeWitnessStore
	}
	return nil
}

// Deprecated: Do not use.
func (x *PersistableEnvelope) GetTradeStatistics2Store() *TradeStatistics2Store {
	if x, ok := x.GetMessage().(*PersistableEnvelope_TradeStatistics2Store); ok {
		return x.TradeStatistics2Store
	}
	return nil
}

func (x *PersistableEnvelope) GetProposalStore() *ProposalStore {
	if x, ok := x.GetMessage().(*PersistableEnvelope_ProposalStore); ok {
		return x.ProposalStore
	}
	return nil
}

func (x *PersistableEnvelope) GetTempProposalStore() *TempProposalStore {
	if x, ok := x.GetMessage().(*PersistableEnvelope_TempProposalStore); ok {
		return x.TempProposalStore
	}
	return nil
}

func (x *PersistableEnvelope) GetBlindVoteStore() *BlindVoteStore {
	if x, ok := x.GetMessage().(*PersistableEnvelope_BlindVoteStore); ok {
		return x.BlindVoteStore
	}
	return nil
}

func (x *PersistableEnvelope) GetMyProposalList() *MyProposalList {
	if x, ok := x.GetMessage().(*PersistableEnvelope_MyProposalList); ok {
		return x.MyProposalList
	}
	return nil
}

func (x *PersistableEnvelope) GetBallotList() *BallotList {
	if x, ok := x.GetMessage().(*PersistableEnvelope_BallotList); ok {
		return x.BallotList
	}
	return nil
}

func (x *PersistableEnvelope) GetMyVoteList() *MyVoteList {
	if x, ok := x.GetMessage().(*PersistableEnvelope_MyVoteList); ok {
		return x.MyVoteList
	}
	return nil
}

func (x *PersistableEnvelope) GetMyBlindVoteList() *MyBlindVoteList {
	if x, ok := x.GetMessage().(*PersistableEnvelope_MyBlindVoteList); ok {
		return x.MyBlindVoteList
	}
	return nil
}

func (x *PersistableEnvelope) GetDaoStateStore() *DaoStateStore {
	if x, ok := x.GetMessage().(*PersistableEnvelope_DaoStateStore); ok {
		return x.DaoStateStore
	}
	return nil
}

func (x *PersistableEnvelope) GetMyReputationList() *MyReputationList {
	if x, ok := x.GetMessage().(*PersistableEnvelope_MyReputationList); ok {
		return x.MyReputationList
	}
	return nil
}

func (x *PersistableEnvelope) GetMyProofOfBurnList() *MyProofOfBurnList {
	if x, ok := x.GetMessage().(*PersistableEnvelope_MyProofOfBurnList); ok {
		return x.MyProofOfBurnList
	}
	return nil
}

func (x *PersistableEnvelope) GetUnconfirmedBsqChangeOutputList() *UnconfirmedBsqChangeOutputList {
	if x, ok := x.GetMessage().(*PersistableEnvelope_UnconfirmedBsqChangeOutputList); ok {
		return x.UnconfirmedBsqChangeOutputList
	}
	return nil
}

func (x *PersistableEnvelope) GetSignedWitnessStore() *SignedWitnessStore {
	if x, ok := x.GetMessage().(*PersistableEnvelope_SignedWitnessStore); ok {
		return x.SignedWitnessStore
	}
	return nil
}

func (x *PersistableEnvelope) GetMediationDisputeList() *MediationDisputeList {
	if x, ok := x.GetMessage().(*PersistableEnvelope_MediationDisputeList); ok {
		return x.MediationDisputeList
	}
	return nil
}

func (x *PersistableEnvelope) GetRefundDisputeList() *RefundDisputeList {
	if x, ok := x.GetMessage().(*PersistableEnvelope_RefundDisputeList); ok {
		return x.RefundDisputeList
	}
	return nil
}

func (x *PersistableEnvelope) GetTradeStatistics3Store() *TradeStatistics3Store {
	if x, ok := x.GetMessage().(*PersistableEnvelope_TradeStatistics3Store); ok {
		return x.TradeStatistics3Store
	}
	return nil
}

func (x *PersistableEnvelope) GetMailboxMessageList() *MailboxMessageList {
	if x, ok := x.GetMessage().(*PersistableEnvelope_MailboxMessageList); ok {
		return x.MailboxMessageList
	}
	return nil
}

func (x *PersistableEnvelope) GetIgnoredMailboxMap() *IgnoredMailboxMap {
	if x, ok := x.GetMessage().(*PersistableEnvelope_IgnoredMailboxMap); ok {
		return x.IgnoredMailboxMap
	}
	return nil
}

func (x *PersistableEnvelope) GetRemovedPayloadsMap() *RemovedPayloadsMap {
	if x, ok := x.GetMessage().(*PersistableEnvelope_RemovedPayloadsMap); ok {
		return x.RemovedPayloadsMap
	}
	return nil
}

type isPersistableEnvelope_Message interface {
	isPersistableEnvelope_Message()
}

type PersistableEnvelope_SequenceNumberMap struct {
	SequenceNumberMap *SequenceNumberMap `protobuf:"bytes,1,opt,name=sequence_number_map,json=sequenceNumberMap,proto3,oneof"`
}

type PersistableEnvelope_PersistedEntryMap struct {
	// Deprecated: Do not use.
	PersistedEntryMap *PersistedEntryMap `protobuf:"bytes,2,opt,name=persisted_entry_map,json=persistedEntryMap,proto3,oneof"`
}

type PersistableEnvelope_PeerList struct {
	PeerList *PeerList `protobuf:"bytes,3,opt,name=peer_list,json=peerList,proto3,oneof"`
}

type PersistableEnvelope_AddressEntryList struct {
	AddressEntryList *AddressEntryList `protobuf:"bytes,4,opt,name=address_entry_list,json=addressEntryList,proto3,oneof"`
}

type PersistableEnvelope_NavigationPath struct {
	NavigationPath *NavigationPath `protobuf:"bytes,5,opt,name=navigation_path,json=navigationPath,proto3,oneof"`
}

type PersistableEnvelope_TradableList struct {
	TradableList *TradableList `protobuf:"bytes,6,opt,name=tradable_list,json=tradableList,proto3,oneof"`
}

type PersistableEnvelope_ArbitrationDisputeList struct {
	// TradeStatisticsList trade_statistics_list = 7; // Was used in pre v0.6.0 version. Not used anymore.
	ArbitrationDisputeList *ArbitrationDisputeList `protobuf:"bytes,8,opt,name=arbitration_dispute_list,json=arbitrationDisputeList,proto3,oneof"`
}

type PersistableEnvelope_PreferencesPayload struct {
	PreferencesPayload *PreferencesPayload `protobuf:"bytes,9,opt,name=preferences_payload,json=preferencesPayload,proto3,oneof"`
}

type PersistableEnvelope_UserPayload struct {
	UserPayload *UserPayload `protobuf:"bytes,10,opt,name=user_payload,json=userPayload,proto3,oneof"`
}

type PersistableEnvelope_PaymentAccountList struct {
	PaymentAccountList *PaymentAccountList `protobuf:"bytes,11,opt,name=payment_account_list,json=paymentAccountList,proto3,oneof"`
}

type PersistableEnvelope_AccountAgeWitnessStore struct {
	AccountAgeWitnessStore *AccountAgeWitnessStore `protobuf:"bytes,13,opt,name=account_age_witness_store,json=accountAgeWitnessStore,proto3,oneof"`
}

type PersistableEnvelope_TradeStatistics2Store struct {
	// Deprecated: Do not use.
	TradeStatistics2Store *TradeStatistics2Store `protobuf:"bytes,14,opt,name=trade_statistics2_store,json=tradeStatistics2Store,proto3,oneof"`
}

type PersistableEnvelope_ProposalStore struct {
	ProposalStore *ProposalStore `protobuf:"bytes,16,opt,name=proposal_store,json=proposalStore,proto3,oneof"`
}

type PersistableEnvelope_TempProposalStore struct {
	TempProposalStore *TempProposalStore `protobuf:"bytes,17,opt,name=temp_proposal_store,json=tempProposalStore,proto3,oneof"`
}

type PersistableEnvelope_BlindVoteStore struct {
	BlindVoteStore *BlindVoteStore `protobuf:"bytes,18,opt,name=blind_vote_store,json=blindVoteStore,proto3,oneof"`
}

type PersistableEnvelope_MyProposalList struct {
	MyProposalList *MyProposalList `protobuf:"bytes,19,opt,name=my_proposal_list,json=myProposalList,proto3,oneof"`
}

type PersistableEnvelope_BallotList struct {
	BallotList *BallotList `protobuf:"bytes,20,opt,name=ballot_list,json=ballotList,proto3,oneof"`
}

type PersistableEnvelope_MyVoteList struct {
	MyVoteList *MyVoteList `protobuf:"bytes,21,opt,name=my_vote_list,json=myVoteList,proto3,oneof"`
}

type PersistableEnvelope_MyBlindVoteList struct {
	MyBlindVoteList *MyBlindVoteList `protobuf:"bytes,22,opt,name=my_blind_vote_list,json=myBlindVoteList,proto3,oneof"`
}

type PersistableEnvelope_DaoStateStore struct {
	// MeritList merit_list = 23; // was not used here, but its class used to implement PersistableEnvelope via its super
	DaoStateStore *DaoStateStore `protobuf:"bytes,24,opt,name=dao_state_store,json=daoStateStore,proto3,oneof"`
}

type PersistableEnvelope_MyReputationList struct {
	MyReputationList *MyReputationList `protobuf:"bytes,25,opt,name=my_reputation_list,json=myReputationList,proto3,oneof"`
}

type PersistableEnvelope_MyProofOfBurnList struct {
	MyProofOfBurnList *MyProofOfBurnList `protobuf:"bytes,26,opt,name=my_proof_of_burn_list,json=myProofOfBurnList,proto3,oneof"`
}

type PersistableEnvelope_UnconfirmedBsqChangeOutputList struct {
	UnconfirmedBsqChangeOutputList *UnconfirmedBsqChangeOutputList `protobuf:"bytes,27,opt,name=unconfirmed_bsq_change_output_list,json=unconfirmedBsqChangeOutputList,proto3,oneof"`
}

type PersistableEnvelope_SignedWitnessStore struct {
	SignedWitnessStore *SignedWitnessStore `protobuf:"bytes,28,opt,name=signed_witness_store,json=signedWitnessStore,proto3,oneof"`
}

type PersistableEnvelope_MediationDisputeList struct {
	MediationDisputeList *MediationDisputeList `protobuf:"bytes,29,opt,name=mediation_dispute_list,json=mediationDisputeList,proto3,oneof"`
}

type PersistableEnvelope_RefundDisputeList struct {
	RefundDisputeList *RefundDisputeList `protobuf:"bytes,30,opt,name=refund_dispute_list,json=refundDisputeList,proto3,oneof"`
}

type PersistableEnvelope_TradeStatistics3Store struct {
	TradeStatistics3Store *TradeStatistics3Store `protobuf:"bytes,31,opt,name=trade_statistics3_store,json=tradeStatistics3Store,proto3,oneof"`
}

type PersistableEnvelope_MailboxMessageList struct {
	MailboxMessageList *MailboxMessageList `protobuf:"bytes,32,opt,name=mailbox_message_list,json=mailboxMessageList,proto3,oneof"`
}

type PersistableEnvelope_IgnoredMailboxMap struct {
	IgnoredMailboxMap *IgnoredMailboxMap `protobuf:"bytes,33,opt,name=ignored_mailbox_map,json=ignoredMailboxMap,proto3,oneof"`
}

type PersistableEnvelope_RemovedPayloadsMap struct {
	RemovedPayloadsMap *RemovedPayloadsMap `protobuf:"bytes,34,opt,name=removed_payloads_map,json=removedPayloadsMap,proto3,oneof"`
}

func (*PersistableEnvelope_SequenceNumberMap) isPersistableEnvelope_Message() {}

func (*PersistableEnvelope_PersistedEntryMap) isPersistableEnvelope_Message() {}

func (*PersistableEnvelope_PeerList) isPersistableEnvelope_Message() {}

func (*PersistableEnvelope_AddressEntryList) isPersistableEnvelope_Message() {}

func (*PersistableEnvelope_NavigationPath) isPersistableEnvelope_Message() {}

func (*PersistableEnvelope_TradableList) isPersistableEnvelope_Message() {}

func (*PersistableEnvelope_ArbitrationDisputeList) isPersistableEnvelope_Message() {}

func (*PersistableEnvelope_PreferencesPayload) isPersistableEnvelope_Message() {}

func (*PersistableEnvelope_UserPayload) isPersistableEnvelope_Message() {}

func (*PersistableEnvelope_PaymentAccountList) isPersistableEnvelope_Message() {}

func (*PersistableEnvelope_AccountAgeWitnessStore) isPersistableEnvelope_Message() {}

func (*PersistableEnvelope_TradeStatistics2Store) isPersistableEnvelope_Message() {}

func (*PersistableEnvelope_ProposalStore) isPersistableEnvelope_Message() {}

func (*PersistableEnvelope_TempProposalStore) isPersistableEnvelope_Message() {}

func (*PersistableEnvelope_BlindVoteStore) isPersistableEnvelope_Message() {}

func (*PersistableEnvelope_MyProposalList) isPersistableEnvelope_Message() {}

func (*PersistableEnvelope_BallotList) isPersistableEnvelope_Message() {}

func (*PersistableEnvelope_MyVoteList) isPersistableEnvelope_Message() {}

func (*PersistableEnvelope_MyBlindVoteList) isPersistableEnvelope_Message() {}

func (*PersistableEnvelope_DaoStateStore) isPersistableEnvelope_Message() {}

func (*PersistableEnvelope_MyReputationList) isPersistableEnvelope_Message() {}

func (*PersistableEnvelope_MyProofOfBurnList) isPersistableEnvelope_Message() {}

func (*PersistableEnvelope_UnconfirmedBsqChangeOutputList) isPersistableEnvelope_Message() {}

func (*PersistableEnvelope_SignedWitnessStore) isPersistableEnvelope_Message() {}

func (*PersistableEnvelope_MediationDisputeList) isPersistableEnvelope_Message() {}

func (*PersistableEnvelope_RefundDisputeList) isPersistableEnvelope_Message() {}

func (*PersistableEnvelope_TradeStatistics3Store) isPersistableEnvelope_Message() {}

func (*PersistableEnvelope_MailboxMessageList) isPersistableEnvelope_Message() {}

func (*PersistableEnvelope_IgnoredMailboxMap) isPersistableEnvelope_Message() {}

func (*PersistableEnvelope_RemovedPayloadsMap) isPersistableEnvelope_Message() {}

type SequenceNumberMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SequenceNumberEntries []*SequenceNumberEntry `protobuf:"bytes,1,rep,name=sequence_number_entries,json=sequenceNumberEntries,proto3" json:"sequence_number_entries,omitempty"`
}

func (x *SequenceNumberMap) Reset() {
	*x = SequenceNumberMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SequenceNumberMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SequenceNumberMap) ProtoMessage() {}

func (x *SequenceNumberMap) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SequenceNumberMap.ProtoReflect.Descriptor instead.
func (*SequenceNumberMap) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{126}
}

func (x *SequenceNumberMap) GetSequenceNumberEntries() []*SequenceNumberEntry {
	if x != nil {
		return x.SequenceNumberEntries
	}
	return nil
}

type SequenceNumberEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bytes    *ByteArray `protobuf:"bytes,1,opt,name=bytes,proto3" json:"bytes,omitempty"`
	MapValue *MapValue  `protobuf:"bytes,2,opt,name=map_value,json=mapValue,proto3" json:"map_value,omitempty"`
}

func (x *SequenceNumberEntry) Reset() {
	*x = SequenceNumberEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SequenceNumberEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SequenceNumberEntry) ProtoMessage() {}

func (x *SequenceNumberEntry) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SequenceNumberEntry.ProtoReflect.Descriptor instead.
func (*SequenceNumberEntry) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{127}
}

func (x *SequenceNumberEntry) GetBytes() *ByteArray {
	if x != nil {
		return x.Bytes
	}
	return nil
}

func (x *SequenceNumberEntry) GetMapValue() *MapValue {
	if x != nil {
		return x.MapValue
	}
	return nil
}

type ByteArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bytes []byte `protobuf:"bytes,1,opt,name=bytes,proto3" json:"bytes,omitempty"`
}

func (x *ByteArray) Reset() {
	*x = ByteArray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ByteArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ByteArray) ProtoMessage() {}

func (x *ByteArray) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ByteArray.ProtoReflect.Descriptor instead.
func (*ByteArray) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{128}
}

func (x *ByteArray) GetBytes() []byte {
	if x != nil {
		return x.Bytes
	}
	return nil
}

type MapValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SequenceNr int32 `protobuf:"varint,1,opt,name=sequence_nr,json=sequenceNr,proto3" json:"sequence_nr,omitempty"`
	TimeStamp  int64 `protobuf:"varint,2,opt,name=time_stamp,json=timeStamp,proto3" json:"time_stamp,omitempty"`
}

func (x *MapValue) Reset() {
	*x = MapValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapValue) ProtoMessage() {}

func (x *MapValue) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapValue.ProtoReflect.Descriptor instead.
func (*MapValue) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{129}
}

func (x *MapValue) GetSequenceNr() int32 {
	if x != nil {
		return x.SequenceNr
	}
	return 0
}

func (x *MapValue) GetTimeStamp() int64 {
	if x != nil {
		return x.TimeStamp
	}
	return 0
}

// deprecated. Not used anymore.
type PersistedEntryMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PersistedEntryMap map[string]*ProtectedStorageEntry `protobuf:"bytes,1,rep,name=persisted_entry_map,json=persistedEntryMap,proto3" json:"persisted_entry_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PersistedEntryMap) Reset() {
	*x = PersistedEntryMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PersistedEntryMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PersistedEntryMap) ProtoMessage() {}

func (x *PersistedEntryMap) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PersistedEntryMap.ProtoReflect.Descriptor instead.
func (*PersistedEntryMap) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{130}
}

func (x *PersistedEntryMap) GetPersistedEntryMap() map[string]*ProtectedStorageEntry {
	if x != nil {
		return x.PersistedEntryMap
	}
	return nil
}

// We use a list not a hash map to save disc space. The hash can be calculated from the payload anyway
type AccountAgeWitnessStore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*AccountAgeWitness `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *AccountAgeWitnessStore) Reset() {
	*x = AccountAgeWitnessStore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountAgeWitnessStore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountAgeWitnessStore) ProtoMessage() {}

func (x *AccountAgeWitnessStore) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountAgeWitnessStore.ProtoReflect.Descriptor instead.
func (*AccountAgeWitnessStore) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{131}
}

func (x *AccountAgeWitnessStore) GetItems() []*AccountAgeWitness {
	if x != nil {
		return x.Items
	}
	return nil
}

type SignedWitnessStore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*SignedWitness `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *SignedWitnessStore) Reset() {
	*x = SignedWitnessStore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignedWitnessStore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignedWitnessStore) ProtoMessage() {}

func (x *SignedWitnessStore) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignedWitnessStore.ProtoReflect.Descriptor instead.
func (*SignedWitnessStore) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{132}
}

func (x *SignedWitnessStore) GetItems() []*SignedWitness {
	if x != nil {
		return x.Items
	}
	return nil
}

// We use a list not a hash map to save disc space. The hash can be calculated from the payload anyway
// Deprecated
type TradeStatistics2Store struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated: Do not use.
	Items []*TradeStatistics2 `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *TradeStatistics2Store) Reset() {
	*x = TradeStatistics2Store{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradeStatistics2Store) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeStatistics2Store) ProtoMessage() {}

func (x *TradeStatistics2Store) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeStatistics2Store.ProtoReflect.Descriptor instead.
func (*TradeStatistics2Store) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{133}
}

// Deprecated: Do not use.
func (x *TradeStatistics2Store) GetItems() []*TradeStatistics2 {
	if x != nil {
		return x.Items
	}
	return nil
}

type TradeStatistics3Store struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*TradeStatistics3 `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *TradeStatistics3Store) Reset() {
	*x = TradeStatistics3Store{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradeStatistics3Store) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeStatistics3Store) ProtoMessage() {}

func (x *TradeStatistics3Store) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeStatistics3Store.ProtoReflect.Descriptor instead.
func (*TradeStatistics3Store) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{134}
}

func (x *TradeStatistics3Store) GetItems() []*TradeStatistics3 {
	if x != nil {
		return x.Items
	}
	return nil
}

type PeerList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Peer []*Peer `protobuf:"bytes,1,rep,name=peer,proto3" json:"peer,omitempty"`
}

func (x *PeerList) Reset() {
	*x = PeerList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeerList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeerList) ProtoMessage() {}

func (x *PeerList) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeerList.ProtoReflect.Descriptor instead.
func (*PeerList) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{135}
}

func (x *PeerList) GetPeer() []*Peer {
	if x != nil {
		return x.Peer
	}
	return nil
}

type AddressEntryList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AddressEntry []*AddressEntry `protobuf:"bytes,1,rep,name=address_entry,json=addressEntry,proto3" json:"address_entry,omitempty"`
}

func (x *AddressEntryList) Reset() {
	*x = AddressEntryList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddressEntryList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddressEntryList) ProtoMessage() {}

func (x *AddressEntryList) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddressEntryList.ProtoReflect.Descriptor instead.
func (*AddressEntryList) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{136}
}

func (x *AddressEntryList) GetAddressEntry() []*AddressEntry {
	if x != nil {
		return x.AddressEntry
	}
	return nil
}

type AddressEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OfferId              string               `protobuf:"bytes,7,opt,name=offer_id,json=offerId,proto3" json:"offer_id,omitempty"`
	Context              AddressEntry_Context `protobuf:"varint,8,opt,name=context,proto3,enum=io.bisq.protobuffer.AddressEntry_Context" json:"context,omitempty"`
	PubKey               []byte               `protobuf:"bytes,9,opt,name=pub_key,json=pubKey,proto3" json:"pub_key,omitempty"`
	PubKeyHash           []byte               `protobuf:"bytes,10,opt,name=pub_key_hash,json=pubKeyHash,proto3" json:"pub_key_hash,omitempty"`
	CoinLockedInMultiSig int64                `protobuf:"varint,11,opt,name=coin_locked_in_multi_sig,json=coinLockedInMultiSig,proto3" json:"coin_locked_in_multi_sig,omitempty"`
	Segwit               bool                 `protobuf:"varint,12,opt,name=segwit,proto3" json:"segwit,omitempty"`
}

func (x *AddressEntry) Reset() {
	*x = AddressEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddressEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddressEntry) ProtoMessage() {}

func (x *AddressEntry) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddressEntry.ProtoReflect.Descriptor instead.
func (*AddressEntry) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{137}
}

func (x *AddressEntry) GetOfferId() string {
	if x != nil {
		return x.OfferId
	}
	return ""
}

func (x *AddressEntry) GetContext() AddressEntry_Context {
	if x != nil {
		return x.Context
	}
	return AddressEntry_PB_ERROR
}

func (x *AddressEntry) GetPubKey() []byte {
	if x != nil {
		return x.PubKey
	}
	return nil
}

func (x *AddressEntry) GetPubKeyHash() []byte {
	if x != nil {
		return x.PubKeyHash
	}
	return nil
}

func (x *AddressEntry) GetCoinLockedInMultiSig() int64 {
	if x != nil {
		return x.CoinLockedInMultiSig
	}
	return 0
}

func (x *AddressEntry) GetSegwit() bool {
	if x != nil {
		return x.Segwit
	}
	return false
}

type NavigationPath struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path []string `protobuf:"bytes,1,rep,name=path,proto3" json:"path,omitempty"`
}

func (x *NavigationPath) Reset() {
	*x = NavigationPath{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NavigationPath) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NavigationPath) ProtoMessage() {}

func (x *NavigationPath) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NavigationPath.ProtoReflect.Descriptor instead.
func (*NavigationPath) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{138}
}

func (x *NavigationPath) GetPath() []string {
	if x != nil {
		return x.Path
	}
	return nil
}

type PaymentAccountList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PaymentAccount []*PaymentAccount `protobuf:"bytes,1,rep,name=payment_account,json=paymentAccount,proto3" json:"payment_account,omitempty"`
}

func (x *PaymentAccountList) Reset() {
	*x = PaymentAccountList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[139]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentAccountList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentAccountList) ProtoMessage() {}

func (x *PaymentAccountList) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[139]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentAccountList.ProtoReflect.Descriptor instead.
func (*PaymentAccountList) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{139}
}

func (x *PaymentAccountList) GetPaymentAccount() []*PaymentAccount {
	if x != nil {
		return x.PaymentAccount
	}
	return nil
}

type TradableList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tradable []*Tradable `protobuf:"bytes,1,rep,name=tradable,proto3" json:"tradable,omitempty"`
}

func (x *TradableList) Reset() {
	*x = TradableList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[140]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradableList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradableList) ProtoMessage() {}

func (x *TradableList) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[140]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradableList.ProtoReflect.Descriptor instead.
func (*TradableList) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{140}
}

func (x *TradableList) GetTradable() []*Tradable {
	if x != nil {
		return x.Tradable
	}
	return nil
}

type Offer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OfferPayload *OfferPayload `protobuf:"bytes,1,opt,name=offer_payload,json=offerPayload,proto3" json:"offer_payload,omitempty"`
}

func (x *Offer) Reset() {
	*x = Offer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[141]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Offer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Offer) ProtoMessage() {}

func (x *Offer) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[141]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Offer.ProtoReflect.Descriptor instead.
func (*Offer) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{141}
}

func (x *Offer) GetOfferPayload() *OfferPayload {
	if x != nil {
		return x.OfferPayload
	}
	return nil
}

type OpenOffer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Offer                  *Offer          `protobuf:"bytes,1,opt,name=offer,proto3" json:"offer,omitempty"`
	State                  OpenOffer_State `protobuf:"varint,2,opt,name=state,proto3,enum=io.bisq.protobuffer.OpenOffer_State" json:"state,omitempty"`
	ArbitratorNodeAddress  *NodeAddress    `protobuf:"bytes,3,opt,name=arbitrator_node_address,json=arbitratorNodeAddress,proto3" json:"arbitrator_node_address,omitempty"`
	MediatorNodeAddress    *NodeAddress    `protobuf:"bytes,4,opt,name=mediator_node_address,json=mediatorNodeAddress,proto3" json:"mediator_node_address,omitempty"`
	RefundAgentNodeAddress *NodeAddress    `protobuf:"bytes,5,opt,name=refund_agent_node_address,json=refundAgentNodeAddress,proto3" json:"refund_agent_node_address,omitempty"`
	TriggerPrice           int64           `protobuf:"varint,6,opt,name=trigger_price,json=triggerPrice,proto3" json:"trigger_price,omitempty"`
}

func (x *OpenOffer) Reset() {
	*x = OpenOffer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[142]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenOffer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenOffer) ProtoMessage() {}

func (x *OpenOffer) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[142]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenOffer.ProtoReflect.Descriptor instead.
func (*OpenOffer) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{142}
}

func (x *OpenOffer) GetOffer() *Offer {
	if x != nil {
		return x.Offer
	}
	return nil
}

func (x *OpenOffer) GetState() OpenOffer_State {
	if x != nil {
		return x.State
	}
	return OpenOffer_PB_ERROR
}

func (x *OpenOffer) GetArbitratorNodeAddress() *NodeAddress {
	if x != nil {
		return x.ArbitratorNodeAddress
	}
	return nil
}

func (x *OpenOffer) GetMediatorNodeAddress() *NodeAddress {
	if x != nil {
		return x.MediatorNodeAddress
	}
	return nil
}

func (x *OpenOffer) GetRefundAgentNodeAddress() *NodeAddress {
	if x != nil {
		return x.RefundAgentNodeAddress
	}
	return nil
}

func (x *OpenOffer) GetTriggerPrice() int64 {
	if x != nil {
		return x.TriggerPrice
	}
	return 0
}

type Tradable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Message:
	//	*Tradable_OpenOffer
	//	*Tradable_BuyerAsMakerTrade
	//	*Tradable_BuyerAsTakerTrade
	//	*Tradable_SellerAsMakerTrade
	//	*Tradable_SellerAsTakerTrade
	Message isTradable_Message `protobuf_oneof:"message"`
}

func (x *Tradable) Reset() {
	*x = Tradable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[143]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tradable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tradable) ProtoMessage() {}

func (x *Tradable) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[143]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tradable.ProtoReflect.Descriptor instead.
func (*Tradable) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{143}
}

func (m *Tradable) GetMessage() isTradable_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (x *Tradable) GetOpenOffer() *OpenOffer {
	if x, ok := x.GetMessage().(*Tradable_OpenOffer); ok {
		return x.OpenOffer
	}
	return nil
}

func (x *Tradable) GetBuyerAsMakerTrade() *BuyerAsMakerTrade {
	if x, ok := x.GetMessage().(*Tradable_BuyerAsMakerTrade); ok {
		return x.BuyerAsMakerTrade
	}
	return nil
}

func (x *Tradable) GetBuyerAsTakerTrade() *BuyerAsTakerTrade {
	if x, ok := x.GetMessage().(*Tradable_BuyerAsTakerTrade); ok {
		return x.BuyerAsTakerTrade
	}
	return nil
}

func (x *Tradable) GetSellerAsMakerTrade() *SellerAsMakerTrade {
	if x, ok := x.GetMessage().(*Tradable_SellerAsMakerTrade); ok {
		return x.SellerAsMakerTrade
	}
	return nil
}

func (x *Tradable) GetSellerAsTakerTrade() *SellerAsTakerTrade {
	if x, ok := x.GetMessage().(*Tradable_SellerAsTakerTrade); ok {
		return x.SellerAsTakerTrade
	}
	return nil
}

type isTradable_Message interface {
	isTradable_Message()
}

type Tradable_OpenOffer struct {
	OpenOffer *OpenOffer `protobuf:"bytes,1,opt,name=open_offer,json=openOffer,proto3,oneof"`
}

type Tradable_BuyerAsMakerTrade struct {
	BuyerAsMakerTrade *BuyerAsMakerTrade `protobuf:"bytes,2,opt,name=buyer_as_maker_trade,json=buyerAsMakerTrade,proto3,oneof"`
}

type Tradable_BuyerAsTakerTrade struct {
	BuyerAsTakerTrade *BuyerAsTakerTrade `protobuf:"bytes,3,opt,name=buyer_as_taker_trade,json=buyerAsTakerTrade,proto3,oneof"`
}

type Tradable_SellerAsMakerTrade struct {
	SellerAsMakerTrade *SellerAsMakerTrade `protobuf:"bytes,4,opt,name=seller_as_maker_trade,json=sellerAsMakerTrade,proto3,oneof"`
}

type Tradable_SellerAsTakerTrade struct {
	SellerAsTakerTrade *SellerAsTakerTrade `protobuf:"bytes,5,opt,name=seller_as_taker_trade,json=sellerAsTakerTrade,proto3,oneof"`
}

func (*Tradable_OpenOffer) isTradable_Message() {}

func (*Tradable_BuyerAsMakerTrade) isTradable_Message() {}

func (*Tradable_BuyerAsTakerTrade) isTradable_Message() {}

func (*Tradable_SellerAsMakerTrade) isTradable_Message() {}

func (*Tradable_SellerAsTakerTrade) isTradable_Message() {}

type Trade struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Offer                    *Offer                 `protobuf:"bytes,1,opt,name=offer,proto3" json:"offer,omitempty"`
	ProcessModel             *ProcessModel          `protobuf:"bytes,2,opt,name=process_model,json=processModel,proto3" json:"process_model,omitempty"`
	TakerFeeTxId             string                 `protobuf:"bytes,3,opt,name=taker_fee_tx_id,json=takerFeeTxId,proto3" json:"taker_fee_tx_id,omitempty"`
	DepositTxId              string                 `protobuf:"bytes,4,opt,name=deposit_tx_id,json=depositTxId,proto3" json:"deposit_tx_id,omitempty"`
	PayoutTxId               string                 `protobuf:"bytes,5,opt,name=payout_tx_id,json=payoutTxId,proto3" json:"payout_tx_id,omitempty"`
	TradeAmountAsLong        int64                  `protobuf:"varint,6,opt,name=trade_amount_as_long,json=tradeAmountAsLong,proto3" json:"trade_amount_as_long,omitempty"`
	TxFeeAsLong              int64                  `protobuf:"varint,7,opt,name=tx_fee_as_long,json=txFeeAsLong,proto3" json:"tx_fee_as_long,omitempty"`
	TakerFeeAsLong           int64                  `protobuf:"varint,8,opt,name=taker_fee_as_long,json=takerFeeAsLong,proto3" json:"taker_fee_as_long,omitempty"`
	TakeOfferDate            int64                  `protobuf:"varint,9,opt,name=take_offer_date,json=takeOfferDate,proto3" json:"take_offer_date,omitempty"`
	IsCurrencyForTakerFeeBtc bool                   `protobuf:"varint,10,opt,name=is_currency_for_taker_fee_btc,json=isCurrencyForTakerFeeBtc,proto3" json:"is_currency_for_taker_fee_btc,omitempty"`
	TradePrice               int64                  `protobuf:"varint,11,opt,name=trade_price,json=tradePrice,proto3" json:"trade_price,omitempty"`
	TradingPeerNodeAddress   *NodeAddress           `protobuf:"bytes,12,opt,name=trading_peer_node_address,json=tradingPeerNodeAddress,proto3" json:"trading_peer_node_address,omitempty"`
	State                    Trade_State            `protobuf:"varint,13,opt,name=state,proto3,enum=io.bisq.protobuffer.Trade_State" json:"state,omitempty"`
	DisputeState             Trade_DisputeState     `protobuf:"varint,14,opt,name=dispute_state,json=disputeState,proto3,enum=io.bisq.protobuffer.Trade_DisputeState" json:"dispute_state,omitempty"`
	TradePeriodState         Trade_TradePeriodState `protobuf:"varint,15,opt,name=trade_period_state,json=tradePeriodState,proto3,enum=io.bisq.protobuffer.Trade_TradePeriodState" json:"trade_period_state,omitempty"`
	Contract                 *Contract              `protobuf:"bytes,16,opt,name=contract,proto3" json:"contract,omitempty"`
	ContractAsJson           string                 `protobuf:"bytes,17,opt,name=contract_as_json,json=contractAsJson,proto3" json:"contract_as_json,omitempty"`
	ContractHash             []byte                 `protobuf:"bytes,18,opt,name=contract_hash,json=contractHash,proto3" json:"contract_hash,omitempty"`
	TakerContractSignature   string                 `protobuf:"bytes,19,opt,name=taker_contract_signature,json=takerContractSignature,proto3" json:"taker_contract_signature,omitempty"`
	MakerContractSignature   string                 `protobuf:"bytes,20,opt,name=maker_contract_signature,json=makerContractSignature,proto3" json:"maker_contract_signature,omitempty"`
	ArbitratorNodeAddress    *NodeAddress           `protobuf:"bytes,21,opt,name=arbitrator_node_address,json=arbitratorNodeAddress,proto3" json:"arbitrator_node_address,omitempty"`
	MediatorNodeAddress      *NodeAddress           `protobuf:"bytes,22,opt,name=mediator_node_address,json=mediatorNodeAddress,proto3" json:"mediator_node_address,omitempty"`
	ArbitratorBtcPubKey      []byte                 `protobuf:"bytes,23,opt,name=arbitrator_btc_pub_key,json=arbitratorBtcPubKey,proto3" json:"arbitrator_btc_pub_key,omitempty"`
	TakerPaymentAccountId    string                 `protobuf:"bytes,24,opt,name=taker_payment_account_id,json=takerPaymentAccountId,proto3" json:"taker_payment_account_id,omitempty"`
	ErrorMessage             string                 `protobuf:"bytes,25,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	ArbitratorPubKeyRing     *PubKeyRing            `protobuf:"bytes,26,opt,name=arbitrator_pub_key_ring,json=arbitratorPubKeyRing,proto3" json:"arbitrator_pub_key_ring,omitempty"`
	MediatorPubKeyRing       *PubKeyRing            `protobuf:"bytes,27,opt,name=mediator_pub_key_ring,json=mediatorPubKeyRing,proto3" json:"mediator_pub_key_ring,omitempty"`
	CounterCurrencyTxId      string                 `protobuf:"bytes,28,opt,name=counter_currency_tx_id,json=counterCurrencyTxId,proto3" json:"counter_currency_tx_id,omitempty"`
	ChatMessage              []*ChatMessage         `protobuf:"bytes,29,rep,name=chat_message,json=chatMessage,proto3" json:"chat_message,omitempty"`
	MediationResultState     MediationResultState   `protobuf:"varint,30,opt,name=mediation_result_state,json=mediationResultState,proto3,enum=io.bisq.protobuffer.MediationResultState" json:"mediation_result_state,omitempty"`
	LockTime                 int64                  `protobuf:"varint,31,opt,name=lock_time,json=lockTime,proto3" json:"lock_time,omitempty"`
	DelayedPayoutTxBytes     []byte                 `protobuf:"bytes,32,opt,name=delayed_payout_tx_bytes,json=delayedPayoutTxBytes,proto3" json:"delayed_payout_tx_bytes,omitempty"`
	RefundAgentNodeAddress   *NodeAddress           `protobuf:"bytes,33,opt,name=refund_agent_node_address,json=refundAgentNodeAddress,proto3" json:"refund_agent_node_address,omitempty"`
	RefundAgentPubKeyRing    *PubKeyRing            `protobuf:"bytes,34,opt,name=refund_agent_pub_key_ring,json=refundAgentPubKeyRing,proto3" json:"refund_agent_pub_key_ring,omitempty"`
	RefundResultState        RefundResultState      `protobuf:"varint,35,opt,name=refund_result_state,json=refundResultState,proto3,enum=io.bisq.protobuffer.RefundResultState" json:"refund_result_state,omitempty"`
	// Deprecated: Do not use.
	LastRefreshRequestDate   int64  `protobuf:"varint,36,opt,name=last_refresh_request_date,json=lastRefreshRequestDate,proto3" json:"last_refresh_request_date,omitempty"`
	CounterCurrencyExtraData string `protobuf:"bytes,37,opt,name=counter_currency_extra_data,json=counterCurrencyExtraData,proto3" json:"counter_currency_extra_data,omitempty"`
	AssetTxProofResult       string `protobuf:"bytes,38,opt,name=asset_tx_proof_result,json=assetTxProofResult,proto3" json:"asset_tx_proof_result,omitempty"` // name of AssetTxProofResult enum
	Uid                      string `protobuf:"bytes,39,opt,name=uid,proto3" json:"uid,omitempty"`
}

func (x *Trade) Reset() {
	*x = Trade{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[144]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trade) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trade) ProtoMessage() {}

func (x *Trade) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[144]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trade.ProtoReflect.Descriptor instead.
func (*Trade) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{144}
}

func (x *Trade) GetOffer() *Offer {
	if x != nil {
		return x.Offer
	}
	return nil
}

func (x *Trade) GetProcessModel() *ProcessModel {
	if x != nil {
		return x.ProcessModel
	}
	return nil
}

func (x *Trade) GetTakerFeeTxId() string {
	if x != nil {
		return x.TakerFeeTxId
	}
	return ""
}

func (x *Trade) GetDepositTxId() string {
	if x != nil {
		return x.DepositTxId
	}
	return ""
}

func (x *Trade) GetPayoutTxId() string {
	if x != nil {
		return x.PayoutTxId
	}
	return ""
}

func (x *Trade) GetTradeAmountAsLong() int64 {
	if x != nil {
		return x.TradeAmountAsLong
	}
	return 0
}

func (x *Trade) GetTxFeeAsLong() int64 {
	if x != nil {
		return x.TxFeeAsLong
	}
	return 0
}

func (x *Trade) GetTakerFeeAsLong() int64 {
	if x != nil {
		return x.TakerFeeAsLong
	}
	return 0
}

func (x *Trade) GetTakeOfferDate() int64 {
	if x != nil {
		return x.TakeOfferDate
	}
	return 0
}

func (x *Trade) GetIsCurrencyForTakerFeeBtc() bool {
	if x != nil {
		return x.IsCurrencyForTakerFeeBtc
	}
	return false
}

func (x *Trade) GetTradePrice() int64 {
	if x != nil {
		return x.TradePrice
	}
	return 0
}

func (x *Trade) GetTradingPeerNodeAddress() *NodeAddress {
	if x != nil {
		return x.TradingPeerNodeAddress
	}
	return nil
}

func (x *Trade) GetState() Trade_State {
	if x != nil {
		return x.State
	}
	return Trade_PB_ERROR_STATE
}

func (x *Trade) GetDisputeState() Trade_DisputeState {
	if x != nil {
		return x.DisputeState
	}
	return Trade_PB_ERROR_DISPUTE_STATE
}

func (x *Trade) GetTradePeriodState() Trade_TradePeriodState {
	if x != nil {
		return x.TradePeriodState
	}
	return Trade_PB_ERROR_TRADE_PERIOD_STATE
}

func (x *Trade) GetContract() *Contract {
	if x != nil {
		return x.Contract
	}
	return nil
}

func (x *Trade) GetContractAsJson() string {
	if x != nil {
		return x.ContractAsJson
	}
	return ""
}

func (x *Trade) GetContractHash() []byte {
	if x != nil {
		return x.ContractHash
	}
	return nil
}

func (x *Trade) GetTakerContractSignature() string {
	if x != nil {
		return x.TakerContractSignature
	}
	return ""
}

func (x *Trade) GetMakerContractSignature() string {
	if x != nil {
		return x.MakerContractSignature
	}
	return ""
}

func (x *Trade) GetArbitratorNodeAddress() *NodeAddress {
	if x != nil {
		return x.ArbitratorNodeAddress
	}
	return nil
}

func (x *Trade) GetMediatorNodeAddress() *NodeAddress {
	if x != nil {
		return x.MediatorNodeAddress
	}
	return nil
}

func (x *Trade) GetArbitratorBtcPubKey() []byte {
	if x != nil {
		return x.ArbitratorBtcPubKey
	}
	return nil
}

func (x *Trade) GetTakerPaymentAccountId() string {
	if x != nil {
		return x.TakerPaymentAccountId
	}
	return ""
}

func (x *Trade) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *Trade) GetArbitratorPubKeyRing() *PubKeyRing {
	if x != nil {
		return x.ArbitratorPubKeyRing
	}
	return nil
}

func (x *Trade) GetMediatorPubKeyRing() *PubKeyRing {
	if x != nil {
		return x.MediatorPubKeyRing
	}
	return nil
}

func (x *Trade) GetCounterCurrencyTxId() string {
	if x != nil {
		return x.CounterCurrencyTxId
	}
	return ""
}

func (x *Trade) GetChatMessage() []*ChatMessage {
	if x != nil {
		return x.ChatMessage
	}
	return nil
}

func (x *Trade) GetMediationResultState() MediationResultState {
	if x != nil {
		return x.MediationResultState
	}
	return MediationResultState_PB_ERROR_MEDIATION_RESULT
}

func (x *Trade) GetLockTime() int64 {
	if x != nil {
		return x.LockTime
	}
	return 0
}

func (x *Trade) GetDelayedPayoutTxBytes() []byte {
	if x != nil {
		return x.DelayedPayoutTxBytes
	}
	return nil
}

func (x *Trade) GetRefundAgentNodeAddress() *NodeAddress {
	if x != nil {
		return x.RefundAgentNodeAddress
	}
	return nil
}

func (x *Trade) GetRefundAgentPubKeyRing() *PubKeyRing {
	if x != nil {
		return x.RefundAgentPubKeyRing
	}
	return nil
}

func (x *Trade) GetRefundResultState() RefundResultState {
	if x != nil {
		return x.RefundResultState
	}
	return RefundResultState_PB_ERROR_REFUND_RESULT
}

// Deprecated: Do not use.
func (x *Trade) GetLastRefreshRequestDate() int64 {
	if x != nil {
		return x.LastRefreshRequestDate
	}
	return 0
}

func (x *Trade) GetCounterCurrencyExtraData() string {
	if x != nil {
		return x.CounterCurrencyExtraData
	}
	return ""
}

func (x *Trade) GetAssetTxProofResult() string {
	if x != nil {
		return x.AssetTxProofResult
	}
	return ""
}

func (x *Trade) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

type BuyerAsMakerTrade struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Trade *Trade `protobuf:"bytes,1,opt,name=trade,proto3" json:"trade,omitempty"`
}

func (x *BuyerAsMakerTrade) Reset() {
	*x = BuyerAsMakerTrade{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[145]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuyerAsMakerTrade) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuyerAsMakerTrade) ProtoMessage() {}

func (x *BuyerAsMakerTrade) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[145]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuyerAsMakerTrade.ProtoReflect.Descriptor instead.
func (*BuyerAsMakerTrade) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{145}
}

func (x *BuyerAsMakerTrade) GetTrade() *Trade {
	if x != nil {
		return x.Trade
	}
	return nil
}

type BuyerAsTakerTrade struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Trade *Trade `protobuf:"bytes,1,opt,name=trade,proto3" json:"trade,omitempty"`
}

func (x *BuyerAsTakerTrade) Reset() {
	*x = BuyerAsTakerTrade{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[146]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuyerAsTakerTrade) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuyerAsTakerTrade) ProtoMessage() {}

func (x *BuyerAsTakerTrade) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[146]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuyerAsTakerTrade.ProtoReflect.Descriptor instead.
func (*BuyerAsTakerTrade) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{146}
}

func (x *BuyerAsTakerTrade) GetTrade() *Trade {
	if x != nil {
		return x.Trade
	}
	return nil
}

type SellerAsMakerTrade struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Trade *Trade `protobuf:"bytes,1,opt,name=trade,proto3" json:"trade,omitempty"`
}

func (x *SellerAsMakerTrade) Reset() {
	*x = SellerAsMakerTrade{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[147]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SellerAsMakerTrade) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SellerAsMakerTrade) ProtoMessage() {}

func (x *SellerAsMakerTrade) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[147]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SellerAsMakerTrade.ProtoReflect.Descriptor instead.
func (*SellerAsMakerTrade) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{147}
}

func (x *SellerAsMakerTrade) GetTrade() *Trade {
	if x != nil {
		return x.Trade
	}
	return nil
}

type SellerAsTakerTrade struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Trade *Trade `protobuf:"bytes,1,opt,name=trade,proto3" json:"trade,omitempty"`
}

func (x *SellerAsTakerTrade) Reset() {
	*x = SellerAsTakerTrade{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[148]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SellerAsTakerTrade) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SellerAsTakerTrade) ProtoMessage() {}

func (x *SellerAsTakerTrade) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[148]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SellerAsTakerTrade.ProtoReflect.Descriptor instead.
func (*SellerAsTakerTrade) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{148}
}

func (x *SellerAsTakerTrade) GetTrade() *Trade {
	if x != nil {
		return x.Trade
	}
	return nil
}

type ProcessModel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradingPeer                     *TradingPeer           `protobuf:"bytes,1,opt,name=trading_peer,json=tradingPeer,proto3" json:"trading_peer,omitempty"`
	OfferId                         string                 `protobuf:"bytes,2,opt,name=offer_id,json=offerId,proto3" json:"offer_id,omitempty"`
	AccountId                       string                 `protobuf:"bytes,3,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	PubKeyRing                      *PubKeyRing            `protobuf:"bytes,4,opt,name=pub_key_ring,json=pubKeyRing,proto3" json:"pub_key_ring,omitempty"`
	TakeOfferFeeTxId                string                 `protobuf:"bytes,5,opt,name=take_offer_fee_tx_id,json=takeOfferFeeTxId,proto3" json:"take_offer_fee_tx_id,omitempty"`
	PayoutTxSignature               []byte                 `protobuf:"bytes,6,opt,name=payout_tx_signature,json=payoutTxSignature,proto3" json:"payout_tx_signature,omitempty"`
	PreparedDepositTx               []byte                 `protobuf:"bytes,9,opt,name=prepared_deposit_tx,json=preparedDepositTx,proto3" json:"prepared_deposit_tx,omitempty"`
	RawTransactionInputs            []*RawTransactionInput `protobuf:"bytes,10,rep,name=raw_transaction_inputs,json=rawTransactionInputs,proto3" json:"raw_transaction_inputs,omitempty"`
	ChangeOutputValue               int64                  `protobuf:"varint,11,opt,name=change_output_value,json=changeOutputValue,proto3" json:"change_output_value,omitempty"`
	ChangeOutputAddress             string                 `protobuf:"bytes,12,opt,name=change_output_address,json=changeOutputAddress,proto3" json:"change_output_address,omitempty"`
	UseSavingsWallet                bool                   `protobuf:"varint,13,opt,name=use_savings_wallet,json=useSavingsWallet,proto3" json:"use_savings_wallet,omitempty"`
	FundsNeededForTradeAsLong       int64                  `protobuf:"varint,14,opt,name=funds_needed_for_trade_as_long,json=fundsNeededForTradeAsLong,proto3" json:"funds_needed_for_trade_as_long,omitempty"`
	MyMultiSigPubKey                []byte                 `protobuf:"bytes,15,opt,name=my_multi_sig_pub_key,json=myMultiSigPubKey,proto3" json:"my_multi_sig_pub_key,omitempty"`
	TempTradingPeerNodeAddress      *NodeAddress           `protobuf:"bytes,16,opt,name=temp_trading_peer_node_address,json=tempTradingPeerNodeAddress,proto3" json:"temp_trading_peer_node_address,omitempty"`
	PaymentStartedMessageState      string                 `protobuf:"bytes,17,opt,name=payment_started_message_state,json=paymentStartedMessageState,proto3" json:"payment_started_message_state,omitempty"`
	MediatedPayoutTxSignature       []byte                 `protobuf:"bytes,18,opt,name=mediated_payout_tx_signature,json=mediatedPayoutTxSignature,proto3" json:"mediated_payout_tx_signature,omitempty"`
	BuyerPayoutAmountFromMediation  int64                  `protobuf:"varint,19,opt,name=buyer_payout_amount_from_mediation,json=buyerPayoutAmountFromMediation,proto3" json:"buyer_payout_amount_from_mediation,omitempty"`
	SellerPayoutAmountFromMediation int64                  `protobuf:"varint,20,opt,name=seller_payout_amount_from_mediation,json=sellerPayoutAmountFromMediation,proto3" json:"seller_payout_amount_from_mediation,omitempty"`
}

func (x *ProcessModel) Reset() {
	*x = ProcessModel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[149]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessModel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessModel) ProtoMessage() {}

func (x *ProcessModel) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[149]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessModel.ProtoReflect.Descriptor instead.
func (*ProcessModel) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{149}
}

func (x *ProcessModel) GetTradingPeer() *TradingPeer {
	if x != nil {
		return x.TradingPeer
	}
	return nil
}

func (x *ProcessModel) GetOfferId() string {
	if x != nil {
		return x.OfferId
	}
	return ""
}

func (x *ProcessModel) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *ProcessModel) GetPubKeyRing() *PubKeyRing {
	if x != nil {
		return x.PubKeyRing
	}
	return nil
}

func (x *ProcessModel) GetTakeOfferFeeTxId() string {
	if x != nil {
		return x.TakeOfferFeeTxId
	}
	return ""
}

func (x *ProcessModel) GetPayoutTxSignature() []byte {
	if x != nil {
		return x.PayoutTxSignature
	}
	return nil
}

func (x *ProcessModel) GetPreparedDepositTx() []byte {
	if x != nil {
		return x.PreparedDepositTx
	}
	return nil
}

func (x *ProcessModel) GetRawTransactionInputs() []*RawTransactionInput {
	if x != nil {
		return x.RawTransactionInputs
	}
	return nil
}

func (x *ProcessModel) GetChangeOutputValue() int64 {
	if x != nil {
		return x.ChangeOutputValue
	}
	return 0
}

func (x *ProcessModel) GetChangeOutputAddress() string {
	if x != nil {
		return x.ChangeOutputAddress
	}
	return ""
}

func (x *ProcessModel) GetUseSavingsWallet() bool {
	if x != nil {
		return x.UseSavingsWallet
	}
	return false
}

func (x *ProcessModel) GetFundsNeededForTradeAsLong() int64 {
	if x != nil {
		return x.FundsNeededForTradeAsLong
	}
	return 0
}

func (x *ProcessModel) GetMyMultiSigPubKey() []byte {
	if x != nil {
		return x.MyMultiSigPubKey
	}
	return nil
}

func (x *ProcessModel) GetTempTradingPeerNodeAddress() *NodeAddress {
	if x != nil {
		return x.TempTradingPeerNodeAddress
	}
	return nil
}

func (x *ProcessModel) GetPaymentStartedMessageState() string {
	if x != nil {
		return x.PaymentStartedMessageState
	}
	return ""
}

func (x *ProcessModel) GetMediatedPayoutTxSignature() []byte {
	if x != nil {
		return x.MediatedPayoutTxSignature
	}
	return nil
}

func (x *ProcessModel) GetBuyerPayoutAmountFromMediation() int64 {
	if x != nil {
		return x.BuyerPayoutAmountFromMediation
	}
	return 0
}

func (x *ProcessModel) GetSellerPayoutAmountFromMediation() int64 {
	if x != nil {
		return x.SellerPayoutAmountFromMediation
	}
	return 0
}

type TradingPeer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId                  string                 `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	PaymentAccountPayload      *PaymentAccountPayload `protobuf:"bytes,2,opt,name=payment_account_payload,json=paymentAccountPayload,proto3" json:"payment_account_payload,omitempty"`
	PayoutAddressString        string                 `protobuf:"bytes,3,opt,name=payout_address_string,json=payoutAddressString,proto3" json:"payout_address_string,omitempty"`
	ContractAsJson             string                 `protobuf:"bytes,4,opt,name=contract_as_json,json=contractAsJson,proto3" json:"contract_as_json,omitempty"`
	ContractSignature          string                 `protobuf:"bytes,5,opt,name=contract_signature,json=contractSignature,proto3" json:"contract_signature,omitempty"`
	Signature                  []byte                 `protobuf:"bytes,6,opt,name=signature,proto3" json:"signature,omitempty"`
	PubKeyRing                 *PubKeyRing            `protobuf:"bytes,7,opt,name=pub_key_ring,json=pubKeyRing,proto3" json:"pub_key_ring,omitempty"`
	MultiSigPubKey             []byte                 `protobuf:"bytes,8,opt,name=multi_sig_pub_key,json=multiSigPubKey,proto3" json:"multi_sig_pub_key,omitempty"`
	RawTransactionInputs       []*RawTransactionInput `protobuf:"bytes,9,rep,name=raw_transaction_inputs,json=rawTransactionInputs,proto3" json:"raw_transaction_inputs,omitempty"`
	ChangeOutputValue          int64                  `protobuf:"varint,10,opt,name=change_output_value,json=changeOutputValue,proto3" json:"change_output_value,omitempty"`
	ChangeOutputAddress        string                 `protobuf:"bytes,11,opt,name=change_output_address,json=changeOutputAddress,proto3" json:"change_output_address,omitempty"`
	AccountAgeWitnessNonce     []byte                 `protobuf:"bytes,12,opt,name=account_age_witness_nonce,json=accountAgeWitnessNonce,proto3" json:"account_age_witness_nonce,omitempty"`
	AccountAgeWitnessSignature []byte                 `protobuf:"bytes,13,opt,name=account_age_witness_signature,json=accountAgeWitnessSignature,proto3" json:"account_age_witness_signature,omitempty"`
	CurrentDate                int64                  `protobuf:"varint,14,opt,name=current_date,json=currentDate,proto3" json:"current_date,omitempty"`
	MediatedPayoutTxSignature  []byte                 `protobuf:"bytes,15,opt,name=mediated_payout_tx_signature,json=mediatedPayoutTxSignature,proto3" json:"mediated_payout_tx_signature,omitempty"`
}

func (x *TradingPeer) Reset() {
	*x = TradingPeer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[150]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradingPeer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradingPeer) ProtoMessage() {}

func (x *TradingPeer) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[150]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradingPeer.ProtoReflect.Descriptor instead.
func (*TradingPeer) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{150}
}

func (x *TradingPeer) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *TradingPeer) GetPaymentAccountPayload() *PaymentAccountPayload {
	if x != nil {
		return x.PaymentAccountPayload
	}
	return nil
}

func (x *TradingPeer) GetPayoutAddressString() string {
	if x != nil {
		return x.PayoutAddressString
	}
	return ""
}

func (x *TradingPeer) GetContractAsJson() string {
	if x != nil {
		return x.ContractAsJson
	}
	return ""
}

func (x *TradingPeer) GetContractSignature() string {
	if x != nil {
		return x.ContractSignature
	}
	return ""
}

func (x *TradingPeer) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *TradingPeer) GetPubKeyRing() *PubKeyRing {
	if x != nil {
		return x.PubKeyRing
	}
	return nil
}

func (x *TradingPeer) GetMultiSigPubKey() []byte {
	if x != nil {
		return x.MultiSigPubKey
	}
	return nil
}

func (x *TradingPeer) GetRawTransactionInputs() []*RawTransactionInput {
	if x != nil {
		return x.RawTransactionInputs
	}
	return nil
}

func (x *TradingPeer) GetChangeOutputValue() int64 {
	if x != nil {
		return x.ChangeOutputValue
	}
	return 0
}

func (x *TradingPeer) GetChangeOutputAddress() string {
	if x != nil {
		return x.ChangeOutputAddress
	}
	return ""
}

func (x *TradingPeer) GetAccountAgeWitnessNonce() []byte {
	if x != nil {
		return x.AccountAgeWitnessNonce
	}
	return nil
}

func (x *TradingPeer) GetAccountAgeWitnessSignature() []byte {
	if x != nil {
		return x.AccountAgeWitnessSignature
	}
	return nil
}

func (x *TradingPeer) GetCurrentDate() int64 {
	if x != nil {
		return x.CurrentDate
	}
	return 0
}

func (x *TradingPeer) GetMediatedPayoutTxSignature() []byte {
	if x != nil {
		return x.MediatedPayoutTxSignature
	}
	return nil
}

type ArbitrationDisputeList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dispute []*Dispute `protobuf:"bytes,1,rep,name=dispute,proto3" json:"dispute,omitempty"`
}

func (x *ArbitrationDisputeList) Reset() {
	*x = ArbitrationDisputeList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[151]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArbitrationDisputeList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArbitrationDisputeList) ProtoMessage() {}

func (x *ArbitrationDisputeList) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[151]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArbitrationDisputeList.ProtoReflect.Descriptor instead.
func (*ArbitrationDisputeList) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{151}
}

func (x *ArbitrationDisputeList) GetDispute() []*Dispute {
	if x != nil {
		return x.Dispute
	}
	return nil
}

type MediationDisputeList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dispute []*Dispute `protobuf:"bytes,1,rep,name=dispute,proto3" json:"dispute,omitempty"`
}

func (x *MediationDisputeList) Reset() {
	*x = MediationDisputeList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[152]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MediationDisputeList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MediationDisputeList) ProtoMessage() {}

func (x *MediationDisputeList) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[152]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MediationDisputeList.ProtoReflect.Descriptor instead.
func (*MediationDisputeList) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{152}
}

func (x *MediationDisputeList) GetDispute() []*Dispute {
	if x != nil {
		return x.Dispute
	}
	return nil
}

type RefundDisputeList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dispute []*Dispute `protobuf:"bytes,1,rep,name=dispute,proto3" json:"dispute,omitempty"`
}

func (x *RefundDisputeList) Reset() {
	*x = RefundDisputeList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[153]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefundDisputeList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefundDisputeList) ProtoMessage() {}

func (x *RefundDisputeList) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[153]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefundDisputeList.ProtoReflect.Descriptor instead.
func (*RefundDisputeList) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{153}
}

func (x *RefundDisputeList) GetDispute() []*Dispute {
	if x != nil {
		return x.Dispute
	}
	return nil
}

type PreferencesPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserLanguage                     string              `protobuf:"bytes,1,opt,name=user_language,json=userLanguage,proto3" json:"user_language,omitempty"`
	UserCountry                      *Country            `protobuf:"bytes,2,opt,name=user_country,json=userCountry,proto3" json:"user_country,omitempty"`
	FiatCurrencies                   []*TradeCurrency    `protobuf:"bytes,3,rep,name=fiat_currencies,json=fiatCurrencies,proto3" json:"fiat_currencies,omitempty"`
	CryptoCurrencies                 []*TradeCurrency    `protobuf:"bytes,4,rep,name=crypto_currencies,json=cryptoCurrencies,proto3" json:"crypto_currencies,omitempty"`
	BlockChainExplorerMainNet        *BlockChainExplorer `protobuf:"bytes,5,opt,name=block_chain_explorer_main_net,json=blockChainExplorerMainNet,proto3" json:"block_chain_explorer_main_net,omitempty"`
	BlockChainExplorerTestNet        *BlockChainExplorer `protobuf:"bytes,6,opt,name=block_chain_explorer_test_net,json=blockChainExplorerTestNet,proto3" json:"block_chain_explorer_test_net,omitempty"`
	BsqBlockChainExplorer            *BlockChainExplorer `protobuf:"bytes,7,opt,name=bsq_block_chain_explorer,json=bsqBlockChainExplorer,proto3" json:"bsq_block_chain_explorer,omitempty"`
	BackupDirectory                  string              `protobuf:"bytes,8,opt,name=backup_directory,json=backupDirectory,proto3" json:"backup_directory,omitempty"`
	AutoSelectArbitrators            bool                `protobuf:"varint,9,opt,name=auto_select_arbitrators,json=autoSelectArbitrators,proto3" json:"auto_select_arbitrators,omitempty"`
	DontShowAgainMap                 map[string]bool     `protobuf:"bytes,10,rep,name=dont_show_again_map,json=dontShowAgainMap,proto3" json:"dont_show_again_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	TacAccepted                      bool                `protobuf:"varint,11,opt,name=tac_accepted,json=tacAccepted,proto3" json:"tac_accepted,omitempty"`
	UseTorForBitcoinJ                bool                `protobuf:"varint,12,opt,name=use_tor_for_bitcoin_j,json=useTorForBitcoinJ,proto3" json:"use_tor_for_bitcoin_j,omitempty"`
	ShowOwnOffersInOfferBook         bool                `protobuf:"varint,13,opt,name=show_own_offers_in_offer_book,json=showOwnOffersInOfferBook,proto3" json:"show_own_offers_in_offer_book,omitempty"`
	PreferredTradeCurrency           *TradeCurrency      `protobuf:"bytes,14,opt,name=preferred_trade_currency,json=preferredTradeCurrency,proto3" json:"preferred_trade_currency,omitempty"`
	WithdrawalTxFeeInVbytes          int64               `protobuf:"varint,15,opt,name=withdrawal_tx_fee_in_vbytes,json=withdrawalTxFeeInVbytes,proto3" json:"withdrawal_tx_fee_in_vbytes,omitempty"`
	UseCustomWithdrawalTxFee         bool                `protobuf:"varint,16,opt,name=use_custom_withdrawal_tx_fee,json=useCustomWithdrawalTxFee,proto3" json:"use_custom_withdrawal_tx_fee,omitempty"`
	MaxPriceDistanceInPercent        float64             `protobuf:"fixed64,17,opt,name=max_price_distance_in_percent,json=maxPriceDistanceInPercent,proto3" json:"max_price_distance_in_percent,omitempty"`
	OfferBookChartScreenCurrencyCode string              `protobuf:"bytes,18,opt,name=offer_book_chart_screen_currency_code,json=offerBookChartScreenCurrencyCode,proto3" json:"offer_book_chart_screen_currency_code,omitempty"`
	TradeChartsScreenCurrencyCode    string              `protobuf:"bytes,19,opt,name=trade_charts_screen_currency_code,json=tradeChartsScreenCurrencyCode,proto3" json:"trade_charts_screen_currency_code,omitempty"`
	BuyScreenCurrencyCode            string              `protobuf:"bytes,20,opt,name=buy_screen_currency_code,json=buyScreenCurrencyCode,proto3" json:"buy_screen_currency_code,omitempty"`
	SellScreenCurrencyCode           string              `protobuf:"bytes,21,opt,name=sell_screen_currency_code,json=sellScreenCurrencyCode,proto3" json:"sell_screen_currency_code,omitempty"`
	TradeStatisticsTickUnitIndex     int32               `protobuf:"varint,22,opt,name=trade_statistics_tick_unit_index,json=tradeStatisticsTickUnitIndex,proto3" json:"trade_statistics_tick_unit_index,omitempty"`
	Resync_SpvRequested              bool                `protobuf:"varint,23,opt,name=resync_Spv_requested,json=resyncSpvRequested,proto3" json:"resync_Spv_requested,omitempty"`
	SortMarketCurrenciesNumerically  bool                `protobuf:"varint,24,opt,name=sort_market_currencies_numerically,json=sortMarketCurrenciesNumerically,proto3" json:"sort_market_currencies_numerically,omitempty"`
	UsePercentageBasedPrice          bool                `protobuf:"varint,25,opt,name=use_percentage_based_price,json=usePercentageBasedPrice,proto3" json:"use_percentage_based_price,omitempty"`
	PeerTagMap                       map[string]string   `protobuf:"bytes,26,rep,name=peer_tag_map,json=peerTagMap,proto3" json:"peer_tag_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	BitcoinNodes                     string              `protobuf:"bytes,27,opt,name=bitcoin_nodes,json=bitcoinNodes,proto3" json:"bitcoin_nodes,omitempty"`
	IgnoreTradersList                []string            `protobuf:"bytes,28,rep,name=ignore_traders_list,json=ignoreTradersList,proto3" json:"ignore_traders_list,omitempty"`
	DirectoryChooserPath             string              `protobuf:"bytes,29,opt,name=directory_chooser_path,json=directoryChooserPath,proto3" json:"directory_chooser_path,omitempty"`
	// Deprecated: Do not use.
	BuyerSecurityDepositAsLong             int64                  `protobuf:"varint,30,opt,name=buyer_security_deposit_as_long,json=buyerSecurityDepositAsLong,proto3" json:"buyer_security_deposit_as_long,omitempty"` // Superseded by buyerSecurityDepositAsPercent
	UseAnimations                          bool                   `protobuf:"varint,31,opt,name=use_animations,json=useAnimations,proto3" json:"use_animations,omitempty"`
	SelectedPaymentAccountForCreateOffer   *PaymentAccount        `protobuf:"bytes,32,opt,name=selectedPayment_account_for_createOffer,json=selectedPaymentAccountForCreateOffer,proto3" json:"selectedPayment_account_for_createOffer,omitempty"`
	PayFeeIn_Btc                           bool                   `protobuf:"varint,33,opt,name=pay_fee_in_Btc,json=payFeeInBtc,proto3" json:"pay_fee_in_Btc,omitempty"`
	BridgeAddresses                        []string               `protobuf:"bytes,34,rep,name=bridge_addresses,json=bridgeAddresses,proto3" json:"bridge_addresses,omitempty"`
	BridgeOptionOrdinal                    int32                  `protobuf:"varint,35,opt,name=bridge_option_ordinal,json=bridgeOptionOrdinal,proto3" json:"bridge_option_ordinal,omitempty"`
	TorTransportOrdinal                    int32                  `protobuf:"varint,36,opt,name=tor_transport_ordinal,json=torTransportOrdinal,proto3" json:"tor_transport_ordinal,omitempty"`
	CustomBridges                          string                 `protobuf:"bytes,37,opt,name=custom_bridges,json=customBridges,proto3" json:"custom_bridges,omitempty"`
	BitcoinNodesOptionOrdinal              int32                  `protobuf:"varint,38,opt,name=bitcoin_nodes_option_ordinal,json=bitcoinNodesOptionOrdinal,proto3" json:"bitcoin_nodes_option_ordinal,omitempty"`
	ReferralId                             string                 `protobuf:"bytes,39,opt,name=referral_id,json=referralId,proto3" json:"referral_id,omitempty"`
	PhoneKeyAndToken                       string                 `protobuf:"bytes,40,opt,name=phone_key_and_token,json=phoneKeyAndToken,proto3" json:"phone_key_and_token,omitempty"`
	UseSoundForMobileNotifications         bool                   `protobuf:"varint,41,opt,name=use_sound_for_mobile_notifications,json=useSoundForMobileNotifications,proto3" json:"use_sound_for_mobile_notifications,omitempty"`
	UseTradeNotifications                  bool                   `protobuf:"varint,42,opt,name=use_trade_notifications,json=useTradeNotifications,proto3" json:"use_trade_notifications,omitempty"`
	UseMarketNotifications                 bool                   `protobuf:"varint,43,opt,name=use_market_notifications,json=useMarketNotifications,proto3" json:"use_market_notifications,omitempty"`
	UsePriceNotifications                  bool                   `protobuf:"varint,44,opt,name=use_price_notifications,json=usePriceNotifications,proto3" json:"use_price_notifications,omitempty"`
	UseStandbyMode                         bool                   `protobuf:"varint,45,opt,name=use_standby_mode,json=useStandbyMode,proto3" json:"use_standby_mode,omitempty"`
	IsDaoFullNode                          bool                   `protobuf:"varint,46,opt,name=is_dao_full_node,json=isDaoFullNode,proto3" json:"is_dao_full_node,omitempty"`
	RpcUser                                string                 `protobuf:"bytes,47,opt,name=rpc_user,json=rpcUser,proto3" json:"rpc_user,omitempty"`
	RpcPw                                  string                 `protobuf:"bytes,48,opt,name=rpc_pw,json=rpcPw,proto3" json:"rpc_pw,omitempty"`
	TakeOfferSelectedPaymentAccountId      string                 `protobuf:"bytes,49,opt,name=take_offer_selected_payment_account_id,json=takeOfferSelectedPaymentAccountId,proto3" json:"take_offer_selected_payment_account_id,omitempty"`
	BuyerSecurityDepositAsPercent          float64                `protobuf:"fixed64,50,opt,name=buyer_security_deposit_as_percent,json=buyerSecurityDepositAsPercent,proto3" json:"buyer_security_deposit_as_percent,omitempty"`
	IgnoreDustThreshold                    int32                  `protobuf:"varint,51,opt,name=ignore_dust_threshold,json=ignoreDustThreshold,proto3" json:"ignore_dust_threshold,omitempty"`
	BuyerSecurityDepositAsPercentForCrypto float64                `protobuf:"fixed64,52,opt,name=buyer_security_deposit_as_percent_for_crypto,json=buyerSecurityDepositAsPercentForCrypto,proto3" json:"buyer_security_deposit_as_percent_for_crypto,omitempty"`
	BlockNotifyPort                        int32                  `protobuf:"varint,53,opt,name=block_notify_port,json=blockNotifyPort,proto3" json:"block_notify_port,omitempty"`
	CssTheme                               int32                  `protobuf:"varint,54,opt,name=css_theme,json=cssTheme,proto3" json:"css_theme,omitempty"`
	TacAcceptedV120                        bool                   `protobuf:"varint,55,opt,name=tac_accepted_v120,json=tacAcceptedV120,proto3" json:"tac_accepted_v120,omitempty"`
	AutoConfirmSettings                    []*AutoConfirmSettings `protobuf:"bytes,56,rep,name=auto_confirm_settings,json=autoConfirmSettings,proto3" json:"auto_confirm_settings,omitempty"`
	BsqAverageTrimThreshold                float64                `protobuf:"fixed64,57,opt,name=bsq_average_trim_threshold,json=bsqAverageTrimThreshold,proto3" json:"bsq_average_trim_threshold,omitempty"`
	HideNonAccountPaymentMethods           bool                   `protobuf:"varint,58,opt,name=hide_non_account_payment_methods,json=hideNonAccountPaymentMethods,proto3" json:"hide_non_account_payment_methods,omitempty"`
	ShowOffersMatchingMyAccounts           bool                   `protobuf:"varint,59,opt,name=show_offers_matching_my_accounts,json=showOffersMatchingMyAccounts,proto3" json:"show_offers_matching_my_accounts,omitempty"`
	DenyApiTaker                           bool                   `protobuf:"varint,60,opt,name=deny_api_taker,json=denyApiTaker,proto3" json:"deny_api_taker,omitempty"`
	NotifyOnPreRelease                     bool                   `protobuf:"varint,61,opt,name=notify_on_pre_release,json=notifyOnPreRelease,proto3" json:"notify_on_pre_release,omitempty"`
}

func (x *PreferencesPayload) Reset() {
	*x = PreferencesPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[154]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreferencesPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreferencesPayload) ProtoMessage() {}

func (x *PreferencesPayload) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[154]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreferencesPayload.ProtoReflect.Descriptor instead.
func (*PreferencesPayload) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{154}
}

func (x *PreferencesPayload) GetUserLanguage() string {
	if x != nil {
		return x.UserLanguage
	}
	return ""
}

func (x *PreferencesPayload) GetUserCountry() *Country {
	if x != nil {
		return x.UserCountry
	}
	return nil
}

func (x *PreferencesPayload) GetFiatCurrencies() []*TradeCurrency {
	if x != nil {
		return x.FiatCurrencies
	}
	return nil
}

func (x *PreferencesPayload) GetCryptoCurrencies() []*TradeCurrency {
	if x != nil {
		return x.CryptoCurrencies
	}
	return nil
}

func (x *PreferencesPayload) GetBlockChainExplorerMainNet() *BlockChainExplorer {
	if x != nil {
		return x.BlockChainExplorerMainNet
	}
	return nil
}

func (x *PreferencesPayload) GetBlockChainExplorerTestNet() *BlockChainExplorer {
	if x != nil {
		return x.BlockChainExplorerTestNet
	}
	return nil
}

func (x *PreferencesPayload) GetBsqBlockChainExplorer() *BlockChainExplorer {
	if x != nil {
		return x.BsqBlockChainExplorer
	}
	return nil
}

func (x *PreferencesPayload) GetBackupDirectory() string {
	if x != nil {
		return x.BackupDirectory
	}
	return ""
}

func (x *PreferencesPayload) GetAutoSelectArbitrators() bool {
	if x != nil {
		return x.AutoSelectArbitrators
	}
	return false
}

func (x *PreferencesPayload) GetDontShowAgainMap() map[string]bool {
	if x != nil {
		return x.DontShowAgainMap
	}
	return nil
}

func (x *PreferencesPayload) GetTacAccepted() bool {
	if x != nil {
		return x.TacAccepted
	}
	return false
}

func (x *PreferencesPayload) GetUseTorForBitcoinJ() bool {
	if x != nil {
		return x.UseTorForBitcoinJ
	}
	return false
}

func (x *PreferencesPayload) GetShowOwnOffersInOfferBook() bool {
	if x != nil {
		return x.ShowOwnOffersInOfferBook
	}
	return false
}

func (x *PreferencesPayload) GetPreferredTradeCurrency() *TradeCurrency {
	if x != nil {
		return x.PreferredTradeCurrency
	}
	return nil
}

func (x *PreferencesPayload) GetWithdrawalTxFeeInVbytes() int64 {
	if x != nil {
		return x.WithdrawalTxFeeInVbytes
	}
	return 0
}

func (x *PreferencesPayload) GetUseCustomWithdrawalTxFee() bool {
	if x != nil {
		return x.UseCustomWithdrawalTxFee
	}
	return false
}

func (x *PreferencesPayload) GetMaxPriceDistanceInPercent() float64 {
	if x != nil {
		return x.MaxPriceDistanceInPercent
	}
	return 0
}

func (x *PreferencesPayload) GetOfferBookChartScreenCurrencyCode() string {
	if x != nil {
		return x.OfferBookChartScreenCurrencyCode
	}
	return ""
}

func (x *PreferencesPayload) GetTradeChartsScreenCurrencyCode() string {
	if x != nil {
		return x.TradeChartsScreenCurrencyCode
	}
	return ""
}

func (x *PreferencesPayload) GetBuyScreenCurrencyCode() string {
	if x != nil {
		return x.BuyScreenCurrencyCode
	}
	return ""
}

func (x *PreferencesPayload) GetSellScreenCurrencyCode() string {
	if x != nil {
		return x.SellScreenCurrencyCode
	}
	return ""
}

func (x *PreferencesPayload) GetTradeStatisticsTickUnitIndex() int32 {
	if x != nil {
		return x.TradeStatisticsTickUnitIndex
	}
	return 0
}

func (x *PreferencesPayload) GetResync_SpvRequested() bool {
	if x != nil {
		return x.Resync_SpvRequested
	}
	return false
}

func (x *PreferencesPayload) GetSortMarketCurrenciesNumerically() bool {
	if x != nil {
		return x.SortMarketCurrenciesNumerically
	}
	return false
}

func (x *PreferencesPayload) GetUsePercentageBasedPrice() bool {
	if x != nil {
		return x.UsePercentageBasedPrice
	}
	return false
}

func (x *PreferencesPayload) GetPeerTagMap() map[string]string {
	if x != nil {
		return x.PeerTagMap
	}
	return nil
}

func (x *PreferencesPayload) GetBitcoinNodes() string {
	if x != nil {
		return x.BitcoinNodes
	}
	return ""
}

func (x *PreferencesPayload) GetIgnoreTradersList() []string {
	if x != nil {
		return x.IgnoreTradersList
	}
	return nil
}

func (x *PreferencesPayload) GetDirectoryChooserPath() string {
	if x != nil {
		return x.DirectoryChooserPath
	}
	return ""
}

// Deprecated: Do not use.
func (x *PreferencesPayload) GetBuyerSecurityDepositAsLong() int64 {
	if x != nil {
		return x.BuyerSecurityDepositAsLong
	}
	return 0
}

func (x *PreferencesPayload) GetUseAnimations() bool {
	if x != nil {
		return x.UseAnimations
	}
	return false
}

func (x *PreferencesPayload) GetSelectedPaymentAccountForCreateOffer() *PaymentAccount {
	if x != nil {
		return x.SelectedPaymentAccountForCreateOffer
	}
	return nil
}

func (x *PreferencesPayload) GetPayFeeIn_Btc() bool {
	if x != nil {
		return x.PayFeeIn_Btc
	}
	return false
}

func (x *PreferencesPayload) GetBridgeAddresses() []string {
	if x != nil {
		return x.BridgeAddresses
	}
	return nil
}

func (x *PreferencesPayload) GetBridgeOptionOrdinal() int32 {
	if x != nil {
		return x.BridgeOptionOrdinal
	}
	return 0
}

func (x *PreferencesPayload) GetTorTransportOrdinal() int32 {
	if x != nil {
		return x.TorTransportOrdinal
	}
	return 0
}

func (x *PreferencesPayload) GetCustomBridges() string {
	if x != nil {
		return x.CustomBridges
	}
	return ""
}

func (x *PreferencesPayload) GetBitcoinNodesOptionOrdinal() int32 {
	if x != nil {
		return x.BitcoinNodesOptionOrdinal
	}
	return 0
}

func (x *PreferencesPayload) GetReferralId() string {
	if x != nil {
		return x.ReferralId
	}
	return ""
}

func (x *PreferencesPayload) GetPhoneKeyAndToken() string {
	if x != nil {
		return x.PhoneKeyAndToken
	}
	return ""
}

func (x *PreferencesPayload) GetUseSoundForMobileNotifications() bool {
	if x != nil {
		return x.UseSoundForMobileNotifications
	}
	return false
}

func (x *PreferencesPayload) GetUseTradeNotifications() bool {
	if x != nil {
		return x.UseTradeNotifications
	}
	return false
}

func (x *PreferencesPayload) GetUseMarketNotifications() bool {
	if x != nil {
		return x.UseMarketNotifications
	}
	return false
}

func (x *PreferencesPayload) GetUsePriceNotifications() bool {
	if x != nil {
		return x.UsePriceNotifications
	}
	return false
}

func (x *PreferencesPayload) GetUseStandbyMode() bool {
	if x != nil {
		return x.UseStandbyMode
	}
	return false
}

func (x *PreferencesPayload) GetIsDaoFullNode() bool {
	if x != nil {
		return x.IsDaoFullNode
	}
	return false
}

func (x *PreferencesPayload) GetRpcUser() string {
	if x != nil {
		return x.RpcUser
	}
	return ""
}

func (x *PreferencesPayload) GetRpcPw() string {
	if x != nil {
		return x.RpcPw
	}
	return ""
}

func (x *PreferencesPayload) GetTakeOfferSelectedPaymentAccountId() string {
	if x != nil {
		return x.TakeOfferSelectedPaymentAccountId
	}
	return ""
}

func (x *PreferencesPayload) GetBuyerSecurityDepositAsPercent() float64 {
	if x != nil {
		return x.BuyerSecurityDepositAsPercent
	}
	return 0
}

func (x *PreferencesPayload) GetIgnoreDustThreshold() int32 {
	if x != nil {
		return x.IgnoreDustThreshold
	}
	return 0
}

func (x *PreferencesPayload) GetBuyerSecurityDepositAsPercentForCrypto() float64 {
	if x != nil {
		return x.BuyerSecurityDepositAsPercentForCrypto
	}
	return 0
}

func (x *PreferencesPayload) GetBlockNotifyPort() int32 {
	if x != nil {
		return x.BlockNotifyPort
	}
	return 0
}

func (x *PreferencesPayload) GetCssTheme() int32 {
	if x != nil {
		return x.CssTheme
	}
	return 0
}

func (x *PreferencesPayload) GetTacAcceptedV120() bool {
	if x != nil {
		return x.TacAcceptedV120
	}
	return false
}

func (x *PreferencesPayload) GetAutoConfirmSettings() []*AutoConfirmSettings {
	if x != nil {
		return x.AutoConfirmSettings
	}
	return nil
}

func (x *PreferencesPayload) GetBsqAverageTrimThreshold() float64 {
	if x != nil {
		return x.BsqAverageTrimThreshold
	}
	return 0
}

func (x *PreferencesPayload) GetHideNonAccountPaymentMethods() bool {
	if x != nil {
		return x.HideNonAccountPaymentMethods
	}
	return false
}

func (x *PreferencesPayload) GetShowOffersMatchingMyAccounts() bool {
	if x != nil {
		return x.ShowOffersMatchingMyAccounts
	}
	return false
}

func (x *PreferencesPayload) GetDenyApiTaker() bool {
	if x != nil {
		return x.DenyApiTaker
	}
	return false
}

func (x *PreferencesPayload) GetNotifyOnPreRelease() bool {
	if x != nil {
		return x.NotifyOnPreRelease
	}
	return false
}

type AutoConfirmSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled               bool     `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	RequiredConfirmations int32    `protobuf:"varint,2,opt,name=required_confirmations,json=requiredConfirmations,proto3" json:"required_confirmations,omitempty"`
	TradeLimit            int64    `protobuf:"varint,3,opt,name=trade_limit,json=tradeLimit,proto3" json:"trade_limit,omitempty"`
	ServiceAddresses      []string `protobuf:"bytes,4,rep,name=service_addresses,json=serviceAddresses,proto3" json:"service_addresses,omitempty"`
	CurrencyCode          string   `protobuf:"bytes,5,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"`
}

func (x *AutoConfirmSettings) Reset() {
	*x = AutoConfirmSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[155]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutoConfirmSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoConfirmSettings) ProtoMessage() {}

func (x *AutoConfirmSettings) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[155]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutoConfirmSettings.ProtoReflect.Descriptor instead.
func (*AutoConfirmSettings) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{155}
}

func (x *AutoConfirmSettings) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *AutoConfirmSettings) GetRequiredConfirmations() int32 {
	if x != nil {
		return x.RequiredConfirmations
	}
	return 0
}

func (x *AutoConfirmSettings) GetTradeLimit() int64 {
	if x != nil {
		return x.TradeLimit
	}
	return 0
}

func (x *AutoConfirmSettings) GetServiceAddresses() []string {
	if x != nil {
		return x.ServiceAddresses
	}
	return nil
}

func (x *AutoConfirmSettings) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

type UserPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId                   string               `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	PaymentAccounts             []*PaymentAccount    `protobuf:"bytes,2,rep,name=payment_accounts,json=paymentAccounts,proto3" json:"payment_accounts,omitempty"`
	CurrentPaymentAccount       *PaymentAccount      `protobuf:"bytes,3,opt,name=current_payment_account,json=currentPaymentAccount,proto3" json:"current_payment_account,omitempty"`
	AcceptedLanguageLocaleCodes []string             `protobuf:"bytes,4,rep,name=accepted_language_locale_codes,json=acceptedLanguageLocaleCodes,proto3" json:"accepted_language_locale_codes,omitempty"`
	DevelopersAlert             *Alert               `protobuf:"bytes,5,opt,name=developers_alert,json=developersAlert,proto3" json:"developers_alert,omitempty"`
	DisplayedAlert              *Alert               `protobuf:"bytes,6,opt,name=displayed_alert,json=displayedAlert,proto3" json:"displayed_alert,omitempty"`
	DevelopersFilter            *Filter              `protobuf:"bytes,7,opt,name=developers_filter,json=developersFilter,proto3" json:"developers_filter,omitempty"`
	AcceptedArbitrators         []*Arbitrator        `protobuf:"bytes,8,rep,name=accepted_arbitrators,json=acceptedArbitrators,proto3" json:"accepted_arbitrators,omitempty"`
	AcceptedMediators           []*Mediator          `protobuf:"bytes,9,rep,name=accepted_mediators,json=acceptedMediators,proto3" json:"accepted_mediators,omitempty"`
	RegisteredArbitrator        *Arbitrator          `protobuf:"bytes,10,opt,name=registered_arbitrator,json=registeredArbitrator,proto3" json:"registered_arbitrator,omitempty"`
	RegisteredMediator          *Mediator            `protobuf:"bytes,11,opt,name=registered_mediator,json=registeredMediator,proto3" json:"registered_mediator,omitempty"`
	PriceAlertFilter            *PriceAlertFilter    `protobuf:"bytes,12,opt,name=price_alert_filter,json=priceAlertFilter,proto3" json:"price_alert_filter,omitempty"`
	MarketAlertFilters          []*MarketAlertFilter `protobuf:"bytes,13,rep,name=market_alert_filters,json=marketAlertFilters,proto3" json:"market_alert_filters,omitempty"`
	AcceptedRefundAgents        []*RefundAgent       `protobuf:"bytes,14,rep,name=accepted_refund_agents,json=acceptedRefundAgents,proto3" json:"accepted_refund_agents,omitempty"`
	RegisteredRefundAgent       *RefundAgent         `protobuf:"bytes,15,opt,name=registered_refund_agent,json=registeredRefundAgent,proto3" json:"registered_refund_agent,omitempty"`
	Cookie                      map[string]string    `protobuf:"bytes,16,rep,name=cookie,proto3" json:"cookie,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *UserPayload) Reset() {
	*x = UserPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[156]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserPayload) ProtoMessage() {}

func (x *UserPayload) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[156]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserPayload.ProtoReflect.Descriptor instead.
func (*UserPayload) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{156}
}

func (x *UserPayload) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *UserPayload) GetPaymentAccounts() []*PaymentAccount {
	if x != nil {
		return x.PaymentAccounts
	}
	return nil
}

func (x *UserPayload) GetCurrentPaymentAccount() *PaymentAccount {
	if x != nil {
		return x.CurrentPaymentAccount
	}
	return nil
}

func (x *UserPayload) GetAcceptedLanguageLocaleCodes() []string {
	if x != nil {
		return x.AcceptedLanguageLocaleCodes
	}
	return nil
}

func (x *UserPayload) GetDevelopersAlert() *Alert {
	if x != nil {
		return x.DevelopersAlert
	}
	return nil
}

func (x *UserPayload) GetDisplayedAlert() *Alert {
	if x != nil {
		return x.DisplayedAlert
	}
	return nil
}

func (x *UserPayload) GetDevelopersFilter() *Filter {
	if x != nil {
		return x.DevelopersFilter
	}
	return nil
}

func (x *UserPayload) GetAcceptedArbitrators() []*Arbitrator {
	if x != nil {
		return x.AcceptedArbitrators
	}
	return nil
}

func (x *UserPayload) GetAcceptedMediators() []*Mediator {
	if x != nil {
		return x.AcceptedMediators
	}
	return nil
}

func (x *UserPayload) GetRegisteredArbitrator() *Arbitrator {
	if x != nil {
		return x.RegisteredArbitrator
	}
	return nil
}

func (x *UserPayload) GetRegisteredMediator() *Mediator {
	if x != nil {
		return x.RegisteredMediator
	}
	return nil
}

func (x *UserPayload) GetPriceAlertFilter() *PriceAlertFilter {
	if x != nil {
		return x.PriceAlertFilter
	}
	return nil
}

func (x *UserPayload) GetMarketAlertFilters() []*MarketAlertFilter {
	if x != nil {
		return x.MarketAlertFilters
	}
	return nil
}

func (x *UserPayload) GetAcceptedRefundAgents() []*RefundAgent {
	if x != nil {
		return x.AcceptedRefundAgents
	}
	return nil
}

func (x *UserPayload) GetRegisteredRefundAgent() *RefundAgent {
	if x != nil {
		return x.RegisteredRefundAgent
	}
	return nil
}

func (x *UserPayload) GetCookie() map[string]string {
	if x != nil {
		return x.Cookie
	}
	return nil
}

type BaseBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Height            int32  `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	Time              int64  `protobuf:"varint,2,opt,name=time,proto3" json:"time,omitempty"`
	Hash              string `protobuf:"bytes,3,opt,name=hash,proto3" json:"hash,omitempty"`
	PreviousBlockHash string `protobuf:"bytes,4,opt,name=previous_block_hash,json=previousBlockHash,proto3" json:"previous_block_hash,omitempty"`
	// Types that are assignable to Message:
	//	*BaseBlock_RawBlock
	//	*BaseBlock_Block
	Message isBaseBlock_Message `protobuf_oneof:"message"`
}

func (x *BaseBlock) Reset() {
	*x = BaseBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[157]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BaseBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaseBlock) ProtoMessage() {}

func (x *BaseBlock) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[157]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaseBlock.ProtoReflect.Descriptor instead.
func (*BaseBlock) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{157}
}

func (x *BaseBlock) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *BaseBlock) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *BaseBlock) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *BaseBlock) GetPreviousBlockHash() string {
	if x != nil {
		return x.PreviousBlockHash
	}
	return ""
}

func (m *BaseBlock) GetMessage() isBaseBlock_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (x *BaseBlock) GetRawBlock() *RawBlock {
	if x, ok := x.GetMessage().(*BaseBlock_RawBlock); ok {
		return x.RawBlock
	}
	return nil
}

func (x *BaseBlock) GetBlock() *Block {
	if x, ok := x.GetMessage().(*BaseBlock_Block); ok {
		return x.Block
	}
	return nil
}

type isBaseBlock_Message interface {
	isBaseBlock_Message()
}

type BaseBlock_RawBlock struct {
	RawBlock *RawBlock `protobuf:"bytes,5,opt,name=raw_block,json=rawBlock,proto3,oneof"`
}

type BaseBlock_Block struct {
	Block *Block `protobuf:"bytes,6,opt,name=block,proto3,oneof"`
}

func (*BaseBlock_RawBlock) isBaseBlock_Message() {}

func (*BaseBlock_Block) isBaseBlock_Message() {}

type RawBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Because of the way how PB implements inheritance we need to use the super class as type
	RawTxs []*BaseTx `protobuf:"bytes,1,rep,name=raw_txs,json=rawTxs,proto3" json:"raw_txs,omitempty"`
}

func (x *RawBlock) Reset() {
	*x = RawBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[158]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RawBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RawBlock) ProtoMessage() {}

func (x *RawBlock) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[158]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RawBlock.ProtoReflect.Descriptor instead.
func (*RawBlock) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{158}
}

func (x *RawBlock) GetRawTxs() []*BaseTx {
	if x != nil {
		return x.RawTxs
	}
	return nil
}

type Block struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Because of the way how PB implements inheritance we need to use the super class as type
	Txs []*BaseTx `protobuf:"bytes,1,rep,name=txs,proto3" json:"txs,omitempty"`
}

func (x *Block) Reset() {
	*x = Block{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[159]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Block) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Block) ProtoMessage() {}

func (x *Block) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[159]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Block.ProtoReflect.Descriptor instead.
func (*Block) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{159}
}

func (x *Block) GetTxs() []*BaseTx {
	if x != nil {
		return x.Txs
	}
	return nil
}

type BaseTx struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxVersion   string     `protobuf:"bytes,1,opt,name=tx_version,json=txVersion,proto3" json:"tx_version,omitempty"`
	Id          string     `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	BlockHeight int32      `protobuf:"varint,3,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	BlockHash   string     `protobuf:"bytes,4,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	Time        int64      `protobuf:"varint,5,opt,name=time,proto3" json:"time,omitempty"`
	TxInputs    []*TxInput `protobuf:"bytes,6,rep,name=tx_inputs,json=txInputs,proto3" json:"tx_inputs,omitempty"`
	// Types that are assignable to Message:
	//	*BaseTx_RawTx
	//	*BaseTx_Tx
	Message isBaseTx_Message `protobuf_oneof:"message"`
}

func (x *BaseTx) Reset() {
	*x = BaseTx{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[160]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BaseTx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaseTx) ProtoMessage() {}

func (x *BaseTx) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[160]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaseTx.ProtoReflect.Descriptor instead.
func (*BaseTx) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{160}
}

func (x *BaseTx) GetTxVersion() string {
	if x != nil {
		return x.TxVersion
	}
	return ""
}

func (x *BaseTx) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *BaseTx) GetBlockHeight() int32 {
	if x != nil {
		return x.BlockHeight
	}
	return 0
}

func (x *BaseTx) GetBlockHash() string {
	if x != nil {
		return x.BlockHash
	}
	return ""
}

func (x *BaseTx) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *BaseTx) GetTxInputs() []*TxInput {
	if x != nil {
		return x.TxInputs
	}
	return nil
}

func (m *BaseTx) GetMessage() isBaseTx_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (x *BaseTx) GetRawTx() *RawTx {
	if x, ok := x.GetMessage().(*BaseTx_RawTx); ok {
		return x.RawTx
	}
	return nil
}

func (x *BaseTx) GetTx() *Tx {
	if x, ok := x.GetMessage().(*BaseTx_Tx); ok {
		return x.Tx
	}
	return nil
}

type isBaseTx_Message interface {
	isBaseTx_Message()
}

type BaseTx_RawTx struct {
	RawTx *RawTx `protobuf:"bytes,7,opt,name=raw_tx,json=rawTx,proto3,oneof"`
}

type BaseTx_Tx struct {
	Tx *Tx `protobuf:"bytes,8,opt,name=tx,proto3,oneof"`
}

func (*BaseTx_RawTx) isBaseTx_Message() {}

func (*BaseTx_Tx) isBaseTx_Message() {}

type RawTx struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Because of the way how PB implements inheritance we need to use the super class as type
	RawTxOutputs []*BaseTxOutput `protobuf:"bytes,1,rep,name=raw_tx_outputs,json=rawTxOutputs,proto3" json:"raw_tx_outputs,omitempty"`
}

func (x *RawTx) Reset() {
	*x = RawTx{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[161]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RawTx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RawTx) ProtoMessage() {}

func (x *RawTx) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[161]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RawTx.ProtoReflect.Descriptor instead.
func (*RawTx) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{161}
}

func (x *RawTx) GetRawTxOutputs() []*BaseTxOutput {
	if x != nil {
		return x.RawTxOutputs
	}
	return nil
}

type Tx struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Because of the way how PB implements inheritance we need to use the super class as type
	TxOutputs []*BaseTxOutput `protobuf:"bytes,1,rep,name=tx_outputs,json=txOutputs,proto3" json:"tx_outputs,omitempty"`
	TxType    TxType          `protobuf:"varint,2,opt,name=txType,proto3,enum=io.bisq.protobuffer.TxType" json:"txType,omitempty"`
	BurntBsq  int64           `protobuf:"varint,3,opt,name=burnt_bsq,json=burntBsq,proto3" json:"burnt_bsq,omitempty"`
}

func (x *Tx) Reset() {
	*x = Tx{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[162]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tx) ProtoMessage() {}

func (x *Tx) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[162]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tx.ProtoReflect.Descriptor instead.
func (*Tx) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{162}
}

func (x *Tx) GetTxOutputs() []*BaseTxOutput {
	if x != nil {
		return x.TxOutputs
	}
	return nil
}

func (x *Tx) GetTxType() TxType {
	if x != nil {
		return x.TxType
	}
	return TxType_PB_ERROR_TX_TYPE
}

func (x *Tx) GetBurntBsq() int64 {
	if x != nil {
		return x.BurntBsq
	}
	return 0
}

type TxInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConnectedTxOutputTxId  string `protobuf:"bytes,1,opt,name=connected_tx_output_tx_id,json=connectedTxOutputTxId,proto3" json:"connected_tx_output_tx_id,omitempty"`
	ConnectedTxOutputIndex int32  `protobuf:"varint,2,opt,name=connected_tx_output_index,json=connectedTxOutputIndex,proto3" json:"connected_tx_output_index,omitempty"`
	PubKey                 string `protobuf:"bytes,3,opt,name=pub_key,json=pubKey,proto3" json:"pub_key,omitempty"`
}

func (x *TxInput) Reset() {
	*x = TxInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[163]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxInput) ProtoMessage() {}

func (x *TxInput) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[163]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxInput.ProtoReflect.Descriptor instead.
func (*TxInput) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{163}
}

func (x *TxInput) GetConnectedTxOutputTxId() string {
	if x != nil {
		return x.ConnectedTxOutputTxId
	}
	return ""
}

func (x *TxInput) GetConnectedTxOutputIndex() int32 {
	if x != nil {
		return x.ConnectedTxOutputIndex
	}
	return 0
}

func (x *TxInput) GetPubKey() string {
	if x != nil {
		return x.PubKey
	}
	return ""
}

type BaseTxOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index        int32         `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Value        int64         `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
	TxId         string        `protobuf:"bytes,3,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
	PubKeyScript *PubKeyScript `protobuf:"bytes,4,opt,name=pub_key_script,json=pubKeyScript,proto3" json:"pub_key_script,omitempty"`
	Address      string        `protobuf:"bytes,5,opt,name=address,proto3" json:"address,omitempty"`
	OpReturnData []byte        `protobuf:"bytes,6,opt,name=op_return_data,json=opReturnData,proto3" json:"op_return_data,omitempty"`
	BlockHeight  int32         `protobuf:"varint,7,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	// Types that are assignable to Message:
	//	*BaseTxOutput_RawTxOutput
	//	*BaseTxOutput_TxOutput
	Message isBaseTxOutput_Message `protobuf_oneof:"message"`
}

func (x *BaseTxOutput) Reset() {
	*x = BaseTxOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[164]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BaseTxOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaseTxOutput) ProtoMessage() {}

func (x *BaseTxOutput) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[164]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaseTxOutput.ProtoReflect.Descriptor instead.
func (*BaseTxOutput) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{164}
}

func (x *BaseTxOutput) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *BaseTxOutput) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *BaseTxOutput) GetTxId() string {
	if x != nil {
		return x.TxId
	}
	return ""
}

func (x *BaseTxOutput) GetPubKeyScript() *PubKeyScript {
	if x != nil {
		return x.PubKeyScript
	}
	return nil
}

func (x *BaseTxOutput) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *BaseTxOutput) GetOpReturnData() []byte {
	if x != nil {
		return x.OpReturnData
	}
	return nil
}

func (x *BaseTxOutput) GetBlockHeight() int32 {
	if x != nil {
		return x.BlockHeight
	}
	return 0
}

func (m *BaseTxOutput) GetMessage() isBaseTxOutput_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (x *BaseTxOutput) GetRawTxOutput() *RawTxOutput {
	if x, ok := x.GetMessage().(*BaseTxOutput_RawTxOutput); ok {
		return x.RawTxOutput
	}
	return nil
}

func (x *BaseTxOutput) GetTxOutput() *TxOutput {
	if x, ok := x.GetMessage().(*BaseTxOutput_TxOutput); ok {
		return x.TxOutput
	}
	return nil
}

type isBaseTxOutput_Message interface {
	isBaseTxOutput_Message()
}

type BaseTxOutput_RawTxOutput struct {
	RawTxOutput *RawTxOutput `protobuf:"bytes,8,opt,name=raw_tx_output,json=rawTxOutput,proto3,oneof"`
}

type BaseTxOutput_TxOutput struct {
	TxOutput *TxOutput `protobuf:"bytes,9,opt,name=tx_output,json=txOutput,proto3,oneof"`
}

func (*BaseTxOutput_RawTxOutput) isBaseTxOutput_Message() {}

func (*BaseTxOutput_TxOutput) isBaseTxOutput_Message() {}

type UnconfirmedTxOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index int32  `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Value int64  `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
	TxId  string `protobuf:"bytes,3,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
}

func (x *UnconfirmedTxOutput) Reset() {
	*x = UnconfirmedTxOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[165]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnconfirmedTxOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnconfirmedTxOutput) ProtoMessage() {}

func (x *UnconfirmedTxOutput) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[165]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnconfirmedTxOutput.ProtoReflect.Descriptor instead.
func (*UnconfirmedTxOutput) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{165}
}

func (x *UnconfirmedTxOutput) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *UnconfirmedTxOutput) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *UnconfirmedTxOutput) GetTxId() string {
	if x != nil {
		return x.TxId
	}
	return ""
}

type RawTxOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RawTxOutput) Reset() {
	*x = RawTxOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[166]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RawTxOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RawTxOutput) ProtoMessage() {}

func (x *RawTxOutput) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[166]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RawTxOutput.ProtoReflect.Descriptor instead.
func (*RawTxOutput) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{166}
}

type TxOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxOutputType      TxOutputType `protobuf:"varint,1,opt,name=tx_output_type,json=txOutputType,proto3,enum=io.bisq.protobuffer.TxOutputType" json:"tx_output_type,omitempty"`
	LockTime          int32        `protobuf:"varint,2,opt,name=lock_time,json=lockTime,proto3" json:"lock_time,omitempty"`
	UnlockBlockHeight int32        `protobuf:"varint,3,opt,name=unlock_block_height,json=unlockBlockHeight,proto3" json:"unlock_block_height,omitempty"`
}

func (x *TxOutput) Reset() {
	*x = TxOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[167]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxOutput) ProtoMessage() {}

func (x *TxOutput) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[167]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxOutput.ProtoReflect.Descriptor instead.
func (*TxOutput) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{167}
}

func (x *TxOutput) GetTxOutputType() TxOutputType {
	if x != nil {
		return x.TxOutputType
	}
	return TxOutputType_PB_ERROR_TX_OUTPUT_TYPE
}

func (x *TxOutput) GetLockTime() int32 {
	if x != nil {
		return x.LockTime
	}
	return 0
}

func (x *TxOutput) GetUnlockBlockHeight() int32 {
	if x != nil {
		return x.UnlockBlockHeight
	}
	return 0
}

type SpentInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockHeight int64  `protobuf:"varint,1,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	TxId        string `protobuf:"bytes,2,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
	InputIndex  int32  `protobuf:"varint,3,opt,name=input_index,json=inputIndex,proto3" json:"input_index,omitempty"`
}

func (x *SpentInfo) Reset() {
	*x = SpentInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[168]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpentInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpentInfo) ProtoMessage() {}

func (x *SpentInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[168]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpentInfo.ProtoReflect.Descriptor instead.
func (*SpentInfo) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{168}
}

func (x *SpentInfo) GetBlockHeight() int64 {
	if x != nil {
		return x.BlockHeight
	}
	return 0
}

func (x *SpentInfo) GetTxId() string {
	if x != nil {
		return x.TxId
	}
	return ""
}

func (x *SpentInfo) GetInputIndex() int32 {
	if x != nil {
		return x.InputIndex
	}
	return 0
}

type PubKeyScript struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReqSigs    int32      `protobuf:"varint,1,opt,name=req_sigs,json=reqSigs,proto3" json:"req_sigs,omitempty"`
	ScriptType ScriptType `protobuf:"varint,2,opt,name=script_type,json=scriptType,proto3,enum=io.bisq.protobuffer.ScriptType" json:"script_type,omitempty"`
	Addresses  []string   `protobuf:"bytes,3,rep,name=addresses,proto3" json:"addresses,omitempty"`
	Asm        string     `protobuf:"bytes,4,opt,name=asm,proto3" json:"asm,omitempty"`
	Hex        string     `protobuf:"bytes,5,opt,name=hex,proto3" json:"hex,omitempty"`
}

func (x *PubKeyScript) Reset() {
	*x = PubKeyScript{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[169]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PubKeyScript) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PubKeyScript) ProtoMessage() {}

func (x *PubKeyScript) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[169]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PubKeyScript.ProtoReflect.Descriptor instead.
func (*PubKeyScript) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{169}
}

func (x *PubKeyScript) GetReqSigs() int32 {
	if x != nil {
		return x.ReqSigs
	}
	return 0
}

func (x *PubKeyScript) GetScriptType() ScriptType {
	if x != nil {
		return x.ScriptType
	}
	return ScriptType_PB_ERROR_SCRIPT_TYPES
}

func (x *PubKeyScript) GetAddresses() []string {
	if x != nil {
		return x.Addresses
	}
	return nil
}

func (x *PubKeyScript) GetAsm() string {
	if x != nil {
		return x.Asm
	}
	return ""
}

func (x *PubKeyScript) GetHex() string {
	if x != nil {
		return x.Hex
	}
	return ""
}

type DaoPhase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PhaseOrdinal int32 `protobuf:"varint,1,opt,name=phase_ordinal,json=phaseOrdinal,proto3" json:"phase_ordinal,omitempty"`
	Duration     int32 `protobuf:"varint,2,opt,name=duration,proto3" json:"duration,omitempty"`
}

func (x *DaoPhase) Reset() {
	*x = DaoPhase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[170]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DaoPhase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DaoPhase) ProtoMessage() {}

func (x *DaoPhase) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[170]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DaoPhase.ProtoReflect.Descriptor instead.
func (*DaoPhase) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{170}
}

func (x *DaoPhase) GetPhaseOrdinal() int32 {
	if x != nil {
		return x.PhaseOrdinal
	}
	return 0
}

func (x *DaoPhase) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

type Cycle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HeightOfFirstLock int32       `protobuf:"varint,1,opt,name=height_of_first_lock,json=heightOfFirstLock,proto3" json:"height_of_first_lock,omitempty"`
	DaoPhase          []*DaoPhase `protobuf:"bytes,2,rep,name=dao_phase,json=daoPhase,proto3" json:"dao_phase,omitempty"`
}

func (x *Cycle) Reset() {
	*x = Cycle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[171]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cycle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cycle) ProtoMessage() {}

func (x *Cycle) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[171]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cycle.ProtoReflect.Descriptor instead.
func (*Cycle) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{171}
}

func (x *Cycle) GetHeightOfFirstLock() int32 {
	if x != nil {
		return x.HeightOfFirstLock
	}
	return 0
}

func (x *Cycle) GetDaoPhase() []*DaoPhase {
	if x != nil {
		return x.DaoPhase
	}
	return nil
}

type DaoState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChainHeight int32 `protobuf:"varint,1,opt,name=chain_height,json=chainHeight,proto3" json:"chain_height,omitempty"`
	// Because of the way how PB implements inheritance we need to use the super class as type
	Blocks []*BaseBlock `protobuf:"bytes,2,rep,name=blocks,proto3" json:"blocks,omitempty"`
	Cycles []*Cycle     `protobuf:"bytes,3,rep,name=cycles,proto3" json:"cycles,omitempty"`
	// Because of the way how PB implements inheritance we need to use the super class as type
	UnspentTxOutputMap             map[string]*BaseTxOutput      `protobuf:"bytes,4,rep,name=unspent_tx_output_map,json=unspentTxOutputMap,proto3" json:"unspent_tx_output_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	IssuanceMap                    map[string]*Issuance          `protobuf:"bytes,5,rep,name=issuance_map,json=issuanceMap,proto3" json:"issuance_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ConfiscatedLockupTxList        []string                      `protobuf:"bytes,6,rep,name=confiscated_lockup_tx_list,json=confiscatedLockupTxList,proto3" json:"confiscated_lockup_tx_list,omitempty"`
	SpentInfoMap                   map[string]*SpentInfo         `protobuf:"bytes,7,rep,name=spent_info_map,json=spentInfoMap,proto3" json:"spent_info_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ParamChangeList                []*ParamChange                `protobuf:"bytes,8,rep,name=param_change_list,json=paramChangeList,proto3" json:"param_change_list,omitempty"`
	EvaluatedProposalList          []*EvaluatedProposal          `protobuf:"bytes,9,rep,name=evaluated_proposal_list,json=evaluatedProposalList,proto3" json:"evaluated_proposal_list,omitempty"`
	DecryptedBallotsWithMeritsList []*DecryptedBallotsWithMerits `protobuf:"bytes,10,rep,name=decrypted_ballots_with_merits_list,json=decryptedBallotsWithMeritsList,proto3" json:"decrypted_ballots_with_merits_list,omitempty"`
}

func (x *DaoState) Reset() {
	*x = DaoState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[172]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DaoState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DaoState) ProtoMessage() {}

func (x *DaoState) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[172]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DaoState.ProtoReflect.Descriptor instead.
func (*DaoState) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{172}
}

func (x *DaoState) GetChainHeight() int32 {
	if x != nil {
		return x.ChainHeight
	}
	return 0
}

func (x *DaoState) GetBlocks() []*BaseBlock {
	if x != nil {
		return x.Blocks
	}
	return nil
}

func (x *DaoState) GetCycles() []*Cycle {
	if x != nil {
		return x.Cycles
	}
	return nil
}

func (x *DaoState) GetUnspentTxOutputMap() map[string]*BaseTxOutput {
	if x != nil {
		return x.UnspentTxOutputMap
	}
	return nil
}

func (x *DaoState) GetIssuanceMap() map[string]*Issuance {
	if x != nil {
		return x.IssuanceMap
	}
	return nil
}

func (x *DaoState) GetConfiscatedLockupTxList() []string {
	if x != nil {
		return x.ConfiscatedLockupTxList
	}
	return nil
}

func (x *DaoState) GetSpentInfoMap() map[string]*SpentInfo {
	if x != nil {
		return x.SpentInfoMap
	}
	return nil
}

func (x *DaoState) GetParamChangeList() []*ParamChange {
	if x != nil {
		return x.ParamChangeList
	}
	return nil
}

func (x *DaoState) GetEvaluatedProposalList() []*EvaluatedProposal {
	if x != nil {
		return x.EvaluatedProposalList
	}
	return nil
}

func (x *DaoState) GetDecryptedBallotsWithMeritsList() []*DecryptedBallotsWithMerits {
	if x != nil {
		return x.DecryptedBallotsWithMeritsList
	}
	return nil
}

type Issuance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxId         string `protobuf:"bytes,1,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
	ChainHeight  int32  `protobuf:"varint,2,opt,name=chain_height,json=chainHeight,proto3" json:"chain_height,omitempty"`
	Amount       int64  `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
	PubKey       string `protobuf:"bytes,4,opt,name=pub_key,json=pubKey,proto3" json:"pub_key,omitempty"`
	IssuanceType string `protobuf:"bytes,5,opt,name=issuance_type,json=issuanceType,proto3" json:"issuance_type,omitempty"`
}

func (x *Issuance) Reset() {
	*x = Issuance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[173]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Issuance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Issuance) ProtoMessage() {}

func (x *Issuance) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[173]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Issuance.ProtoReflect.Descriptor instead.
func (*Issuance) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{173}
}

func (x *Issuance) GetTxId() string {
	if x != nil {
		return x.TxId
	}
	return ""
}

func (x *Issuance) GetChainHeight() int32 {
	if x != nil {
		return x.ChainHeight
	}
	return 0
}

func (x *Issuance) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *Issuance) GetPubKey() string {
	if x != nil {
		return x.PubKey
	}
	return ""
}

func (x *Issuance) GetIssuanceType() string {
	if x != nil {
		return x.IssuanceType
	}
	return ""
}

type Proposal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Link         string `protobuf:"bytes,2,opt,name=link,proto3" json:"link,omitempty"`
	Version      uint32 `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`
	CreationDate int64  `protobuf:"varint,4,opt,name=creation_date,json=creationDate,proto3" json:"creation_date,omitempty"`
	TxId         string `protobuf:"bytes,5,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
	// Types that are assignable to Message:
	//	*Proposal_CompensationProposal
	//	*Proposal_ReimbursementProposal
	//	*Proposal_ChangeParamProposal
	//	*Proposal_RoleProposal
	//	*Proposal_ConfiscateBondProposal
	//	*Proposal_GenericProposal
	//	*Proposal_RemoveAssetProposal
	Message isProposal_Message `protobuf_oneof:"message"`
	// We leave some index space here in case we add more subclasses
	ExtraData map[string]string `protobuf:"bytes,20,rep,name=extra_data,json=extraData,proto3" json:"extra_data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Proposal) Reset() {
	*x = Proposal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[174]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Proposal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Proposal) ProtoMessage() {}

func (x *Proposal) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[174]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Proposal.ProtoReflect.Descriptor instead.
func (*Proposal) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{174}
}

func (x *Proposal) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Proposal) GetLink() string {
	if x != nil {
		return x.Link
	}
	return ""
}

func (x *Proposal) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *Proposal) GetCreationDate() int64 {
	if x != nil {
		return x.CreationDate
	}
	return 0
}

func (x *Proposal) GetTxId() string {
	if x != nil {
		return x.TxId
	}
	return ""
}

func (m *Proposal) GetMessage() isProposal_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (x *Proposal) GetCompensationProposal() *CompensationProposal {
	if x, ok := x.GetMessage().(*Proposal_CompensationProposal); ok {
		return x.CompensationProposal
	}
	return nil
}

func (x *Proposal) GetReimbursementProposal() *ReimbursementProposal {
	if x, ok := x.GetMessage().(*Proposal_ReimbursementProposal); ok {
		return x.ReimbursementProposal
	}
	return nil
}

func (x *Proposal) GetChangeParamProposal() *ChangeParamProposal {
	if x, ok := x.GetMessage().(*Proposal_ChangeParamProposal); ok {
		return x.ChangeParamProposal
	}
	return nil
}

func (x *Proposal) GetRoleProposal() *RoleProposal {
	if x, ok := x.GetMessage().(*Proposal_RoleProposal); ok {
		return x.RoleProposal
	}
	return nil
}

func (x *Proposal) GetConfiscateBondProposal() *ConfiscateBondProposal {
	if x, ok := x.GetMessage().(*Proposal_ConfiscateBondProposal); ok {
		return x.ConfiscateBondProposal
	}
	return nil
}

func (x *Proposal) GetGenericProposal() *GenericProposal {
	if x, ok := x.GetMessage().(*Proposal_GenericProposal); ok {
		return x.GenericProposal
	}
	return nil
}

func (x *Proposal) GetRemoveAssetProposal() *RemoveAssetProposal {
	if x, ok := x.GetMessage().(*Proposal_RemoveAssetProposal); ok {
		return x.RemoveAssetProposal
	}
	return nil
}

func (x *Proposal) GetExtraData() map[string]string {
	if x != nil {
		return x.ExtraData
	}
	return nil
}

type isProposal_Message interface {
	isProposal_Message()
}

type Proposal_CompensationProposal struct {
	CompensationProposal *CompensationProposal `protobuf:"bytes,6,opt,name=compensation_proposal,json=compensationProposal,proto3,oneof"`
}

type Proposal_ReimbursementProposal struct {
	ReimbursementProposal *ReimbursementProposal `protobuf:"bytes,7,opt,name=reimbursement_proposal,json=reimbursementProposal,proto3,oneof"`
}

type Proposal_ChangeParamProposal struct {
	ChangeParamProposal *ChangeParamProposal `protobuf:"bytes,8,opt,name=change_param_proposal,json=changeParamProposal,proto3,oneof"`
}

type Proposal_RoleProposal struct {
	RoleProposal *RoleProposal `protobuf:"bytes,9,opt,name=role_proposal,json=roleProposal,proto3,oneof"`
}

type Proposal_ConfiscateBondProposal struct {
	ConfiscateBondProposal *ConfiscateBondProposal `protobuf:"bytes,10,opt,name=confiscate_bond_proposal,json=confiscateBondProposal,proto3,oneof"`
}

type Proposal_GenericProposal struct {
	GenericProposal *GenericProposal `protobuf:"bytes,11,opt,name=generic_proposal,json=genericProposal,proto3,oneof"`
}

type Proposal_RemoveAssetProposal struct {
	RemoveAssetProposal *RemoveAssetProposal `protobuf:"bytes,12,opt,name=remove_asset_proposal,json=removeAssetProposal,proto3,oneof"`
}

func (*Proposal_CompensationProposal) isProposal_Message() {}

func (*Proposal_ReimbursementProposal) isProposal_Message() {}

func (*Proposal_ChangeParamProposal) isProposal_Message() {}

func (*Proposal_RoleProposal) isProposal_Message() {}

func (*Proposal_ConfiscateBondProposal) isProposal_Message() {}

func (*Proposal_GenericProposal) isProposal_Message() {}

func (*Proposal_RemoveAssetProposal) isProposal_Message() {}

type CompensationProposal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestedBsq int64  `protobuf:"varint,1,opt,name=requested_bsq,json=requestedBsq,proto3" json:"requested_bsq,omitempty"`
	BsqAddress   string `protobuf:"bytes,2,opt,name=bsq_address,json=bsqAddress,proto3" json:"bsq_address,omitempty"`
}

func (x *CompensationProposal) Reset() {
	*x = CompensationProposal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[175]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompensationProposal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompensationProposal) ProtoMessage() {}

func (x *CompensationProposal) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[175]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompensationProposal.ProtoReflect.Descriptor instead.
func (*CompensationProposal) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{175}
}

func (x *CompensationProposal) GetRequestedBsq() int64 {
	if x != nil {
		return x.RequestedBsq
	}
	return 0
}

func (x *CompensationProposal) GetBsqAddress() string {
	if x != nil {
		return x.BsqAddress
	}
	return ""
}

type ReimbursementProposal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestedBsq int64  `protobuf:"varint,1,opt,name=requested_bsq,json=requestedBsq,proto3" json:"requested_bsq,omitempty"`
	BsqAddress   string `protobuf:"bytes,2,opt,name=bsq_address,json=bsqAddress,proto3" json:"bsq_address,omitempty"`
}

func (x *ReimbursementProposal) Reset() {
	*x = ReimbursementProposal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[176]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReimbursementProposal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReimbursementProposal) ProtoMessage() {}

func (x *ReimbursementProposal) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[176]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReimbursementProposal.ProtoReflect.Descriptor instead.
func (*ReimbursementProposal) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{176}
}

func (x *ReimbursementProposal) GetRequestedBsq() int64 {
	if x != nil {
		return x.RequestedBsq
	}
	return 0
}

func (x *ReimbursementProposal) GetBsqAddress() string {
	if x != nil {
		return x.BsqAddress
	}
	return ""
}

type ChangeParamProposal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Param      string `protobuf:"bytes,1,opt,name=param,proto3" json:"param,omitempty"` // name of enum
	ParamValue string `protobuf:"bytes,2,opt,name=param_value,json=paramValue,proto3" json:"param_value,omitempty"`
}

func (x *ChangeParamProposal) Reset() {
	*x = ChangeParamProposal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[177]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeParamProposal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeParamProposal) ProtoMessage() {}

func (x *ChangeParamProposal) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[177]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeParamProposal.ProtoReflect.Descriptor instead.
func (*ChangeParamProposal) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{177}
}

func (x *ChangeParamProposal) GetParam() string {
	if x != nil {
		return x.Param
	}
	return ""
}

func (x *ChangeParamProposal) GetParamValue() string {
	if x != nil {
		return x.ParamValue
	}
	return ""
}

type RoleProposal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Role             *Role `protobuf:"bytes,1,opt,name=role,proto3" json:"role,omitempty"`
	RequiredBondUnit int64 `protobuf:"varint,2,opt,name=required_bond_unit,json=requiredBondUnit,proto3" json:"required_bond_unit,omitempty"`
	UnlockTime       int32 `protobuf:"varint,3,opt,name=unlock_time,json=unlockTime,proto3" json:"unlock_time,omitempty"`
}

func (x *RoleProposal) Reset() {
	*x = RoleProposal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[178]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoleProposal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoleProposal) ProtoMessage() {}

func (x *RoleProposal) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[178]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoleProposal.ProtoReflect.Descriptor instead.
func (*RoleProposal) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{178}
}

func (x *RoleProposal) GetRole() *Role {
	if x != nil {
		return x.Role
	}
	return nil
}

func (x *RoleProposal) GetRequiredBondUnit() int64 {
	if x != nil {
		return x.RequiredBondUnit
	}
	return 0
}

func (x *RoleProposal) GetUnlockTime() int32 {
	if x != nil {
		return x.UnlockTime
	}
	return 0
}

type ConfiscateBondProposal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LockupTxId string `protobuf:"bytes,1,opt,name=lockup_tx_id,json=lockupTxId,proto3" json:"lockup_tx_id,omitempty"`
}

func (x *ConfiscateBondProposal) Reset() {
	*x = ConfiscateBondProposal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[179]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfiscateBondProposal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfiscateBondProposal) ProtoMessage() {}

func (x *ConfiscateBondProposal) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[179]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfiscateBondProposal.ProtoReflect.Descriptor instead.
func (*ConfiscateBondProposal) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{179}
}

func (x *ConfiscateBondProposal) GetLockupTxId() string {
	if x != nil {
		return x.LockupTxId
	}
	return ""
}

type GenericProposal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GenericProposal) Reset() {
	*x = GenericProposal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[180]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenericProposal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenericProposal) ProtoMessage() {}

func (x *GenericProposal) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[180]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenericProposal.ProtoReflect.Descriptor instead.
func (*GenericProposal) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{180}
}

type RemoveAssetProposal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TickerSymbol string `protobuf:"bytes,1,opt,name=ticker_symbol,json=tickerSymbol,proto3" json:"ticker_symbol,omitempty"`
}

func (x *RemoveAssetProposal) Reset() {
	*x = RemoveAssetProposal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[181]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveAssetProposal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveAssetProposal) ProtoMessage() {}

func (x *RemoveAssetProposal) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[181]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveAssetProposal.ProtoReflect.Descriptor instead.
func (*RemoveAssetProposal) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{181}
}

func (x *RemoveAssetProposal) GetTickerSymbol() string {
	if x != nil {
		return x.TickerSymbol
	}
	return ""
}

type Role struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid            string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Name           string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Link           string `protobuf:"bytes,3,opt,name=link,proto3" json:"link,omitempty"`
	BondedRoleType string `protobuf:"bytes,4,opt,name=bonded_role_type,json=bondedRoleType,proto3" json:"bonded_role_type,omitempty"` // name of BondedRoleType enum
}

func (x *Role) Reset() {
	*x = Role{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[182]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Role) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Role) ProtoMessage() {}

func (x *Role) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[182]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Role.ProtoReflect.Descriptor instead.
func (*Role) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{182}
}

func (x *Role) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *Role) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Role) GetLink() string {
	if x != nil {
		return x.Link
	}
	return ""
}

func (x *Role) GetBondedRoleType() string {
	if x != nil {
		return x.BondedRoleType
	}
	return ""
}

type MyReputation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid  string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Salt []byte `protobuf:"bytes,2,opt,name=salt,proto3" json:"salt,omitempty"`
}

func (x *MyReputation) Reset() {
	*x = MyReputation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[183]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MyReputation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MyReputation) ProtoMessage() {}

func (x *MyReputation) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[183]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MyReputation.ProtoReflect.Descriptor instead.
func (*MyReputation) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{183}
}

func (x *MyReputation) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *MyReputation) GetSalt() []byte {
	if x != nil {
		return x.Salt
	}
	return nil
}

type MyReputationList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MyReputation []*MyReputation `protobuf:"bytes,1,rep,name=my_reputation,json=myReputation,proto3" json:"my_reputation,omitempty"`
}

func (x *MyReputationList) Reset() {
	*x = MyReputationList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[184]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MyReputationList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MyReputationList) ProtoMessage() {}

func (x *MyReputationList) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[184]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MyReputationList.ProtoReflect.Descriptor instead.
func (*MyReputationList) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{184}
}

func (x *MyReputationList) GetMyReputation() []*MyReputation {
	if x != nil {
		return x.MyReputation
	}
	return nil
}

type MyProofOfBurn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxId     string `protobuf:"bytes,1,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
	PreImage string `protobuf:"bytes,2,opt,name=pre_image,json=preImage,proto3" json:"pre_image,omitempty"`
}

func (x *MyProofOfBurn) Reset() {
	*x = MyProofOfBurn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[185]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MyProofOfBurn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MyProofOfBurn) ProtoMessage() {}

func (x *MyProofOfBurn) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[185]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MyProofOfBurn.ProtoReflect.Descriptor instead.
func (*MyProofOfBurn) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{185}
}

func (x *MyProofOfBurn) GetTxId() string {
	if x != nil {
		return x.TxId
	}
	return ""
}

func (x *MyProofOfBurn) GetPreImage() string {
	if x != nil {
		return x.PreImage
	}
	return ""
}

type MyProofOfBurnList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MyProofOfBurn []*MyProofOfBurn `protobuf:"bytes,1,rep,name=my_proof_of_burn,json=myProofOfBurn,proto3" json:"my_proof_of_burn,omitempty"`
}

func (x *MyProofOfBurnList) Reset() {
	*x = MyProofOfBurnList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[186]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MyProofOfBurnList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MyProofOfBurnList) ProtoMessage() {}

func (x *MyProofOfBurnList) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[186]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MyProofOfBurnList.ProtoReflect.Descriptor instead.
func (*MyProofOfBurnList) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{186}
}

func (x *MyProofOfBurnList) GetMyProofOfBurn() []*MyProofOfBurn {
	if x != nil {
		return x.MyProofOfBurn
	}
	return nil
}

type UnconfirmedBsqChangeOutputList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnconfirmedTxOutput []*UnconfirmedTxOutput `protobuf:"bytes,1,rep,name=unconfirmed_tx_output,json=unconfirmedTxOutput,proto3" json:"unconfirmed_tx_output,omitempty"`
}

func (x *UnconfirmedBsqChangeOutputList) Reset() {
	*x = UnconfirmedBsqChangeOutputList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[187]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnconfirmedBsqChangeOutputList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnconfirmedBsqChangeOutputList) ProtoMessage() {}

func (x *UnconfirmedBsqChangeOutputList) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[187]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnconfirmedBsqChangeOutputList.ProtoReflect.Descriptor instead.
func (*UnconfirmedBsqChangeOutputList) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{187}
}

func (x *UnconfirmedBsqChangeOutputList) GetUnconfirmedTxOutput() []*UnconfirmedTxOutput {
	if x != nil {
		return x.UnconfirmedTxOutput
	}
	return nil
}

type TempProposalPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Proposal           *Proposal         `protobuf:"bytes,1,opt,name=proposal,proto3" json:"proposal,omitempty"`
	OwnerPubKeyEncoded []byte            `protobuf:"bytes,2,opt,name=owner_pub_key_encoded,json=ownerPubKeyEncoded,proto3" json:"owner_pub_key_encoded,omitempty"`
	ExtraData          map[string]string `protobuf:"bytes,3,rep,name=extra_data,json=extraData,proto3" json:"extra_data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *TempProposalPayload) Reset() {
	*x = TempProposalPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[188]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TempProposalPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TempProposalPayload) ProtoMessage() {}

func (x *TempProposalPayload) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[188]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TempProposalPayload.ProtoReflect.Descriptor instead.
func (*TempProposalPayload) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{188}
}

func (x *TempProposalPayload) GetProposal() *Proposal {
	if x != nil {
		return x.Proposal
	}
	return nil
}

func (x *TempProposalPayload) GetOwnerPubKeyEncoded() []byte {
	if x != nil {
		return x.OwnerPubKeyEncoded
	}
	return nil
}

func (x *TempProposalPayload) GetExtraData() map[string]string {
	if x != nil {
		return x.ExtraData
	}
	return nil
}

type ProposalPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Proposal *Proposal `protobuf:"bytes,1,opt,name=proposal,proto3" json:"proposal,omitempty"`
	Hash     []byte    `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (x *ProposalPayload) Reset() {
	*x = ProposalPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[189]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProposalPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProposalPayload) ProtoMessage() {}

func (x *ProposalPayload) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[189]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProposalPayload.ProtoReflect.Descriptor instead.
func (*ProposalPayload) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{189}
}

func (x *ProposalPayload) GetProposal() *Proposal {
	if x != nil {
		return x.Proposal
	}
	return nil
}

func (x *ProposalPayload) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

type ProposalStore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*ProposalPayload `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *ProposalStore) Reset() {
	*x = ProposalStore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[190]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProposalStore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProposalStore) ProtoMessage() {}

func (x *ProposalStore) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[190]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProposalStore.ProtoReflect.Descriptor instead.
func (*ProposalStore) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{190}
}

func (x *ProposalStore) GetItems() []*ProposalPayload {
	if x != nil {
		return x.Items
	}
	return nil
}

type TempProposalStore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*ProtectedStorageEntry `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *TempProposalStore) Reset() {
	*x = TempProposalStore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[191]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TempProposalStore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TempProposalStore) ProtoMessage() {}

func (x *TempProposalStore) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[191]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TempProposalStore.ProtoReflect.Descriptor instead.
func (*TempProposalStore) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{191}
}

func (x *TempProposalStore) GetItems() []*ProtectedStorageEntry {
	if x != nil {
		return x.Items
	}
	return nil
}

type Ballot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Proposal *Proposal `protobuf:"bytes,1,opt,name=proposal,proto3" json:"proposal,omitempty"`
	Vote     *Vote     `protobuf:"bytes,2,opt,name=vote,proto3" json:"vote,omitempty"`
}

func (x *Ballot) Reset() {
	*x = Ballot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[192]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ballot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ballot) ProtoMessage() {}

func (x *Ballot) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[192]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ballot.ProtoReflect.Descriptor instead.
func (*Ballot) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{192}
}

func (x *Ballot) GetProposal() *Proposal {
	if x != nil {
		return x.Proposal
	}
	return nil
}

func (x *Ballot) GetVote() *Vote {
	if x != nil {
		return x.Vote
	}
	return nil
}

type MyProposalList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Proposal []*Proposal `protobuf:"bytes,1,rep,name=proposal,proto3" json:"proposal,omitempty"`
}

func (x *MyProposalList) Reset() {
	*x = MyProposalList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[193]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MyProposalList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MyProposalList) ProtoMessage() {}

func (x *MyProposalList) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[193]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MyProposalList.ProtoReflect.Descriptor instead.
func (*MyProposalList) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{193}
}

func (x *MyProposalList) GetProposal() []*Proposal {
	if x != nil {
		return x.Proposal
	}
	return nil
}

type BallotList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ballot []*Ballot `protobuf:"bytes,1,rep,name=ballot,proto3" json:"ballot,omitempty"`
}

func (x *BallotList) Reset() {
	*x = BallotList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[194]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BallotList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BallotList) ProtoMessage() {}

func (x *BallotList) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[194]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BallotList.ProtoReflect.Descriptor instead.
func (*BallotList) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{194}
}

func (x *BallotList) GetBallot() []*Ballot {
	if x != nil {
		return x.Ballot
	}
	return nil
}

type ParamChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParamName        string `protobuf:"bytes,1,opt,name=param_name,json=paramName,proto3" json:"param_name,omitempty"`
	ParamValue       string `protobuf:"bytes,2,opt,name=param_value,json=paramValue,proto3" json:"param_value,omitempty"`
	ActivationHeight int32  `protobuf:"varint,3,opt,name=activation_height,json=activationHeight,proto3" json:"activation_height,omitempty"`
}

func (x *ParamChange) Reset() {
	*x = ParamChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[195]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParamChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParamChange) ProtoMessage() {}

func (x *ParamChange) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[195]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParamChange.ProtoReflect.Descriptor instead.
func (*ParamChange) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{195}
}

func (x *ParamChange) GetParamName() string {
	if x != nil {
		return x.ParamName
	}
	return ""
}

func (x *ParamChange) GetParamValue() string {
	if x != nil {
		return x.ParamValue
	}
	return ""
}

func (x *ParamChange) GetActivationHeight() int32 {
	if x != nil {
		return x.ActivationHeight
	}
	return 0
}

type ConfiscateBond struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LockupTxId string `protobuf:"bytes,1,opt,name=lockup_tx_id,json=lockupTxId,proto3" json:"lockup_tx_id,omitempty"`
}

func (x *ConfiscateBond) Reset() {
	*x = ConfiscateBond{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[196]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfiscateBond) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfiscateBond) ProtoMessage() {}

func (x *ConfiscateBond) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[196]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfiscateBond.ProtoReflect.Descriptor instead.
func (*ConfiscateBond) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{196}
}

func (x *ConfiscateBond) GetLockupTxId() string {
	if x != nil {
		return x.LockupTxId
	}
	return ""
}

type MyVote struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Height           int32       `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	BallotList       *BallotList `protobuf:"bytes,2,opt,name=ballot_list,json=ballotList,proto3" json:"ballot_list,omitempty"`
	SecretKeyEncoded []byte      `protobuf:"bytes,3,opt,name=secret_key_encoded,json=secretKeyEncoded,proto3" json:"secret_key_encoded,omitempty"`
	BlindVote        *BlindVote  `protobuf:"bytes,4,opt,name=blind_vote,json=blindVote,proto3" json:"blind_vote,omitempty"`
	Date             int64       `protobuf:"varint,5,opt,name=date,proto3" json:"date,omitempty"`
	RevealTxId       string      `protobuf:"bytes,6,opt,name=reveal_tx_id,json=revealTxId,proto3" json:"reveal_tx_id,omitempty"`
}

func (x *MyVote) Reset() {
	*x = MyVote{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[197]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MyVote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MyVote) ProtoMessage() {}

func (x *MyVote) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[197]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MyVote.ProtoReflect.Descriptor instead.
func (*MyVote) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{197}
}

func (x *MyVote) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *MyVote) GetBallotList() *BallotList {
	if x != nil {
		return x.BallotList
	}
	return nil
}

func (x *MyVote) GetSecretKeyEncoded() []byte {
	if x != nil {
		return x.SecretKeyEncoded
	}
	return nil
}

func (x *MyVote) GetBlindVote() *BlindVote {
	if x != nil {
		return x.BlindVote
	}
	return nil
}

func (x *MyVote) GetDate() int64 {
	if x != nil {
		return x.Date
	}
	return 0
}

func (x *MyVote) GetRevealTxId() string {
	if x != nil {
		return x.RevealTxId
	}
	return ""
}

type MyVoteList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MyVote []*MyVote `protobuf:"bytes,1,rep,name=my_vote,json=myVote,proto3" json:"my_vote,omitempty"`
}

func (x *MyVoteList) Reset() {
	*x = MyVoteList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[198]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MyVoteList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MyVoteList) ProtoMessage() {}

func (x *MyVoteList) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[198]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MyVoteList.ProtoReflect.Descriptor instead.
func (*MyVoteList) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{198}
}

func (x *MyVoteList) GetMyVote() []*MyVote {
	if x != nil {
		return x.MyVote
	}
	return nil
}

type VoteWithProposalTxId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProposalTxId string `protobuf:"bytes,1,opt,name=proposal_tx_id,json=proposalTxId,proto3" json:"proposal_tx_id,omitempty"`
	Vote         *Vote  `protobuf:"bytes,2,opt,name=vote,proto3" json:"vote,omitempty"`
}

func (x *VoteWithProposalTxId) Reset() {
	*x = VoteWithProposalTxId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[199]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VoteWithProposalTxId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoteWithProposalTxId) ProtoMessage() {}

func (x *VoteWithProposalTxId) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[199]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoteWithProposalTxId.ProtoReflect.Descriptor instead.
func (*VoteWithProposalTxId) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{199}
}

func (x *VoteWithProposalTxId) GetProposalTxId() string {
	if x != nil {
		return x.ProposalTxId
	}
	return ""
}

func (x *VoteWithProposalTxId) GetVote() *Vote {
	if x != nil {
		return x.Vote
	}
	return nil
}

type VoteWithProposalTxIdList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Item []*VoteWithProposalTxId `protobuf:"bytes,1,rep,name=item,proto3" json:"item,omitempty"`
}

func (x *VoteWithProposalTxIdList) Reset() {
	*x = VoteWithProposalTxIdList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[200]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VoteWithProposalTxIdList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoteWithProposalTxIdList) ProtoMessage() {}

func (x *VoteWithProposalTxIdList) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[200]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoteWithProposalTxIdList.ProtoReflect.Descriptor instead.
func (*VoteWithProposalTxIdList) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{200}
}

func (x *VoteWithProposalTxIdList) GetItem() []*VoteWithProposalTxId {
	if x != nil {
		return x.Item
	}
	return nil
}

type BlindVote struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EncryptedVotes     []byte            `protobuf:"bytes,1,opt,name=encrypted_votes,json=encryptedVotes,proto3" json:"encrypted_votes,omitempty"`
	TxId               string            `protobuf:"bytes,2,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
	Stake              int64             `protobuf:"varint,3,opt,name=stake,proto3" json:"stake,omitempty"`
	EncryptedMeritList []byte            `protobuf:"bytes,4,opt,name=encrypted_merit_list,json=encryptedMeritList,proto3" json:"encrypted_merit_list,omitempty"`
	Date               int64             `protobuf:"varint,5,opt,name=date,proto3" json:"date,omitempty"`
	ExtraData          map[string]string `protobuf:"bytes,6,rep,name=extra_data,json=extraData,proto3" json:"extra_data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *BlindVote) Reset() {
	*x = BlindVote{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[201]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlindVote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlindVote) ProtoMessage() {}

func (x *BlindVote) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[201]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlindVote.ProtoReflect.Descriptor instead.
func (*BlindVote) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{201}
}

func (x *BlindVote) GetEncryptedVotes() []byte {
	if x != nil {
		return x.EncryptedVotes
	}
	return nil
}

func (x *BlindVote) GetTxId() string {
	if x != nil {
		return x.TxId
	}
	return ""
}

func (x *BlindVote) GetStake() int64 {
	if x != nil {
		return x.Stake
	}
	return 0
}

func (x *BlindVote) GetEncryptedMeritList() []byte {
	if x != nil {
		return x.EncryptedMeritList
	}
	return nil
}

func (x *BlindVote) GetDate() int64 {
	if x != nil {
		return x.Date
	}
	return 0
}

func (x *BlindVote) GetExtraData() map[string]string {
	if x != nil {
		return x.ExtraData
	}
	return nil
}

type MyBlindVoteList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlindVote []*BlindVote `protobuf:"bytes,1,rep,name=blind_vote,json=blindVote,proto3" json:"blind_vote,omitempty"`
}

func (x *MyBlindVoteList) Reset() {
	*x = MyBlindVoteList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[202]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MyBlindVoteList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MyBlindVoteList) ProtoMessage() {}

func (x *MyBlindVoteList) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[202]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MyBlindVoteList.ProtoReflect.Descriptor instead.
func (*MyBlindVoteList) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{202}
}

func (x *MyBlindVoteList) GetBlindVote() []*BlindVote {
	if x != nil {
		return x.BlindVote
	}
	return nil
}

type BlindVoteStore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*BlindVotePayload `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *BlindVoteStore) Reset() {
	*x = BlindVoteStore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[203]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlindVoteStore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlindVoteStore) ProtoMessage() {}

func (x *BlindVoteStore) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[203]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlindVoteStore.ProtoReflect.Descriptor instead.
func (*BlindVoteStore) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{203}
}

func (x *BlindVoteStore) GetItems() []*BlindVotePayload {
	if x != nil {
		return x.Items
	}
	return nil
}

type BlindVotePayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlindVote *BlindVote `protobuf:"bytes,1,opt,name=blind_vote,json=blindVote,proto3" json:"blind_vote,omitempty"`
	Hash      []byte     `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (x *BlindVotePayload) Reset() {
	*x = BlindVotePayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[204]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlindVotePayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlindVotePayload) ProtoMessage() {}

func (x *BlindVotePayload) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[204]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlindVotePayload.ProtoReflect.Descriptor instead.
func (*BlindVotePayload) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{204}
}

func (x *BlindVotePayload) GetBlindVote() *BlindVote {
	if x != nil {
		return x.BlindVote
	}
	return nil
}

func (x *BlindVotePayload) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

type Vote struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Accepted bool `protobuf:"varint,1,opt,name=accepted,proto3" json:"accepted,omitempty"`
}

func (x *Vote) Reset() {
	*x = Vote{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[205]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vote) ProtoMessage() {}

func (x *Vote) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[205]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vote.ProtoReflect.Descriptor instead.
func (*Vote) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{205}
}

func (x *Vote) GetAccepted() bool {
	if x != nil {
		return x.Accepted
	}
	return false
}

type Merit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Issuance  *Issuance `protobuf:"bytes,1,opt,name=issuance,proto3" json:"issuance,omitempty"`
	Signature []byte    `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *Merit) Reset() {
	*x = Merit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[206]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Merit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Merit) ProtoMessage() {}

func (x *Merit) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[206]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Merit.ProtoReflect.Descriptor instead.
func (*Merit) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{206}
}

func (x *Merit) GetIssuance() *Issuance {
	if x != nil {
		return x.Issuance
	}
	return nil
}

func (x *Merit) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

type MeritList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Merit []*Merit `protobuf:"bytes,1,rep,name=merit,proto3" json:"merit,omitempty"`
}

func (x *MeritList) Reset() {
	*x = MeritList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[207]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MeritList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeritList) ProtoMessage() {}

func (x *MeritList) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[207]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeritList.ProtoReflect.Descriptor instead.
func (*MeritList) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{207}
}

func (x *MeritList) GetMerit() []*Merit {
	if x != nil {
		return x.Merit
	}
	return nil
}

type ProposalVoteResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Proposal              *Proposal `protobuf:"bytes,1,opt,name=proposal,proto3" json:"proposal,omitempty"`
	StakeOf_AcceptedVotes int64     `protobuf:"varint,2,opt,name=stake_of_Accepted_votes,json=stakeOfAcceptedVotes,proto3" json:"stake_of_Accepted_votes,omitempty"`
	StakeOf_RejectedVotes int64     `protobuf:"varint,3,opt,name=stake_of_Rejected_votes,json=stakeOfRejectedVotes,proto3" json:"stake_of_Rejected_votes,omitempty"`
	NumAcceptedVotes      int32     `protobuf:"varint,4,opt,name=num_accepted_votes,json=numAcceptedVotes,proto3" json:"num_accepted_votes,omitempty"`
	NumRejectedVotes      int32     `protobuf:"varint,5,opt,name=num_rejected_votes,json=numRejectedVotes,proto3" json:"num_rejected_votes,omitempty"`
	NumIgnoredVotes       int32     `protobuf:"varint,6,opt,name=num_ignored_votes,json=numIgnoredVotes,proto3" json:"num_ignored_votes,omitempty"`
}

func (x *ProposalVoteResult) Reset() {
	*x = ProposalVoteResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[208]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProposalVoteResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProposalVoteResult) ProtoMessage() {}

func (x *ProposalVoteResult) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[208]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProposalVoteResult.ProtoReflect.Descriptor instead.
func (*ProposalVoteResult) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{208}
}

func (x *ProposalVoteResult) GetProposal() *Proposal {
	if x != nil {
		return x.Proposal
	}
	return nil
}

func (x *ProposalVoteResult) GetStakeOf_AcceptedVotes() int64 {
	if x != nil {
		return x.StakeOf_AcceptedVotes
	}
	return 0
}

func (x *ProposalVoteResult) GetStakeOf_RejectedVotes() int64 {
	if x != nil {
		return x.StakeOf_RejectedVotes
	}
	return 0
}

func (x *ProposalVoteResult) GetNumAcceptedVotes() int32 {
	if x != nil {
		return x.NumAcceptedVotes
	}
	return 0
}

func (x *ProposalVoteResult) GetNumRejectedVotes() int32 {
	if x != nil {
		return x.NumRejectedVotes
	}
	return 0
}

func (x *ProposalVoteResult) GetNumIgnoredVotes() int32 {
	if x != nil {
		return x.NumIgnoredVotes
	}
	return 0
}

type EvaluatedProposal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsAccepted         bool                `protobuf:"varint,1,opt,name=is_accepted,json=isAccepted,proto3" json:"is_accepted,omitempty"`
	ProposalVoteResult *ProposalVoteResult `protobuf:"bytes,2,opt,name=proposal_vote_result,json=proposalVoteResult,proto3" json:"proposal_vote_result,omitempty"`
}

func (x *EvaluatedProposal) Reset() {
	*x = EvaluatedProposal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[209]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvaluatedProposal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvaluatedProposal) ProtoMessage() {}

func (x *EvaluatedProposal) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[209]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvaluatedProposal.ProtoReflect.Descriptor instead.
func (*EvaluatedProposal) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{209}
}

func (x *EvaluatedProposal) GetIsAccepted() bool {
	if x != nil {
		return x.IsAccepted
	}
	return false
}

func (x *EvaluatedProposal) GetProposalVoteResult() *ProposalVoteResult {
	if x != nil {
		return x.ProposalVoteResult
	}
	return nil
}

type DecryptedBallotsWithMerits struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HashOfBlindVoteList []byte      `protobuf:"bytes,1,opt,name=hash_of_blind_vote_list,json=hashOfBlindVoteList,proto3" json:"hash_of_blind_vote_list,omitempty"`
	BlindVoteTxId       string      `protobuf:"bytes,2,opt,name=blind_vote_tx_id,json=blindVoteTxId,proto3" json:"blind_vote_tx_id,omitempty"`
	VoteRevealTxId      string      `protobuf:"bytes,3,opt,name=vote_reveal_tx_id,json=voteRevealTxId,proto3" json:"vote_reveal_tx_id,omitempty"`
	Stake               int64       `protobuf:"varint,4,opt,name=stake,proto3" json:"stake,omitempty"`
	BallotList          *BallotList `protobuf:"bytes,5,opt,name=ballot_list,json=ballotList,proto3" json:"ballot_list,omitempty"`
	MeritList           *MeritList  `protobuf:"bytes,6,opt,name=merit_list,json=meritList,proto3" json:"merit_list,omitempty"`
}

func (x *DecryptedBallotsWithMerits) Reset() {
	*x = DecryptedBallotsWithMerits{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[210]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecryptedBallotsWithMerits) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecryptedBallotsWithMerits) ProtoMessage() {}

func (x *DecryptedBallotsWithMerits) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[210]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecryptedBallotsWithMerits.ProtoReflect.Descriptor instead.
func (*DecryptedBallotsWithMerits) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{210}
}

func (x *DecryptedBallotsWithMerits) GetHashOfBlindVoteList() []byte {
	if x != nil {
		return x.HashOfBlindVoteList
	}
	return nil
}

func (x *DecryptedBallotsWithMerits) GetBlindVoteTxId() string {
	if x != nil {
		return x.BlindVoteTxId
	}
	return ""
}

func (x *DecryptedBallotsWithMerits) GetVoteRevealTxId() string {
	if x != nil {
		return x.VoteRevealTxId
	}
	return ""
}

func (x *DecryptedBallotsWithMerits) GetStake() int64 {
	if x != nil {
		return x.Stake
	}
	return 0
}

func (x *DecryptedBallotsWithMerits) GetBallotList() *BallotList {
	if x != nil {
		return x.BallotList
	}
	return nil
}

func (x *DecryptedBallotsWithMerits) GetMeritList() *MeritList {
	if x != nil {
		return x.MeritList
	}
	return nil
}

type DaoStateStore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DaoState     *DaoState       `protobuf:"bytes,1,opt,name=dao_state,json=daoState,proto3" json:"dao_state,omitempty"`
	DaoStateHash []*DaoStateHash `protobuf:"bytes,2,rep,name=dao_state_hash,json=daoStateHash,proto3" json:"dao_state_hash,omitempty"`
}

func (x *DaoStateStore) Reset() {
	*x = DaoStateStore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[211]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DaoStateStore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DaoStateStore) ProtoMessage() {}

func (x *DaoStateStore) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[211]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DaoStateStore.ProtoReflect.Descriptor instead.
func (*DaoStateStore) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{211}
}

func (x *DaoStateStore) GetDaoState() *DaoState {
	if x != nil {
		return x.DaoState
	}
	return nil
}

func (x *DaoStateStore) GetDaoStateHash() []*DaoStateHash {
	if x != nil {
		return x.DaoStateHash
	}
	return nil
}

type DaoStateHash struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Height   int32  `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	Hash     []byte `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	PrevHash []byte `protobuf:"bytes,3,opt,name=prev_hash,json=prevHash,proto3" json:"prev_hash,omitempty"`
}

func (x *DaoStateHash) Reset() {
	*x = DaoStateHash{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[212]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DaoStateHash) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DaoStateHash) ProtoMessage() {}

func (x *DaoStateHash) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[212]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DaoStateHash.ProtoReflect.Descriptor instead.
func (*DaoStateHash) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{212}
}

func (x *DaoStateHash) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *DaoStateHash) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *DaoStateHash) GetPrevHash() []byte {
	if x != nil {
		return x.PrevHash
	}
	return nil
}

type ProposalStateHash struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Height       int32  `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	Hash         []byte `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	PrevHash     []byte `protobuf:"bytes,3,opt,name=prev_hash,json=prevHash,proto3" json:"prev_hash,omitempty"`
	NumProposals int32  `protobuf:"varint,4,opt,name=num_proposals,json=numProposals,proto3" json:"num_proposals,omitempty"`
}

func (x *ProposalStateHash) Reset() {
	*x = ProposalStateHash{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[213]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProposalStateHash) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProposalStateHash) ProtoMessage() {}

func (x *ProposalStateHash) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[213]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProposalStateHash.ProtoReflect.Descriptor instead.
func (*ProposalStateHash) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{213}
}

func (x *ProposalStateHash) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *ProposalStateHash) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *ProposalStateHash) GetPrevHash() []byte {
	if x != nil {
		return x.PrevHash
	}
	return nil
}

func (x *ProposalStateHash) GetNumProposals() int32 {
	if x != nil {
		return x.NumProposals
	}
	return 0
}

type BlindVoteStateHash struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Height        int32  `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	Hash          []byte `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	PrevHash      []byte `protobuf:"bytes,3,opt,name=prev_hash,json=prevHash,proto3" json:"prev_hash,omitempty"`
	NumBlindVotes int32  `protobuf:"varint,4,opt,name=num_blind_votes,json=numBlindVotes,proto3" json:"num_blind_votes,omitempty"`
}

func (x *BlindVoteStateHash) Reset() {
	*x = BlindVoteStateHash{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[214]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlindVoteStateHash) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlindVoteStateHash) ProtoMessage() {}

func (x *BlindVoteStateHash) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[214]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlindVoteStateHash.ProtoReflect.Descriptor instead.
func (*BlindVoteStateHash) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{214}
}

func (x *BlindVoteStateHash) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *BlindVoteStateHash) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *BlindVoteStateHash) GetPrevHash() []byte {
	if x != nil {
		return x.PrevHash
	}
	return nil
}

func (x *BlindVoteStateHash) GetNumBlindVotes() int32 {
	if x != nil {
		return x.NumBlindVotes
	}
	return 0
}

type BlockChainExplorer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	TxUrl      string `protobuf:"bytes,2,opt,name=tx_url,json=txUrl,proto3" json:"tx_url,omitempty"`
	AddressUrl string `protobuf:"bytes,3,opt,name=address_url,json=addressUrl,proto3" json:"address_url,omitempty"`
}

func (x *BlockChainExplorer) Reset() {
	*x = BlockChainExplorer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[215]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockChainExplorer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockChainExplorer) ProtoMessage() {}

func (x *BlockChainExplorer) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[215]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockChainExplorer.ProtoReflect.Descriptor instead.
func (*BlockChainExplorer) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{215}
}

func (x *BlockChainExplorer) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BlockChainExplorer) GetTxUrl() string {
	if x != nil {
		return x.TxUrl
	}
	return ""
}

func (x *BlockChainExplorer) GetAddressUrl() string {
	if x != nil {
		return x.AddressUrl
	}
	return ""
}

type PaymentAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                    string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	CreationDate          int64                  `protobuf:"varint,2,opt,name=creation_date,json=creationDate,proto3" json:"creation_date,omitempty"`
	PaymentMethod         *PaymentMethod         `protobuf:"bytes,3,opt,name=payment_method,json=paymentMethod,proto3" json:"payment_method,omitempty"`
	AccountName           string                 `protobuf:"bytes,4,opt,name=account_name,json=accountName,proto3" json:"account_name,omitempty"`
	TradeCurrencies       []*TradeCurrency       `protobuf:"bytes,5,rep,name=trade_currencies,json=tradeCurrencies,proto3" json:"trade_currencies,omitempty"`
	SelectedTradeCurrency *TradeCurrency         `protobuf:"bytes,6,opt,name=selected_trade_currency,json=selectedTradeCurrency,proto3" json:"selected_trade_currency,omitempty"`
	PaymentAccountPayload *PaymentAccountPayload `protobuf:"bytes,7,opt,name=payment_account_payload,json=paymentAccountPayload,proto3" json:"payment_account_payload,omitempty"`
}

func (x *PaymentAccount) Reset() {
	*x = PaymentAccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[216]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentAccount) ProtoMessage() {}

func (x *PaymentAccount) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[216]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentAccount.ProtoReflect.Descriptor instead.
func (*PaymentAccount) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{216}
}

func (x *PaymentAccount) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PaymentAccount) GetCreationDate() int64 {
	if x != nil {
		return x.CreationDate
	}
	return 0
}

func (x *PaymentAccount) GetPaymentMethod() *PaymentMethod {
	if x != nil {
		return x.PaymentMethod
	}
	return nil
}

func (x *PaymentAccount) GetAccountName() string {
	if x != nil {
		return x.AccountName
	}
	return ""
}

func (x *PaymentAccount) GetTradeCurrencies() []*TradeCurrency {
	if x != nil {
		return x.TradeCurrencies
	}
	return nil
}

func (x *PaymentAccount) GetSelectedTradeCurrency() *TradeCurrency {
	if x != nil {
		return x.SelectedTradeCurrency
	}
	return nil
}

func (x *PaymentAccount) GetPaymentAccountPayload() *PaymentAccountPayload {
	if x != nil {
		return x.PaymentAccountPayload
	}
	return nil
}

type PaymentMethod struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	MaxTradePeriod int64  `protobuf:"varint,2,opt,name=max_trade_period,json=maxTradePeriod,proto3" json:"max_trade_period,omitempty"`
	MaxTradeLimit  int64  `protobuf:"varint,3,opt,name=max_trade_limit,json=maxTradeLimit,proto3" json:"max_trade_limit,omitempty"`
}

func (x *PaymentMethod) Reset() {
	*x = PaymentMethod{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[217]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentMethod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentMethod) ProtoMessage() {}

func (x *PaymentMethod) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[217]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentMethod.ProtoReflect.Descriptor instead.
func (*PaymentMethod) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{217}
}

func (x *PaymentMethod) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PaymentMethod) GetMaxTradePeriod() int64 {
	if x != nil {
		return x.MaxTradePeriod
	}
	return 0
}

func (x *PaymentMethod) GetMaxTradeLimit() int64 {
	if x != nil {
		return x.MaxTradeLimit
	}
	return 0
}

type Currency struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrencyCode string `protobuf:"bytes,1,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"`
}

func (x *Currency) Reset() {
	*x = Currency{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[218]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Currency) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Currency) ProtoMessage() {}

func (x *Currency) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[218]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Currency.ProtoReflect.Descriptor instead.
func (*Currency) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{218}
}

func (x *Currency) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

type TradeCurrency struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Types that are assignable to Message:
	//	*TradeCurrency_CryptoCurrency
	//	*TradeCurrency_FiatCurrency
	Message isTradeCurrency_Message `protobuf_oneof:"message"`
}

func (x *TradeCurrency) Reset() {
	*x = TradeCurrency{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[219]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradeCurrency) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeCurrency) ProtoMessage() {}

func (x *TradeCurrency) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[219]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeCurrency.ProtoReflect.Descriptor instead.
func (*TradeCurrency) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{219}
}

func (x *TradeCurrency) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *TradeCurrency) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (m *TradeCurrency) GetMessage() isTradeCurrency_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (x *TradeCurrency) GetCryptoCurrency() *CryptoCurrency {
	if x, ok := x.GetMessage().(*TradeCurrency_CryptoCurrency); ok {
		return x.CryptoCurrency
	}
	return nil
}

func (x *TradeCurrency) GetFiatCurrency() *FiatCurrency {
	if x, ok := x.GetMessage().(*TradeCurrency_FiatCurrency); ok {
		return x.FiatCurrency
	}
	return nil
}

type isTradeCurrency_Message interface {
	isTradeCurrency_Message()
}

type TradeCurrency_CryptoCurrency struct {
	CryptoCurrency *CryptoCurrency `protobuf:"bytes,3,opt,name=crypto_currency,json=cryptoCurrency,proto3,oneof"`
}

type TradeCurrency_FiatCurrency struct {
	FiatCurrency *FiatCurrency `protobuf:"bytes,4,opt,name=fiat_currency,json=fiatCurrency,proto3,oneof"`
}

func (*TradeCurrency_CryptoCurrency) isTradeCurrency_Message() {}

func (*TradeCurrency_FiatCurrency) isTradeCurrency_Message() {}

type CryptoCurrency struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsAsset bool `protobuf:"varint,1,opt,name=is_asset,json=isAsset,proto3" json:"is_asset,omitempty"`
}

func (x *CryptoCurrency) Reset() {
	*x = CryptoCurrency{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[220]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CryptoCurrency) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CryptoCurrency) ProtoMessage() {}

func (x *CryptoCurrency) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[220]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CryptoCurrency.ProtoReflect.Descriptor instead.
func (*CryptoCurrency) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{220}
}

func (x *CryptoCurrency) GetIsAsset() bool {
	if x != nil {
		return x.IsAsset
	}
	return false
}

type FiatCurrency struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Currency *Currency `protobuf:"bytes,1,opt,name=currency,proto3" json:"currency,omitempty"`
}

func (x *FiatCurrency) Reset() {
	*x = FiatCurrency{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[221]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FiatCurrency) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FiatCurrency) ProtoMessage() {}

func (x *FiatCurrency) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[221]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FiatCurrency.ProtoReflect.Descriptor instead.
func (*FiatCurrency) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{221}
}

func (x *FiatCurrency) GetCurrency() *Currency {
	if x != nil {
		return x.Currency
	}
	return nil
}

type Country struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code   string  `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Name   string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Region *Region `protobuf:"bytes,3,opt,name=region,proto3" json:"region,omitempty"`
}

func (x *Country) Reset() {
	*x = Country{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[222]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Country) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Country) ProtoMessage() {}

func (x *Country) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[222]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Country.ProtoReflect.Descriptor instead.
func (*Country) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{222}
}

func (x *Country) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Country) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Country) GetRegion() *Region {
	if x != nil {
		return x.Region
	}
	return nil
}

type Region struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Region) Reset() {
	*x = Region{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[223]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Region) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Region) ProtoMessage() {}

func (x *Region) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[223]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Region.ProtoReflect.Descriptor instead.
func (*Region) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{223}
}

func (x *Region) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Region) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type PriceAlertFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrencyCode string `protobuf:"bytes,1,opt,name=currencyCode,proto3" json:"currencyCode,omitempty"`
	High         int64  `protobuf:"varint,2,opt,name=high,proto3" json:"high,omitempty"`
	Low          int64  `protobuf:"varint,3,opt,name=low,proto3" json:"low,omitempty"`
}

func (x *PriceAlertFilter) Reset() {
	*x = PriceAlertFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[224]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PriceAlertFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PriceAlertFilter) ProtoMessage() {}

func (x *PriceAlertFilter) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[224]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PriceAlertFilter.ProtoReflect.Descriptor instead.
func (*PriceAlertFilter) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{224}
}

func (x *PriceAlertFilter) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *PriceAlertFilter) GetHigh() int64 {
	if x != nil {
		return x.High
	}
	return 0
}

func (x *PriceAlertFilter) GetLow() int64 {
	if x != nil {
		return x.Low
	}
	return 0
}

type MarketAlertFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PaymentAccount *PaymentAccount `protobuf:"bytes,1,opt,name=payment_account,json=paymentAccount,proto3" json:"payment_account,omitempty"`
	TriggerValue   int32           `protobuf:"varint,2,opt,name=trigger_value,json=triggerValue,proto3" json:"trigger_value,omitempty"`
	IsBuyOffer     bool            `protobuf:"varint,3,opt,name=is_buy_offer,json=isBuyOffer,proto3" json:"is_buy_offer,omitempty"`
	AlertIds       []string        `protobuf:"bytes,4,rep,name=alert_ids,json=alertIds,proto3" json:"alert_ids,omitempty"`
}

func (x *MarketAlertFilter) Reset() {
	*x = MarketAlertFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[225]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketAlertFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketAlertFilter) ProtoMessage() {}

func (x *MarketAlertFilter) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[225]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketAlertFilter.ProtoReflect.Descriptor instead.
func (*MarketAlertFilter) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{225}
}

func (x *MarketAlertFilter) GetPaymentAccount() *PaymentAccount {
	if x != nil {
		return x.PaymentAccount
	}
	return nil
}

func (x *MarketAlertFilter) GetTriggerValue() int32 {
	if x != nil {
		return x.TriggerValue
	}
	return 0
}

func (x *MarketAlertFilter) GetIsBuyOffer() bool {
	if x != nil {
		return x.IsBuyOffer
	}
	return false
}

func (x *MarketAlertFilter) GetAlertIds() []string {
	if x != nil {
		return x.AlertIds
	}
	return nil
}

type MockMailboxPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message           string       `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	SenderNodeAddress *NodeAddress `protobuf:"bytes,2,opt,name=sender_node_address,json=senderNodeAddress,proto3" json:"sender_node_address,omitempty"`
	Uid               string       `protobuf:"bytes,3,opt,name=uid,proto3" json:"uid,omitempty"`
}

func (x *MockMailboxPayload) Reset() {
	*x = MockMailboxPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[226]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MockMailboxPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MockMailboxPayload) ProtoMessage() {}

func (x *MockMailboxPayload) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[226]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MockMailboxPayload.ProtoReflect.Descriptor instead.
func (*MockMailboxPayload) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{226}
}

func (x *MockMailboxPayload) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *MockMailboxPayload) GetSenderNodeAddress() *NodeAddress {
	if x != nil {
		return x.SenderNodeAddress
	}
	return nil
}

func (x *MockMailboxPayload) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

type MockPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageVersion string `protobuf:"bytes,1,opt,name=message_version,json=messageVersion,proto3" json:"message_version,omitempty"`
	Message        string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *MockPayload) Reset() {
	*x = MockPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[227]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MockPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MockPayload) ProtoMessage() {}

func (x *MockPayload) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[227]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MockPayload.ProtoReflect.Descriptor instead.
func (*MockPayload) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{227}
}

func (x *MockPayload) GetMessageVersion() string {
	if x != nil {
		return x.MessageVersion
	}
	return ""
}

func (x *MockPayload) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_pb_proto protoreflect.FileDescriptor

var file_pb_proto_rawDesc = []byte{
	0x0a, 0x08, 0x70, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x69, 0x6f, 0x2e, 0x62,
	0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x22,
	0xc8, 0x2d, 0x0a, 0x0f, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x45, 0x6e, 0x76, 0x65, 0x6c,
	0x6f, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x71, 0x0a, 0x1c,
	0x70, 0x72, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x67, 0x65, 0x74, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x65, 0x6c, 0x69, 0x6d, 0x69,
	0x6e, 0x61, 0x72, 0x79, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x48, 0x00, 0x52, 0x19, 0x70, 0x72, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x72,
	0x79, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x52, 0x0a, 0x11, 0x67, 0x65, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x69, 0x6f, 0x2e,
	0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x2e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x48, 0x00, 0x52, 0x0f, 0x67, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x65, 0x0a, 0x18, 0x67, 0x65, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x00, 0x52, 0x15, 0x67, 0x65, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x52, 0x0a, 0x11, 0x67, 0x65,
	0x74, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x50,
	0x65, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x67,
	0x65, 0x74, 0x50, 0x65, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x55,
	0x0a, 0x12, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x69, 0x6f, 0x2e,
	0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x2e, 0x47, 0x65, 0x74, 0x50, 0x65, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x48, 0x00, 0x52, 0x10, 0x67, 0x65, 0x74, 0x50, 0x65, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x48, 0x00,
	0x52, 0x04, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x2f, 0x0a, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x50, 0x6f, 0x6e, 0x67, 0x48,
	0x00, 0x52, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x12, 0x6d, 0x0a, 0x1a, 0x6f, 0x66, 0x66, 0x65, 0x72,
	0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x69, 0x6f,
	0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65,
	0x72, 0x2e, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x18, 0x6f, 0x66,
	0x66, 0x65, 0x72, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x70, 0x0a, 0x1b, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x5f,
	0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x69, 0x6f,
	0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65,
	0x72, 0x2e, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x19, 0x6f,
	0x66, 0x66, 0x65, 0x72, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a, 0x15, 0x72, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x5f, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73,
	0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x52, 0x65,
	0x66, 0x72, 0x65, 0x73, 0x68, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x48, 0x00, 0x52, 0x13, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x4f, 0x66, 0x66, 0x65,
	0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x4f, 0x0a, 0x10, 0x61, 0x64, 0x64, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x41, 0x64, 0x64, 0x44, 0x61, 0x74, 0x61,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x61, 0x64, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x58, 0x0a, 0x13, 0x72, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00,
	0x52, 0x11, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x6e, 0x0a, 0x1b, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x6d, 0x61,
	0x69, 0x6c, 0x62, 0x6f, 0x78, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69,
	0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4d, 0x61, 0x69, 0x6c, 0x62, 0x6f, 0x78, 0x44, 0x61, 0x74, 0x61,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x18, 0x72, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x4d, 0x61, 0x69, 0x6c, 0x62, 0x6f, 0x78, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x67, 0x0a, 0x18, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x6f, 0x73,
	0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x48, 0x00, 0x52, 0x16, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x81, 0x01, 0x0a,
	0x22, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x61, 0x6c, 0x65, 0x64,
	0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x69, 0x6f, 0x2e, 0x62,
	0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e,
	0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x64, 0x53, 0x65, 0x61, 0x6c, 0x65, 0x64, 0x41, 0x6e,
	0x64, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00,
	0x52, 0x1e, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x64, 0x53, 0x65, 0x61, 0x6c, 0x65, 0x64,
	0x41, 0x6e, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x72, 0x0a, 0x1d, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x64,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x74, 0x78, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73,
	0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x54, 0x78,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x19, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x73, 0x46, 0x6f, 0x72, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x54, 0x78, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x75, 0x0a, 0x1e, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x5f, 0x66,
	0x6f, 0x72, 0x5f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x74, 0x78, 0x5f, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x69,
	0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66,
	0x65, 0x72, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x44, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x54, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52,
	0x1a, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x54, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x12, 0x64,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x74, 0x78, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73,
	0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x44, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x54, 0x78, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00,
	0x52, 0x10, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x54, 0x78, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x96, 0x01, 0x0a, 0x29, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x48, 0x00, 0x52, 0x25, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x6e, 0x0a, 0x1b, 0x70,
	0x61, 0x79, 0x6f, 0x75, 0x74, 0x5f, 0x74, 0x78, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x54, 0x78, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48,
	0x00, 0x52, 0x18, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x54, 0x78, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x65, 0x0a, 0x18, 0x6f,
	0x70, 0x65, 0x6e, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x66, 0x65, 0x72, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x4e, 0x65, 0x77, 0x44, 0x69, 0x73, 0x70, 0x75,
	0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x15, 0x6f, 0x70, 0x65,
	0x6e, 0x4e, 0x65, 0x77, 0x44, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x6e, 0x0a, 0x1b, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x65,
	0x64, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73,
	0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x50, 0x65,
	0x65, 0x72, 0x4f, 0x70, 0x65, 0x6e, 0x65, 0x64, 0x44, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x18, 0x70, 0x65, 0x65, 0x72, 0x4f, 0x70,
	0x65, 0x6e, 0x65, 0x64, 0x44, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x45, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69,
	0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x43,
	0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x63, 0x68,
	0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x61, 0x0a, 0x16, 0x64, 0x69, 0x73,
	0x70, 0x75, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x69, 0x6f, 0x2e, 0x62,
	0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e,
	0x44, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x14, 0x64, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x91, 0x01, 0x0a,
	0x28, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f,
	0x64, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x5f, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x5f, 0x74,
	0x78, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x38, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x44, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74,
	0x54, 0x78, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x23, 0x70, 0x65, 0x65,
	0x72, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x44, 0x69, 0x73, 0x70, 0x75, 0x74,
	0x65, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x54, 0x78, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x73, 0x0a, 0x1c, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x1a, 0x70, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x55, 0x0a, 0x12, 0x67, 0x65, 0x74, 0x5f, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x10, 0x67, 0x65, 0x74, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x58, 0x0a, 0x13,
	0x67, 0x65, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x69, 0x6f, 0x2e, 0x62,
	0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e,
	0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x48, 0x00, 0x52, 0x11, 0x67, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6e, 0x0a, 0x1b, 0x6e, 0x65, 0x77, 0x5f, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x69, 0x6f,
	0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65,
	0x72, 0x2e, 0x4e, 0x65, 0x77, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63,
	0x61, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x18, 0x6e, 0x65,
	0x77, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x90, 0x01, 0x0a, 0x27, 0x61, 0x64, 0x64, 0x5f, 0x70,
	0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69,
	0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x41,
	0x64, 0x64, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x48, 0x00, 0x52, 0x23, 0x61, 0x64, 0x64, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x42, 0x0a, 0x0b, 0x61, 0x63, 0x6b,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x66, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48,
	0x00, 0x52, 0x0a, 0x61, 0x63, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x80, 0x01,
	0x0a, 0x21, 0x72, 0x65, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x5f, 0x67, 0x6f, 0x76, 0x65,
	0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x69, 0x6f, 0x2e, 0x62,
	0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e,
	0x52, 0x65, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61,
	0x6e, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00,
	0x52, 0x1e, 0x72, 0x65, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x47, 0x6f, 0x76, 0x65, 0x72,
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x69, 0x0a, 0x1a, 0x6e, 0x65, 0x77, 0x5f, 0x64, 0x61, 0x6f, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x22,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x4e, 0x65, 0x77, 0x44, 0x61,
	0x6f, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x61, 0x73, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x48, 0x00, 0x52, 0x16, 0x6e, 0x65, 0x77, 0x44, 0x61, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x48, 0x61, 0x73, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x6f, 0x0a, 0x1c, 0x67,
	0x65, 0x74, 0x5f, 0x64, 0x61, 0x6f, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x68, 0x61, 0x73,
	0x68, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x23, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x6f, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x48, 0x00, 0x52, 0x18, 0x67, 0x65, 0x74, 0x44, 0x61, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48,
	0x61, 0x73, 0x68, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x72, 0x0a, 0x1d,
	0x67, 0x65, 0x74, 0x5f, 0x64, 0x61, 0x6f, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x68, 0x61,
	0x73, 0x68, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x24, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x6f,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x19, 0x67, 0x65, 0x74, 0x44, 0x61, 0x6f, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x78, 0x0a, 0x1f, 0x6e, 0x65, 0x77, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x69, 0x6f, 0x2e, 0x62,
	0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e,
	0x4e, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x48, 0x61, 0x73, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x1b, 0x6e,
	0x65, 0x77, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48,
	0x61, 0x73, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x7e, 0x0a, 0x21, 0x67, 0x65,
	0x74, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x5f, 0x68, 0x61, 0x73, 0x68, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18,
	0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x50,
	0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x61, 0x73, 0x68,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x1d, 0x67, 0x65, 0x74,
	0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x61, 0x73,
	0x68, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x81, 0x01, 0x0a, 0x22, 0x67,
	0x65, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73,
	0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x47, 0x65,
	0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x61,
	0x73, 0x68, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x1e,
	0x67, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7c,
	0x0a, 0x21, 0x6e, 0x65, 0x77, 0x5f, 0x62, 0x6c, 0x69, 0x6e, 0x64, 0x5f, 0x76, 0x6f, 0x74, 0x65,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x69, 0x6f, 0x2e, 0x62,
	0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e,
	0x4e, 0x65, 0x77, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x56, 0x6f, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x48, 0x61, 0x73, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x1c,
	0x6e, 0x65, 0x77, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x56, 0x6f, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x48, 0x61, 0x73, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x82, 0x01, 0x0a,
	0x23, 0x67, 0x65, 0x74, 0x5f, 0x62, 0x6c, 0x69, 0x6e, 0x64, 0x5f, 0x76, 0x6f, 0x74, 0x65, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x69, 0x6f, 0x2e,
	0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x2e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x56, 0x6f, 0x74, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48,
	0x00, 0x52, 0x1e, 0x67, 0x65, 0x74, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x56, 0x6f, 0x74, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x85, 0x01, 0x0a, 0x24, 0x67, 0x65, 0x74, 0x5f, 0x62, 0x6c, 0x69, 0x6e, 0x64, 0x5f,
	0x76, 0x6f, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x65,
	0x73, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x34, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x56,
	0x6f, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x1f, 0x67, 0x65, 0x74, 0x42, 0x6c, 0x69,
	0x6e, 0x64, 0x56, 0x6f, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x61, 0x73, 0x68, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x13, 0x62, 0x75, 0x6e,
	0x64, 0x6c, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x65, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x73,
	0x18, 0x2b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x42, 0x75, 0x6e,
	0x64, 0x6c, 0x65, 0x4f, 0x66, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x73, 0x48, 0x00,
	0x52, 0x11, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x4f, 0x66, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f,
	0x70, 0x65, 0x73, 0x12, 0x87, 0x01, 0x0a, 0x24, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x5f, 0x74, 0x78, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x2c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x35, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65,
	0x64, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x54, 0x78, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x20, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x74, 0x65, 0x64, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x54, 0x78, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x87, 0x01,
	0x0a, 0x24, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x79, 0x6f, 0x75,
	0x74, 0x5f, 0x74, 0x78, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x69,
	0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66,
	0x65, 0x72, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x64, 0x50, 0x61, 0x79, 0x6f, 0x75,
	0x74, 0x54, 0x78, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x20, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x64, 0x50,
	0x61, 0x79, 0x6f, 0x75, 0x74, 0x54, 0x78, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x84, 0x01, 0x0a, 0x23, 0x64, 0x65, 0x6c, 0x61,
	0x79, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x5f, 0x74, 0x78, 0x5f, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18,
	0x2e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x61,
	0x79, 0x65, 0x64, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x54, 0x78, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x1f, 0x64,
	0x65, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x54, 0x78, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x87,
	0x01, 0x0a, 0x24, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x79, 0x6f, 0x75,
	0x74, 0x5f, 0x74, 0x78, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e,
	0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x66, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x50, 0x61, 0x79, 0x6f, 0x75,
	0x74, 0x54, 0x78, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x20, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x50,
	0x61, 0x79, 0x6f, 0x75, 0x74, 0x54, 0x78, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8f, 0x01, 0x0a, 0x28, 0x64, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x5f, 0x74, 0x78, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x64, 0x65, 0x6c, 0x61,
	0x79, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x5f, 0x74, 0x78, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x30, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x69, 0x6f,
	0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65,
	0x72, 0x2e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x54, 0x78, 0x41, 0x6e, 0x64, 0x44, 0x65,
	0x6c, 0x61, 0x79, 0x65, 0x64, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x54, 0x78, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x22, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x54,
	0x78, 0x41, 0x6e, 0x64, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x50, 0x61, 0x79, 0x6f, 0x75,
	0x74, 0x54, 0x78, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x91, 0x01, 0x0a, 0x28, 0x70,
	0x65, 0x65, 0x72, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x64, 0x65,
	0x6c, 0x61, 0x79, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x5f, 0x74, 0x78, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x31, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e,
	0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x66, 0x65, 0x72, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x54, 0x78,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x23, 0x70, 0x65, 0x65, 0x72, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x50,
	0x61, 0x79, 0x6f, 0x75, 0x74, 0x54, 0x78, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x72,
	0x0a, 0x1b, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x32, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73,
	0x68, 0x54, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x42, 0x02, 0x18, 0x01, 0x48, 0x00, 0x52, 0x18, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73,
	0x68, 0x54, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x78, 0x0a, 0x1d, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x5f, 0x77, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x69, 0x6f, 0x2e, 0x62,
	0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x57, 0x69, 0x74, 0x6e,
	0x65, 0x73, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x02, 0x18, 0x01, 0x48, 0x00,
	0x52, 0x1a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x57, 0x69,
	0x74, 0x6e, 0x65, 0x73, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x5e, 0x0a, 0x15,
	0x67, 0x65, 0x74, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x69, 0x6f,
	0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65,
	0x72, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x13, 0x67, 0x65, 0x74, 0x49, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x61, 0x0a, 0x16,
	0x67, 0x65, 0x74, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x35, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x69,
	0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66,
	0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x14, 0x67, 0x65, 0x74, 0x49, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42,
	0x09, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x57, 0x0a, 0x11, 0x42, 0x75,
	0x6e, 0x64, 0x6c, 0x65, 0x4f, 0x66, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x73, 0x12,
	0x42, 0x0a, 0x09, 0x65, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x52, 0x09, 0x65, 0x6e, 0x76, 0x65, 0x6c, 0x6f,
	0x70, 0x65, 0x73, 0x22, 0xa7, 0x01, 0x0a, 0x19, 0x50, 0x72, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x6e,
	0x61, 0x72, 0x79, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x78, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0c,
	0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x35, 0x0a, 0x16,
	0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x15, 0x73, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xed, 0x02,
	0x0a, 0x0f, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6e, 0x6f, 0x6e,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x3e, 0x0a, 0x1c, 0x69, 0x73, 0x5f, 0x67, 0x65, 0x74,
	0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x69, 0x73,
	0x47, 0x65, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73,
	0x65, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69,
	0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x57, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x52, 0x07, 0x64, 0x61, 0x74, 0x61, 0x53, 0x65, 0x74, 0x12, 0x35, 0x0a, 0x16, 0x73,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x15, 0x73, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x12, 0x79, 0x0a, 0x21, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x66, 0x65, 0x72, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x1e, 0x70,
	0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xbe, 0x01,
	0x0a, 0x15, 0x47, 0x65, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x50, 0x0a, 0x13, 0x73, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x11, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4e, 0x6f,
	0x64, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e,
	0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0c, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64,
	0x4b, 0x65, 0x79, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xf2,
	0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x50, 0x65, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x50, 0x0a, 0x13, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x64,
	0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x52, 0x11, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x35, 0x0a, 0x16, 0x73, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x15, 0x73, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x64, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x12, 0x40, 0x0a, 0x0e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x65,
	0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x69, 0x6f, 0x2e, 0x62,
	0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e,
	0x50, 0x65, 0x65, 0x72, 0x52, 0x0d, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x50, 0x65,
	0x65, 0x72, 0x73, 0x22, 0xb0, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x50, 0x65, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x5f, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x40, 0x0a,
	0x0e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x50, 0x65, 0x65, 0x72,
	0x52, 0x0d, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x50, 0x65, 0x65, 0x72, 0x73, 0x12,
	0x35, 0x0a, 0x16, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x70,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x15, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x22, 0x4d, 0x0a, 0x04, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x14,
	0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6e,
	0x6f, 0x6e, 0x63, 0x65, 0x12, 0x2f, 0x0a, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x5f, 0x74, 0x72, 0x69, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x72, 0x69,
	0x70, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x2b, 0x0a, 0x04, 0x50, 0x6f, 0x6e, 0x67, 0x12, 0x23, 0x0a,
	0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4e, 0x6f, 0x6e,
	0x63, 0x65, 0x22, 0x2f, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f,
	0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0xac, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x09,
	0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x38, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f,
	0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x69, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x1a, 0x3c, 0x0a, 0x0e, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72,
	0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x9a, 0x02, 0x0a, 0x18, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x41, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x19, 0x0a, 0x08, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x0c, 0x70, 0x75,
	0x62, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x52, 0x69, 0x6e,
	0x67, 0x52, 0x0a, 0x70, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x52, 0x69, 0x6e, 0x67, 0x12, 0x2c, 0x0a,
	0x12, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x74, 0x61, 0x6b, 0x65, 0x72,
	0x73, 0x54, 0x72, 0x61, 0x64, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x35, 0x0a, 0x16, 0x73,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x15, 0x73, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x75, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x11, 0x69, 0x73, 0x5f, 0x74, 0x61, 0x6b, 0x65, 0x72,
	0x5f, 0x61, 0x70, 0x69, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0e, 0x69, 0x73, 0x54, 0x61, 0x6b, 0x65, 0x72, 0x41, 0x70, 0x69, 0x55, 0x73, 0x65, 0x72, 0x22,
	0x9e, 0x03, 0x0a, 0x19, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x49, 0x64, 0x12, 0x58, 0x0a, 0x13, 0x61, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x41, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x12,
	0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x35, 0x0a, 0x16, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f,
	0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x15, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x43, 0x61, 0x70,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x0a, 0x61,
	0x72, 0x62, 0x69, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x52, 0x0a, 0x61, 0x72, 0x62, 0x69, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x3c, 0x0a,
	0x08, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x52, 0x08, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x43, 0x0a, 0x0c, 0x72,
	0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x52, 0x0b, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x22, 0xb9, 0x01, 0x0a, 0x13, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x4f, 0x66, 0x66, 0x65,
	0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x33, 0x0a, 0x17, 0x68, 0x61, 0x73, 0x68,
	0x5f, 0x6f, 0x66, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x73, 0x65, 0x71,
	0x5f, 0x6e, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x12, 0x68, 0x61, 0x73, 0x68, 0x4f,
	0x66, 0x44, 0x61, 0x74, 0x61, 0x41, 0x6e, 0x64, 0x53, 0x65, 0x71, 0x4e, 0x72, 0x12, 0x1c, 0x0a,
	0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x68,
	0x61, 0x73, 0x68, 0x5f, 0x6f, 0x66, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x68, 0x61, 0x73, 0x68, 0x4f, 0x66, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x73, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x50, 0x0a, 0x0e,
	0x41, 0x64, 0x64, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3e,
	0x0a, 0x05, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x66, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x52, 0x05, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x22, 0x77,
	0x0a, 0x11, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x62, 0x0a, 0x17, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x15, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x22, 0x85, 0x01, 0x0a, 0x18, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x4d, 0x61, 0x69, 0x6c, 0x62, 0x6f, 0x78, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x69, 0x0a, 0x17, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x74,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x4d, 0x61, 0x69, 0x6c, 0x62, 0x6f, 0x78, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x15, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x22,
	0x6f, 0x0a, 0x23, 0x41, 0x64, 0x64, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x48, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73,
	0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x50, 0x65,
	0x72, 0x73, 0x69, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x22, 0x30, 0x0a, 0x16, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x22, 0xbf, 0x02, 0x0a, 0x0a, 0x41, 0x63, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x75, 0x69, 0x64, 0x12, 0x50, 0x0a, 0x13, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f,
	0x64, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x52, 0x11, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x15, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x73, 0x67,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12,
	0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0xf9, 0x01, 0x0a, 0x1e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65,
	0x64, 0x53, 0x65, 0x61, 0x6c, 0x65, 0x64, 0x41, 0x6e, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x43, 0x0a, 0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x66, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52,
	0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x50, 0x0a, 0x11,
	0x73, 0x65, 0x61, 0x6c, 0x65, 0x64, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73,
	0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x53, 0x65,
	0x61, 0x6c, 0x65, 0x64, 0x41, 0x6e, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x52, 0x0f, 0x73,
	0x65, 0x61, 0x6c, 0x65, 0x64, 0x41, 0x6e, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x12, 0x2e,
	0x0a, 0x13, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x11, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x48, 0x61, 0x73, 0x68, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64,
	0x22, 0xee, 0x0c, 0x0a, 0x19, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x44, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x54, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19,
	0x0a, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x74, 0x72, 0x61, 0x64, 0x65, 0x49, 0x64, 0x12, 0x50, 0x0a, 0x13, 0x73, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x11, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x4e, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x64, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f,
	0x0a, 0x0b, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x15, 0x0a, 0x06, 0x74, 0x78, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x74, 0x78, 0x46, 0x65, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x5f,
	0x66, 0x65, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x74, 0x61, 0x6b, 0x65, 0x72,
	0x46, 0x65, 0x65, 0x12, 0x3f, 0x0a, 0x1d, 0x69, 0x73, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x66, 0x65, 0x65,
	0x5f, 0x62, 0x74, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x69, 0x73, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x46, 0x6f, 0x72, 0x54, 0x61, 0x6b, 0x65, 0x72, 0x46, 0x65,
	0x65, 0x42, 0x74, 0x63, 0x12, 0x5e, 0x0a, 0x16, 0x72, 0x61, 0x77, 0x5f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x52, 0x61, 0x77, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x14,
	0x72, 0x61, 0x77, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x11, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x13, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x34, 0x0a, 0x17, 0x74, 0x61, 0x6b, 0x65,
	0x72, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x73, 0x69, 0x67, 0x5f, 0x70, 0x75, 0x62, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x13, 0x74, 0x61, 0x6b, 0x65, 0x72,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x69, 0x67, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x12, 0x3d,
	0x0a, 0x1b, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x18, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x4c, 0x0a,
	0x12, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x70, 0x75, 0x62, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x72,
	0x69, 0x6e, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x69, 0x6f, 0x2e, 0x62,
	0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e,
	0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x52, 0x69, 0x6e, 0x67, 0x52, 0x0f, 0x74, 0x61, 0x6b, 0x65,
	0x72, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x52, 0x69, 0x6e, 0x67, 0x12, 0x6d, 0x0a, 0x1d, 0x74,
	0x61, 0x6b, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x1a,
	0x74, 0x61, 0x6b, 0x65, 0x72, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x61,
	0x6b, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0f, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x66, 0x65,
	0x65, 0x5f, 0x74, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74,
	0x61, 0x6b, 0x65, 0x72, 0x46, 0x65, 0x65, 0x54, 0x78, 0x49, 0x64, 0x12, 0x6d, 0x0a, 0x22, 0x61,
	0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x72, 0x62, 0x69, 0x74, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73,
	0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x4e, 0x6f,
	0x64, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x1f, 0x61, 0x63, 0x63, 0x65, 0x70,
	0x74, 0x65, 0x64, 0x41, 0x72, 0x62, 0x69, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x6f, 0x64,
	0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x69, 0x0a, 0x20, 0x61, 0x63,
	0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x5f,
	0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x12,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x1d, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x58, 0x0a, 0x17, 0x61, 0x72, 0x62, 0x69, 0x74, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x15, 0x61, 0x72, 0x62, 0x69, 0x74, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x54, 0x0a, 0x15, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x6f, 0x64, 0x65,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x66, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x52, 0x13, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x56, 0x0a, 0x29, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x61, 0x67, 0x65, 0x5f, 0x77, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x6f, 0x66, 0x66, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x23, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x41, 0x67, 0x65, 0x57, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4f, 0x66, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x70, 0x0a, 0x24, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x72,
	0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x6f, 0x64, 0x65,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x52, 0x20, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x52, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x73, 0x12, 0x5b, 0x0a, 0x19, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73,
	0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x4e, 0x6f,
	0x64, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x16, 0x72, 0x65, 0x66, 0x75, 0x6e,
	0x64, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x22, 0xc2, 0x06, 0x0a, 0x1a, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x44,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x54, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x64, 0x65, 0x49, 0x64, 0x12, 0x6d, 0x0a, 0x1d, 0x6d,
	0x61, 0x6b, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x1a,
	0x6d, 0x61, 0x6b, 0x65, 0x72, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x61,
	0x6b, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x16, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x61, 0x73, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x41, 0x73, 0x4a, 0x73, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x18, 0x6d, 0x61, 0x6b,
	0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x6d, 0x61, 0x6b,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x12, 0x3d, 0x0a, 0x1b, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x79,
	0x6f, 0x75, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x50,
	0x61, 0x79, 0x6f, 0x75, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x64,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x74, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x11, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x64, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x54, 0x78, 0x12, 0x4b, 0x0a, 0x0c, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69,
	0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x52,
	0x61, 0x77, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x52, 0x0b, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12,
	0x34, 0x0a, 0x17, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x73,
	0x69, 0x67, 0x5f, 0x70, 0x75, 0x62, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x13, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x69, 0x67, 0x50,
	0x75, 0x62, 0x4b, 0x65, 0x79, 0x12, 0x50, 0x0a, 0x13, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f,
	0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x52, 0x11, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x6b, 0x0a, 0x34, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61, 0x67, 0x65, 0x5f, 0x77, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73,
	0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x70, 0x72,
	0x65, 0x70, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x74,
	0x78, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x2d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x41, 0x67, 0x65, 0x57, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x4f, 0x66, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x64, 0x44, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x54, 0x78, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x63,
	0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6c, 0x6f,
	0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x98, 0x02, 0x0a, 0x1f, 0x44, 0x65, 0x6c, 0x61, 0x79,
	0x65, 0x64, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x54, 0x78, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x49, 0x64, 0x12, 0x50, 0x0a, 0x13, 0x73, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x11, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4e, 0x6f,
	0x64, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x64, 0x65, 0x6c,
	0x61, 0x79, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x5f, 0x74, 0x78, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x50, 0x61, 0x79,
	0x6f, 0x75, 0x74, 0x54, 0x78, 0x12, 0x4a, 0x0a, 0x22, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x64,
	0x5f, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x5f, 0x74, 0x78, 0x5f, 0x73, 0x65, 0x6c, 0x6c, 0x65,
	0x72, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x1e, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74,
	0x54, 0x78, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x22, 0x8a, 0x02, 0x0a, 0x20, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x50, 0x61, 0x79,
	0x6f, 0x75, 0x74, 0x54, 0x78, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x49, 0x64, 0x12, 0x50, 0x0a, 0x13, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f,
	0x64, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x52, 0x11, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x48, 0x0a, 0x21, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x64,
	0x5f, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x5f, 0x74, 0x78, 0x5f, 0x62, 0x75, 0x79, 0x65, 0x72,
	0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x1d, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x54,
	0x78, 0x42, 0x75, 0x79, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x74, 0x78, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x09, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x54, 0x78, 0x22, 0xee,
	0x01, 0x0a, 0x22, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x54, 0x78, 0x41, 0x6e, 0x64, 0x44,
	0x65, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x54, 0x78, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x49, 0x64, 0x12, 0x50, 0x0a, 0x13, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x64,
	0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x52, 0x11, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f,
	0x74, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x54, 0x78, 0x12, 0x2a, 0x0a, 0x11, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x5f, 0x70,
	0x61, 0x79, 0x6f, 0x75, 0x74, 0x5f, 0x74, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f,
	0x64, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x54, 0x78, 0x22,
	0xd2, 0x01, 0x0a, 0x10, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x54, 0x78, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x64, 0x65, 0x49,
	0x64, 0x12, 0x50, 0x0a, 0x13, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x64, 0x65,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x66, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x52, 0x11, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x3f, 0x0a, 0x1c, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x74,
	0x78, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x5f, 0x77, 0x69, 0x74, 0x6e, 0x65, 0x73,
	0x73, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x19, 0x64, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x54, 0x78, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x57, 0x69, 0x74, 0x6e, 0x65,
	0x73, 0x73, 0x65, 0x73, 0x22, 0xa4, 0x01, 0x0a, 0x23, 0x50, 0x65, 0x65, 0x72, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x50, 0x61, 0x79,
	0x6f, 0x75, 0x74, 0x54, 0x78, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x74, 0x72, 0x61, 0x64, 0x65, 0x49, 0x64, 0x12, 0x50, 0x0a, 0x13, 0x73, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x11, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x4e, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xf5, 0x02, 0x0a, 0x25,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x64, 0x65, 0x49, 0x64,
	0x12, 0x30, 0x0a, 0x14, 0x62, 0x75, 0x79, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x62, 0x75, 0x79, 0x65, 0x72, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x50, 0x0a, 0x13, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x64,
	0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x52, 0x11, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x62, 0x75, 0x79, 0x65, 0x72, 0x5f, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x62,
	0x75, 0x79, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x33, 0x0a,
	0x16, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x5f, 0x74, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x78,
	0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x75, 0x69, 0x64, 0x12, 0x3d, 0x0a, 0x1b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x5f,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x45, 0x78, 0x74, 0x72, 0x61, 0x44,
	0x61, 0x74, 0x61, 0x22, 0xf7, 0x01, 0x0a, 0x17, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x54, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x19, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x64, 0x65, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x65,
	0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x5f,
	0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x50, 0x61, 0x79, 0x6f,
	0x75, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x50, 0x0a, 0x13, 0x73, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x11, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x4e, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x75,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x22, 0x81, 0x02,
	0x0a, 0x18, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x54, 0x78, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x5f,
	0x74, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74,
	0x54, 0x78, 0x12, 0x50, 0x0a, 0x13, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x64,
	0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x52, 0x11, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x49, 0x0a, 0x0e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64,
	0x5f, 0x77, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x66, 0x65, 0x72, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x57, 0x69, 0x74, 0x6e, 0x65,
	0x73, 0x73, 0x52, 0x0d, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x57, 0x69, 0x74, 0x6e, 0x65, 0x73,
	0x73, 0x22, 0xbe, 0x01, 0x0a, 0x20, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x64, 0x50, 0x61,
	0x79, 0x6f, 0x75, 0x74, 0x54, 0x78, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x64, 0x65, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x5f, 0x74, 0x78, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x54, 0x78, 0x12, 0x50,
	0x0a, 0x13, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x69, 0x6f,
	0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65,
	0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x11, 0x73,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75,
	0x69, 0x64, 0x22, 0xc4, 0x01, 0x0a, 0x20, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x64, 0x50,
	0x61, 0x79, 0x6f, 0x75, 0x74, 0x54, 0x78, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x78, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x74, 0x78, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x50, 0x0a, 0x13, 0x73, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x11, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4e, 0x6f,
	0x64, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xa5, 0x01, 0x0a, 0x18, 0x52, 0x65,
	0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x08,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02,
	0x18, 0x01, 0x52, 0x07, 0x74, 0x72, 0x61, 0x64, 0x65, 0x49, 0x64, 0x12, 0x54, 0x0a, 0x13, 0x73,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69,
	0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x4e,
	0x6f, 0x64, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x02, 0x18, 0x01, 0x52, 0x11,
	0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x22, 0xf6, 0x01, 0x0a, 0x1a, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x57, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x14, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18,
	0x01, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x07, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x49, 0x64, 0x12, 0x54, 0x0a, 0x13, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f,
	0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x42, 0x02, 0x18, 0x01, 0x52, 0x11, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x4e, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x4d, 0x0a, 0x0e, 0x73,
	0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x77, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64,
	0x57, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0d, 0x73, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x57, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x22, 0xe9, 0x01, 0x0a, 0x15, 0x4f,
	0x70, 0x65, 0x6e, 0x4e, 0x65, 0x77, 0x44, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x07, 0x64, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x44, 0x69, 0x73, 0x70,
	0x75, 0x74, 0x65, 0x52, 0x07, 0x64, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x12, 0x50, 0x0a, 0x13,
	0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x69, 0x6f, 0x2e, 0x62,
	0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e,
	0x4e, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x11, 0x73, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64,
	0x12, 0x34, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20,
	0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x66, 0x65, 0x72, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xec, 0x01, 0x0a, 0x18, 0x50, 0x65, 0x65, 0x72, 0x4f,
	0x70, 0x65, 0x6e, 0x65, 0x64, 0x44, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x07, 0x64, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x75,
	0x74, 0x65, 0x52, 0x07, 0x64, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x12, 0x50, 0x0a, 0x13, 0x73,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69,
	0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x4e,
	0x6f, 0x64, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x11, 0x73, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12,
	0x34, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e,
	0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x66, 0x65, 0x72, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x80, 0x05, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x73, 0x5f, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x73, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x49, 0x73, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x41, 0x0a, 0x0b, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x69, 0x6f, 0x2e,
	0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x61, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x72, 0x72, 0x69,
	0x76, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x61, 0x72, 0x72, 0x69, 0x76,
	0x65, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x5f,
	0x6d, 0x61, 0x69, 0x6c, 0x62, 0x6f, 0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x64, 0x49, 0x6e, 0x4d, 0x61, 0x69, 0x6c, 0x62, 0x6f, 0x78, 0x12, 0x2a,
	0x0a, 0x11, 0x69, 0x73, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x50, 0x0a, 0x13, 0x73, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73,
	0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x4e, 0x6f,
	0x64, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x11, 0x73, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x10, 0x0a, 0x03,
	0x75, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x2c,
	0x0a, 0x12, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x65, 0x6e, 0x64,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x22, 0x0a, 0x0c,
	0x61, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0c, 0x61, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x61, 0x63, 0x6b, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x63, 0x6b, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x34, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x69, 0x6f,
	0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65,
	0x72, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x77, 0x61, 0x73, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x77, 0x61, 0x73, 0x44,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x22, 0xfb, 0x01, 0x0a, 0x14, 0x44, 0x69, 0x73,
	0x70, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x75, 0x69, 0x64, 0x12, 0x49, 0x0a, 0x0e, 0x64, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x5f, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x69, 0x6f,
	0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65,
	0x72, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x0d, 0x64, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x50,
	0x0a, 0x13, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x69, 0x6f,
	0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65,
	0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x11, 0x73,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x34, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20,
	0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x66, 0x65, 0x72, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xfc, 0x01, 0x0a, 0x23, 0x50, 0x65, 0x65, 0x72, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x44, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x50,
	0x61, 0x79, 0x6f, 0x75, 0x74, 0x54, 0x78, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64,
	0x12, 0x20, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x64, 0x65, 0x49, 0x64, 0x12, 0x50, 0x0a,
	0x13, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x69, 0x6f, 0x2e,
	0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x11, 0x73, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x34, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e,
	0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x66, 0x65, 0x72, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xf3, 0x01, 0x0a, 0x1a, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x50, 0x0a, 0x13, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x11, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x64,
	0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x71, 0x0a, 0x1c, 0x70, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f,
	0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x66, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52,
	0x1a, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0xdd, 0x01, 0x0a, 0x10,
	0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x2a, 0x0a, 0x11, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x66, 0x72, 0x6f,
	0x6d, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6e, 0x6f, 0x6e,
	0x63, 0x65, 0x12, 0x50, 0x0a, 0x13, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x64,
	0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x52, 0x11, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x35, 0x0a, 0x16, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x64, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x05, 0x52, 0x15, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x43,
	0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x22, 0x77, 0x0a, 0x11, 0x47,
	0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3d, 0x0a, 0x0a, 0x72, 0x61, 0x77, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x09, 0x72, 0x61, 0x77, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12,
	0x23, 0x0a, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6e, 0x6f, 0x6e, 0x63, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4e,
	0x6f, 0x6e, 0x63, 0x65, 0x22, 0x57, 0x0a, 0x18, 0x4e, 0x65, 0x77, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x3b, 0x0a, 0x09, 0x72, 0x61, 0x77, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x52, 0x08, 0x72, 0x61, 0x77, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x20, 0x0a,
	0x1e, 0x52, 0x65, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e,
	0x61, 0x6e, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x5a, 0x0a, 0x16, 0x4e, 0x65, 0x77, 0x44, 0x61, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x61,
	0x73, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x40, 0x0a, 0x0a, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x66, 0x65, 0x72, 0x2e, 0x44, 0x61, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x61, 0x73, 0x68,
	0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x48, 0x61, 0x73, 0x68, 0x22, 0x64, 0x0a, 0x1b, 0x4e,
	0x65, 0x77, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48,
	0x61, 0x73, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x45, 0x0a, 0x0a, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x66, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x48, 0x61, 0x73, 0x68, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x48, 0x61, 0x73,
	0x68, 0x22, 0x66, 0x0a, 0x1c, 0x4e, 0x65, 0x77, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x56, 0x6f, 0x74,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x61, 0x73, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x46, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x42, 0x6c, 0x69, 0x6e,
	0x64, 0x56, 0x6f, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x61, 0x73, 0x68, 0x52, 0x09,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x48, 0x61, 0x73, 0x68, 0x22, 0x48, 0x0a, 0x18, 0x47, 0x65, 0x74,
	0x44, 0x61, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6e, 0x6f,
	0x6e, 0x63, 0x65, 0x22, 0x4d, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73,
	0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6e, 0x6f, 0x6e,
	0x63, 0x65, 0x22, 0x4e, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x56, 0x6f,
	0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6e, 0x6f, 0x6e,
	0x63, 0x65, 0x22, 0x86, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x44, 0x61, 0x6f, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x44, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x44, 0x61, 0x6f,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x61, 0x73, 0x68, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x22, 0x90, 0x01, 0x0a, 0x1e,
	0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49,
	0x0a, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f,
	0x73, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x61, 0x73, 0x68, 0x52, 0x0b, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x22, 0x92,
	0x01, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x56, 0x6f, 0x74, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x4a, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69,
	0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x42,
	0x6c, 0x69, 0x6e, 0x64, 0x56, 0x6f, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x61, 0x73,
	0x68, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x65, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x12, 0x23,
	0x0a, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4e, 0x6f,
	0x6e, 0x63, 0x65, 0x22, 0x3e, 0x0a, 0x0b, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70,
	0x6f, 0x72, 0x74, 0x22, 0x96, 0x01, 0x0a, 0x04, 0x50, 0x65, 0x65, 0x72, 0x12, 0x43, 0x0a, 0x0c,
	0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x52, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x16, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x64, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x15, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64,
	0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x22, 0x82, 0x01, 0x0a,
	0x0a, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x52, 0x69, 0x6e, 0x67, 0x12, 0x35, 0x0a, 0x17, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x70, 0x75, 0x62, 0x5f, 0x6b, 0x65, 0x79,
	0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x14, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x12, 0x37, 0x0a, 0x18, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x70, 0x75, 0x62, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x15, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x42, 0x79, 0x74, 0x65, 0x73, 0x4a, 0x04, 0x08, 0x03, 0x10,
	0x04, 0x22, 0xd1, 0x01, 0x0a, 0x0f, 0x53, 0x65, 0x61, 0x6c, 0x65, 0x64, 0x41, 0x6e, 0x64, 0x53,
	0x69, 0x67, 0x6e, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x65, 0x64, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x12, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x3d, 0x0a, 0x1b, 0x65, 0x6e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x77, 0x69, 0x74,
	0x68, 0x5f, 0x68, 0x6d, 0x61, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x18, 0x65, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x57, 0x69,
	0x74, 0x68, 0x48, 0x6d, 0x61, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x12, 0x2f, 0x0a, 0x14, 0x73, 0x69, 0x67, 0x5f, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x11, 0x73, 0x69, 0x67, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x22, 0xdd, 0x04, 0x0a, 0x0e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x32, 0x0a, 0x05, 0x61, 0x6c, 0x65, 0x72,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73,
	0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x41, 0x6c,
	0x65, 0x72, 0x74, 0x48, 0x00, 0x52, 0x05, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x12, 0x41, 0x0a, 0x0a,
	0x61, 0x72, 0x62, 0x69, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x41, 0x72, 0x62, 0x69, 0x74, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x72, 0x62, 0x69, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12,
	0x3b, 0x0a, 0x08, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x6f, 0x72,
	0x48, 0x00, 0x52, 0x08, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x35, 0x0a, 0x06,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x69,
	0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66,
	0x65, 0x72, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x06, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x12, 0x64, 0x0a, 0x17, 0x6d, 0x61, 0x69, 0x6c, 0x62, 0x6f, 0x78, 0x5f, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x69, 0x6c, 0x62,
	0x6f, 0x78, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x48, 0x00, 0x52, 0x15, 0x6d, 0x61, 0x69, 0x6c, 0x62, 0x6f, 0x78, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x48, 0x0a, 0x0d, 0x6f, 0x66, 0x66,
	0x65, 0x72, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x48, 0x00, 0x52, 0x0c, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x12, 0x5e, 0x0a, 0x15, 0x74, 0x65, 0x6d, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x70,
	0x6f, 0x73, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x50, 0x72, 0x6f,
	0x70, 0x6f, 0x73, 0x61, 0x6c, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x00, 0x52, 0x13,
	0x74, 0x65, 0x6d, 0x70, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x12, 0x45, 0x0a, 0x0c, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x69, 0x6f, 0x2e, 0x62,
	0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e,
	0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x72,
	0x65, 0x66, 0x75, 0x6e, 0x64, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xa7, 0x04, 0x0a, 0x19, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x12, 0x58, 0x0a, 0x13, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61,
	0x67, 0x65, 0x5f, 0x77, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x67,
	0x65, 0x57, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x11, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x41, 0x67, 0x65, 0x57, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x58, 0x0a,
	0x11, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69,
	0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x32, 0x42,
	0x02, 0x18, 0x01, 0x48, 0x00, 0x52, 0x10, 0x74, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x32, 0x12, 0x51, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x70, 0x6f,
	0x73, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x00, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x70, 0x6f,
	0x73, 0x61, 0x6c, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x55, 0x0a, 0x12, 0x62, 0x6c,
	0x69, 0x6e, 0x64, 0x5f, 0x76, 0x6f, 0x74, 0x65, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x42, 0x6c, 0x69,
	0x6e, 0x64, 0x56, 0x6f, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x00, 0x52,
	0x10, 0x62, 0x6c, 0x69, 0x6e, 0x64, 0x56, 0x6f, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x12, 0x4b, 0x0a, 0x0e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x77, 0x69, 0x74, 0x6e,
	0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x69, 0x6f, 0x2e, 0x62,
	0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e,
	0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x57, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52,
	0x0d, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x57, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x54,
	0x0a, 0x11, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x33, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x69, 0x6f, 0x2e, 0x62,
	0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x33,
	0x48, 0x00, 0x52, 0x10, 0x74, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x33, 0x42, 0x09, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0x8a, 0x02, 0x0a, 0x15, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x4b, 0x0a, 0x0e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x0e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x2d, 0x0a, 0x13, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f,
	0x70, 0x75, 0x62, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x10, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e,
	0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1c,
	0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x2e, 0x0a, 0x13,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x82, 0x02, 0x0a,
	0x13, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x57, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x12, 0x64, 0x0a, 0x17, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x74,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x48, 0x00, 0x52, 0x15, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x7a, 0x0a, 0x1f, 0x70, 0x72,
	0x6f, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x6d, 0x61, 0x69, 0x6c, 0x62, 0x6f, 0x78, 0x5f,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x4d, 0x61, 0x69, 0x6c, 0x62, 0x6f, 0x78, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x48, 0x00, 0x52, 0x1c, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x4d, 0x61, 0x69, 0x6c, 0x62, 0x6f, 0x78, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x09, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0x97, 0x01, 0x0a, 0x1c, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x4d,
	0x61, 0x69, 0x6c, 0x62, 0x6f, 0x78, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x40, 0x0a, 0x05, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x35, 0x0a, 0x17, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72,
	0x73, 0x5f, 0x70, 0x75, 0x62, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x14, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x73,
	0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x42, 0x79, 0x74, 0x65, 0x73, 0x22, 0x7a, 0x0a, 0x10, 0x44,
	0x61, 0x74, 0x61, 0x41, 0x6e, 0x64, 0x53, 0x65, 0x71, 0x4e, 0x72, 0x50, 0x61, 0x69, 0x72, 0x12,
	0x3d, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x27,
	0x0a, 0x0f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x59, 0x0a, 0x12, 0x4d, 0x61, 0x69, 0x6c, 0x62,
	0x6f, 0x78, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x43, 0x0a,
	0x0c, 0x6d, 0x61, 0x69, 0x6c, 0x62, 0x6f, 0x78, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x69, 0x6c, 0x62, 0x6f,
	0x78, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0b, 0x6d, 0x61, 0x69, 0x6c, 0x62, 0x6f, 0x78, 0x49, 0x74,
	0x65, 0x6d, 0x22, 0xb6, 0x01, 0x0a, 0x12, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x4d, 0x61, 0x70, 0x12, 0x5f, 0x0a, 0x0e, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x62, 0x79, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x39, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x4d, 0x61, 0x70, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x42,
	0x79, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x64, 0x61,
	0x74, 0x65, 0x42, 0x79, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x1a, 0x3f, 0x0a, 0x11, 0x44, 0x61,
	0x74, 0x65, 0x42, 0x79, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x92, 0x01, 0x0a, 0x11,
	0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x64, 0x4d, 0x61, 0x69, 0x6c, 0x62, 0x6f, 0x78, 0x4d, 0x61,
	0x70, 0x12, 0x44, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x30, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x64, 0x4d, 0x61, 0x69,
	0x6c, 0x62, 0x6f, 0x78, 0x4d, 0x61, 0x70, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x37, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xfc, 0x01, 0x0a, 0x0b, 0x4d, 0x61, 0x69, 0x6c, 0x62, 0x6f, 0x78, 0x49, 0x74, 0x65, 0x6d,
	0x12, 0x78, 0x0a, 0x1f, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x6d, 0x61,
	0x69, 0x6c, 0x62, 0x6f, 0x78, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x65, 0x6e,
	0x74, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x69, 0x6f, 0x2e, 0x62,
	0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e,
	0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x4d, 0x61, 0x69, 0x6c, 0x62, 0x6f, 0x78,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x1c, 0x70, 0x72,
	0x6f, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x4d, 0x61, 0x69, 0x6c, 0x62, 0x6f, 0x78, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x73, 0x0a, 0x1e, 0x64, 0x65,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x77, 0x69, 0x74, 0x68, 0x5f, 0x70, 0x75, 0x62, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x50, 0x75, 0x62,
	0x4b, 0x65, 0x79, 0x52, 0x1a, 0x64, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x22,
	0xa4, 0x01, 0x0a, 0x1a, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x12, 0x4f,
	0x0a, 0x10, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x65, 0x6e, 0x76, 0x65, 0x6c, 0x6f,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69,
	0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x52, 0x0f,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x12,
	0x35, 0x0a, 0x17, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x70, 0x75, 0x62,
	0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x14, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x50, 0x75, 0x62, 0x4b, 0x65,
	0x79, 0x42, 0x79, 0x74, 0x65, 0x73, 0x22, 0x97, 0x01, 0x0a, 0x1a, 0x50, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x2e, 0x0a, 0x13, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x61, 0x73, 0x5f,
	0x62, 0x61, 0x73, 0x65, 0x36, 0x34, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x41, 0x73, 0x42, 0x61, 0x73, 0x65, 0x36, 0x34, 0x12,
	0x2f, 0x0a, 0x14, 0x73, 0x69, 0x67, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65,
	0x79, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x11, 0x73,
	0x69, 0x67, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x22, 0x80, 0x01, 0x0a, 0x14, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x67, 0x65, 0x74, 0x5f, 0x6d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x67, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0xf7, 0x02, 0x0a, 0x05, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x5f, 0x61, 0x73, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x36, 0x34, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x41,
	0x73, 0x42, 0x61, 0x73, 0x65, 0x36, 0x34, 0x12, 0x2d, 0x0a, 0x13, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x5f, 0x70, 0x75, 0x62, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x50, 0x75, 0x62, 0x4b, 0x65,
	0x79, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x48, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x69, 0x6f, 0x2e,
	0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x44, 0x61, 0x74, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x65, 0x78, 0x74, 0x72, 0x61, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x2d, 0x0a, 0x13, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69,
	0x73, 0x50, 0x72, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x1a,
	0x3c, 0x0a, 0x0e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xd8, 0x04,
	0x0a, 0x0a, 0x41, 0x72, 0x62, 0x69, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x43, 0x0a, 0x0c,
	0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x52, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x25, 0x0a, 0x0e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x10, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x16, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x30, 0x0a, 0x14,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x75, 0x62,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x12, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x12, 0x41,
	0x0a, 0x0c, 0x70, 0x75, 0x62, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x50, 0x75, 0x62, 0x4b, 0x65,
	0x79, 0x52, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x70, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x52, 0x69, 0x6e,
	0x67, 0x12, 0x1e, 0x0a, 0x0b, 0x62, 0x74, 0x63, 0x5f, 0x70, 0x75, 0x62, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x62, 0x74, 0x63, 0x50, 0x75, 0x62, 0x4b, 0x65,
	0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x74, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x74, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x4d, 0x0a, 0x0a, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x41, 0x72, 0x62, 0x69, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x09, 0x65, 0x78, 0x74, 0x72, 0x61, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x3c, 0x0a, 0x0e, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x93, 0x04, 0x0a, 0x08, 0x4d, 0x65, 0x64,
	0x69, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x43, 0x0a, 0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x69, 0x6f,
	0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65,
	0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0b, 0x6e,
	0x6f, 0x64, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0d, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x73, 0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x35,
	0x0a, 0x16, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x75, 0x62, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x12, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x12, 0x41, 0x0a, 0x0c, 0x70, 0x75, 0x62, 0x5f, 0x6b,
	0x65, 0x79, 0x5f, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x66, 0x65, 0x72, 0x2e, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x52, 0x69, 0x6e, 0x67, 0x52, 0x0a,
	0x70, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x52, 0x69, 0x6e, 0x67, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69,
	0x6e, 0x66, 0x6f, 0x12, 0x4b, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73,
	0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x4d, 0x65,
	0x64, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x44, 0x61, 0x74, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x65, 0x78, 0x74, 0x72, 0x61, 0x44, 0x61, 0x74, 0x61,
	0x1a, 0x3c, 0x0a, 0x0e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x99,
	0x04, 0x0a, 0x0b, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x43,
	0x0a, 0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x16, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x30,
	0x0a, 0x14, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70,
	0x75, 0x62, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x12, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79,
	0x12, 0x41, 0x0a, 0x0c, 0x70, 0x75, 0x62, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x72, 0x69, 0x6e, 0x67,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x50, 0x75, 0x62,
	0x4b, 0x65, 0x79, 0x52, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x70, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x52,
	0x69, 0x6e, 0x67, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x4e, 0x0a, 0x0a,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x09, 0x65, 0x78, 0x74, 0x72, 0x61, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x3c, 0x0a, 0x0e,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xac, 0x0b, 0x0a, 0x06, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x4a, 0x0a, 0x22, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x5f, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x5f, 0x66,
	0x72, 0x6f, 0x6d, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x1e, 0x6e, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73,
	0x42, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e,
	0x67, 0x12, 0x28, 0x0a, 0x10, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x5f, 0x6f, 0x66, 0x66, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x62, 0x61, 0x6e,
	0x6e, 0x65, 0x64, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x61, 0x0a, 0x17, 0x62,
	0x61, 0x6e, 0x6e, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x69,
	0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66,
	0x65, 0x72, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x15, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x2e,
	0x0a, 0x13, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x61, 0x73, 0x5f, 0x62,
	0x61, 0x73, 0x65, 0x36, 0x34, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x41, 0x73, 0x42, 0x61, 0x73, 0x65, 0x36, 0x34, 0x12, 0x2d,
	0x0a, 0x13, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x70, 0x75, 0x62, 0x5f, 0x6b, 0x65, 0x79, 0x5f,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x49, 0x0a,
	0x0a, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2b, 0x0a, 0x11, 0x62, 0x61, 0x6e, 0x6e,
	0x65, 0x64, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x10, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x5f,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x14, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x61,
	0x72, 0x62, 0x69, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0b, 0x61, 0x72, 0x62, 0x69, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x65, 0x65, 0x64, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x65, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x11,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x6f, 0x64, 0x65,
	0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x52, 0x65,
	0x6c, 0x61, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x1a, 0x70, 0x72, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x62, 0x74, 0x63, 0x5f, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x70, 0x72,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x42, 0x74, 0x63, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x74, 0x63, 0x5f, 0x6e, 0x6f, 0x64,
	0x65, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x62, 0x74, 0x63, 0x4e, 0x6f, 0x64,
	0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x64, 0x61,
	0x6f, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x44, 0x61, 0x6f, 0x12, 0x39, 0x0a, 0x19, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x64,
	0x61, 0x6f, 0x5f, 0x62, 0x65, 0x6c, 0x6f, 0x77, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x44,
	0x61, 0x6f, 0x42, 0x65, 0x6c, 0x6f, 0x77, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3d,
	0x0a, 0x1b, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f,
	0x62, 0x65, 0x6c, 0x6f, 0x77, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x18, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x42, 0x65, 0x6c, 0x6f, 0x77, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a,
	0x09, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x09, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x72,
	0x65, 0x66, 0x75, 0x6e, 0x64, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x30, 0x0a, 0x13, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x50,
	0x75, 0x62, 0x4b, 0x65, 0x79, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x62, 0x61,
	0x6e, 0x6e, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79,
	0x73, 0x12, 0x3b, 0x0a, 0x1a, 0x62, 0x74, 0x63, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18,
	0x14, 0x20, 0x03, 0x28, 0x09, 0x52, 0x17, 0x62, 0x74, 0x63, 0x46, 0x65, 0x65, 0x52, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x23,
	0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x15, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x5f, 0x70, 0x75,
	0x62, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x61, 0x73, 0x5f, 0x68, 0x65, 0x78, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79,
	0x41, 0x73, 0x48, 0x65, 0x78, 0x12, 0x3e, 0x0a, 0x1a, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x50,
	0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x64, 0x44, 0x65, 0x76, 0x50, 0x75, 0x62, 0x4b,
	0x65, 0x79, 0x73, 0x18, 0x17, 0x20, 0x03, 0x28, 0x09, 0x52, 0x1a, 0x62, 0x61, 0x6e, 0x6e, 0x65,
	0x64, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x64, 0x44, 0x65, 0x76, 0x50, 0x75,
	0x62, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x43, 0x6f, 0x6e,
	0x66, 0x12, 0x3b, 0x0a, 0x1a, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x5f, 0x61, 0x75, 0x74, 0x6f,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x5f, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72, 0x73, 0x18,
	0x19, 0x20, 0x03, 0x28, 0x09, 0x52, 0x17, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x41, 0x75, 0x74,
	0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72, 0x73, 0x12, 0x4a,
	0x0a, 0x22, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73,
	0x5f, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x1e, 0x6e, 0x6f, 0x64, 0x65,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x46,
	0x72, 0x6f, 0x6d, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x70, 0x69, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x70, 0x69, 0x1a, 0x3c, 0x0a, 0x0e, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc9, 0x06, 0x0a, 0x10, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x32, 0x12, 0x27,
	0x0a, 0x0d, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x2d, 0x0a, 0x10, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x4d, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x69, 0x6f, 0x2e, 0x62,
	0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e,
	0x4f, 0x66, 0x66, 0x65, 0x72, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x02, 0x18, 0x01, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0a,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x25, 0x0a, 0x0c, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x42, 0x02, 0x18, 0x01, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x64, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x21, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x18, 0x01, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x11, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x02, 0x18, 0x01, 0x52, 0x0f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0a, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x18, 0x01, 0x52, 0x09, 0x6f, 0x66,
	0x66, 0x65, 0x72, 0x44, 0x61, 0x74, 0x65, 0x12, 0x42, 0x0a, 0x1c, 0x6f, 0x66, 0x66, 0x65, 0x72,
	0x5f, 0x75, 0x73, 0x65, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x62, 0x61, 0x73, 0x65,
	0x64, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x42, 0x02, 0x18,
	0x01, 0x52, 0x18, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x55, 0x73, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x42, 0x61, 0x73, 0x65, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x3d, 0x0a, 0x19, 0x6f,
	0x66, 0x66, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x5f, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x42, 0x02,
	0x18, 0x01, 0x52, 0x16, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x12, 0x25, 0x0a, 0x0c, 0x6f, 0x66,
	0x66, 0x65, 0x72, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03,
	0x42, 0x02, 0x18, 0x01, 0x52, 0x0b, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x2c, 0x0a, 0x10, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x18, 0x01, 0x52,
	0x0e, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x4d, 0x69, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1d, 0x0a, 0x08, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x07, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x49, 0x64, 0x12, 0x26,
	0x0a, 0x0d, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x74, 0x78, 0x5f, 0x69, 0x64, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x54, 0x78, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0c, 0x42, 0x02, 0x18, 0x01, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x57,
	0x0a, 0x0a, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x10, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x34, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x32, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x44,
	0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x02, 0x18, 0x01, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x3c, 0x0a, 0x0e, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xfd, 0x02, 0x0a, 0x10, 0x54, 0x72, 0x61, 0x64, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x33, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x72,
	0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x68, 0x61,
	0x73, 0x68, 0x12, 0x53, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x33, 0x2e, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x3c, 0x0a, 0x0e, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb1, 0x03, 0x0a, 0x15, 0x4d, 0x61, 0x69, 0x6c, 0x62, 0x6f,
	0x78, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12,
	0x7f, 0x0a, 0x22, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x61, 0x6c,
	0x65, 0x64, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x69, 0x6f,
	0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65,
	0x72, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x64, 0x53, 0x65, 0x61, 0x6c, 0x65, 0x64,
	0x41, 0x6e, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x1e, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x64, 0x53, 0x65, 0x61, 0x6c, 0x65, 0x64,
	0x41, 0x6e, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x50, 0x0a, 0x26, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x70, 0x75, 0x62, 0x5f, 0x6b,
	0x65, 0x79, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x20, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x46, 0x6f,
	0x72, 0x41, 0x64, 0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x12, 0x2d, 0x0a, 0x13, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x70, 0x75, 0x62, 0x5f,
	0x6b, 0x65, 0x79, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x10, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x12, 0x58, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x69, 0x6c,
	0x62, 0x6f, 0x78, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x09, 0x65, 0x78, 0x74, 0x72, 0x61, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x3c, 0x0a, 0x0e, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb0, 0x0f, 0x0a, 0x0c, 0x4f, 0x66,
	0x66, 0x65, 0x72, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x4e,
	0x0a, 0x12, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x69, 0x6f, 0x2e,
	0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x10, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x41,
	0x0a, 0x0c, 0x70, 0x75, 0x62, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x50, 0x75, 0x62, 0x4b, 0x65,
	0x79, 0x52, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x70, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x52, 0x69, 0x6e,
	0x67, 0x12, 0x49, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x4f, 0x66, 0x66, 0x65, 0x72,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x5f, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x11, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x72, 0x67,
	0x69, 0x6e, 0x12, 0x33, 0x0a, 0x16, 0x75, 0x73, 0x65, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x5f, 0x62, 0x61, 0x73, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x13, 0x75, 0x73, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x42, 0x61, 0x73,
	0x65, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x6d, 0x69, 0x6e, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x69, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c,
	0x0a, 0x12, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x62, 0x61, 0x73, 0x65,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x32, 0x0a, 0x15,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x60, 0x0a, 0x19, 0x61, 0x72, 0x62, 0x69, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e,
	0x6f, 0x64, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x0d, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x02, 0x18, 0x01, 0x52, 0x17, 0x61, 0x72, 0x62, 0x69, 0x74,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x12, 0x5c, 0x0a, 0x17, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e,
	0x6f, 0x64, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x0e, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x02, 0x18, 0x01, 0x52, 0x15, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x74, 0x6f, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73,
	0x12, 0x2a, 0x0a, 0x11, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x18,
	0x6d, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15,
	0x6d, 0x61, 0x6b, 0x65, 0x72, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x17, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x66,
	0x65, 0x65, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x78, 0x5f, 0x69, 0x64,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x46, 0x65, 0x65,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x78, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x34,
	0x0a, 0x16, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x09, 0x52, 0x14,
	0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43,
	0x6f, 0x64, 0x65, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x61, 0x6e, 0x6b, 0x49, 0x64, 0x12, 0x2a, 0x0a,
	0x11, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74,
	0x65, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x49, 0x64, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x72, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x72, 0x12, 0x42, 0x0a, 0x1e, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x61, 0x74, 0x5f, 0x6f, 0x66, 0x66, 0x65,
	0x72, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x1a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x41, 0x74, 0x4f,
	0x66, 0x66, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x06,
	0x74, 0x78, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x78,
	0x46, 0x65, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x66, 0x65, 0x65,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x46, 0x65, 0x65,
	0x12, 0x3f, 0x0a, 0x1d, 0x69, 0x73, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f,
	0x66, 0x6f, 0x72, 0x5f, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x62, 0x74,
	0x63, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x69, 0x73, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x46, 0x6f, 0x72, 0x4d, 0x61, 0x6b, 0x65, 0x72, 0x46, 0x65, 0x65, 0x42, 0x74,
	0x63, 0x12, 0x34, 0x0a, 0x16, 0x62, 0x75, 0x79, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x5f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x14, 0x62, 0x75, 0x79, 0x65, 0x72, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x12, 0x36, 0x0a, 0x17, 0x73, 0x65, 0x6c, 0x6c, 0x65,
	0x72, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x64, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72,
	0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x12,
	0x26, 0x0a, 0x0f, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6d, 0x61, 0x78, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x61, 0x78, 0x5f, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0e, 0x6d, 0x61, 0x78, 0x54, 0x72, 0x61, 0x64, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x12, 0x24, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x63, 0x6c,
	0x6f, 0x73, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x41, 0x75,
	0x74, 0x6f, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x1c, 0x75, 0x73, 0x65, 0x5f, 0x72,
	0x65, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x75, 0x74,
	0x6f, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x75,
	0x73, 0x65, 0x52, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x41, 0x66, 0x74, 0x65, 0x72, 0x41, 0x75, 0x74,
	0x6f, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f,
	0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0f, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x75, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x63, 0x6c, 0x6f, 0x73,
	0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x75,
	0x70, 0x70, 0x65, 0x72, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x28,
	0x0a, 0x10, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6f, 0x66, 0x66,
	0x65, 0x72, 0x18, 0x23, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x50, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x11, 0x68, 0x61, 0x73, 0x68,
	0x5f, 0x6f, 0x66, 0x5f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x18, 0x24, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x68, 0x61, 0x73, 0x68, 0x4f, 0x66, 0x43, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x12, 0x4f, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x25, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69,
	0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x4f,
	0x66, 0x66, 0x65, 0x72, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x44, 0x61, 0x74, 0x61, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x26, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x1a, 0x3c, 0x0a, 0x0e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x2c,
	0x0a, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0c, 0x0a, 0x08, 0x50,
	0x42, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x55, 0x59,
	0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x45, 0x4c, 0x4c, 0x10, 0x02, 0x22, 0x3b, 0x0a, 0x11,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x67, 0x65, 0x57, 0x69, 0x74, 0x6e, 0x65, 0x73,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x22, 0x9d, 0x03, 0x0a, 0x0d, 0x53, 0x69,
	0x67, 0x6e, 0x65, 0x64, 0x57, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x66, 0x0a, 0x13, 0x76,
	0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69,
	0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x53,
	0x69, 0x67, 0x6e, 0x65, 0x64, 0x57, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x56, 0x65, 0x72,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52,
	0x12, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x12, 0x37, 0x0a, 0x18, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61,
	0x67, 0x65, 0x5f, 0x77, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x15, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x67,
	0x65, 0x57, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1c, 0x0a, 0x09,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x69,
	0x67, 0x6e, 0x65, 0x72, 0x5f, 0x70, 0x75, 0x62, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0c, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79,
	0x12, 0x31, 0x0a, 0x15, 0x77, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x5f, 0x70, 0x75, 0x62, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x12, 0x77, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x50, 0x75, 0x62,
	0x4b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x3d, 0x0a, 0x12, 0x56, 0x65,
	0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x12, 0x0c, 0x0a, 0x08, 0x50, 0x42, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x00, 0x12, 0x0e,
	0x0a, 0x0a, 0x41, 0x52, 0x42, 0x49, 0x54, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x10, 0x01, 0x12, 0x09,
	0x0a, 0x05, 0x54, 0x52, 0x41, 0x44, 0x45, 0x10, 0x02, 0x22, 0xd4, 0x0a, 0x0a, 0x07, 0x44, 0x69,
	0x73, 0x70, 0x75, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x64, 0x65, 0x49, 0x64,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x35, 0x0a,
	0x17, 0x64, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x65, 0x72, 0x5f,
	0x69, 0x73, 0x5f, 0x62, 0x75, 0x79, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14,
	0x64, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x65, 0x72, 0x49, 0x73, 0x42,
	0x75, 0x79, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x17, 0x64, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x5f,
	0x6f, 0x70, 0x65, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x73, 0x5f, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x64, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x4f, 0x70,
	0x65, 0x6e, 0x65, 0x72, 0x49, 0x73, 0x4d, 0x61, 0x6b, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x6f,
	0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x65, 0x12, 0x4e,
	0x0a, 0x13, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x70, 0x75, 0x62, 0x5f, 0x6b, 0x65, 0x79,
	0x5f, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x69, 0x6f,
	0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65,
	0x72, 0x2e, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x52, 0x69, 0x6e, 0x67, 0x52, 0x10, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x72, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x52, 0x69, 0x6e, 0x67, 0x12, 0x1d,
	0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x39, 0x0a,
	0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x08,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x32, 0x0a,
	0x15, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x74, 0x78, 0x5f, 0x73, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x13, 0x64, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x54, 0x78, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x64, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x5f, 0x74, 0x78, 0x5f, 0x73,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x12, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x54, 0x78, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x74,
	0x78, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x54, 0x78, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x70, 0x61, 0x79, 0x6f, 0x75,
	0x74, 0x5f, 0x74, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70,
	0x61, 0x79, 0x6f, 0x75, 0x74, 0x54, 0x78, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x61, 0x73, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x73, 0x4a,
	0x73, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x18, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x38, 0x0a,
	0x18, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x16, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x4c, 0x0a, 0x12, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x5f, 0x70, 0x75, 0x62, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79,
	0x52, 0x69, 0x6e, 0x67, 0x52, 0x0f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x50, 0x75, 0x62, 0x4b, 0x65,
	0x79, 0x52, 0x69, 0x6e, 0x67, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x73, 0x5f, 0x73, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0f, 0x69, 0x73, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x12, 0x43, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73,
	0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x43, 0x68,
	0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x63, 0x6c, 0x6f,
	0x73, 0x65, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x43, 0x6c, 0x6f,
	0x73, 0x65, 0x64, 0x12, 0x49, 0x0a, 0x0e, 0x64, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x5f, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x69, 0x6f,
	0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65,
	0x72, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x0d, 0x64, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2f,
	0x0a, 0x14, 0x64, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x5f, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74,
	0x5f, 0x74, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x64, 0x69,
	0x73, 0x70, 0x75, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x54, 0x78, 0x49, 0x64, 0x12,
	0x43, 0x0a, 0x0c, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x53, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x38, 0x0a, 0x18, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x6f, 0x72,
	0x73, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x6f, 0x72,
	0x73, 0x44, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2f,
	0x0a, 0x14, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74,
	0x5f, 0x74, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x64, 0x65,
	0x6c, 0x61, 0x79, 0x65, 0x64, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x54, 0x78, 0x49, 0x64, 0x12,
	0x4f, 0x0a, 0x25, 0x64, 0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x5f, 0x6f, 0x66, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x5f, 0x70,
	0x61, 0x79, 0x6f, 0x75, 0x74, 0x5f, 0x74, 0x78, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x20,
	0x64, 0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4f,
	0x66, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x54, 0x78,
	0x22, 0x3f, 0x0a, 0x0a, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x22, 0xda, 0x07, 0x0a, 0x0d, 0x44, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x64, 0x65, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x06, 0x77,
	0x69, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x69, 0x6f,
	0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65,
	0x72, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e,
	0x57, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x52, 0x06, 0x77, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x25,
	0x0a, 0x0e, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x4f, 0x72,
	0x64, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x32, 0x0a, 0x15, 0x74, 0x61, 0x6d, 0x70, 0x65, 0x72, 0x5f,
	0x70, 0x72, 0x6f, 0x6f, 0x66, 0x5f, 0x65, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x74, 0x61, 0x6d, 0x70, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x6f,
	0x66, 0x45, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x64, 0x5f,
	0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0e, 0x69, 0x64, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x63, 0x61, 0x73,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x43,
	0x61, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x6e,
	0x6f, 0x74, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x43, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x74,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x66, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x0b, 0x63, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a,
	0x14, 0x61, 0x72, 0x62, 0x69, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x13, 0x61, 0x72, 0x62,
	0x69, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x12, 0x2e, 0x0a, 0x13, 0x62, 0x75, 0x79, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x62,
	0x75, 0x79, 0x65, 0x72, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x30, 0x0a, 0x14, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x79, 0x6f, 0x75,
	0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12,
	0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x72, 0x62, 0x69, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x5f, 0x70, 0x75, 0x62, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10,
	0x61, 0x72, 0x62, 0x69, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x2c, 0x0a, 0x12, 0x69, 0x73, 0x5f, 0x6c, 0x6f, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x73, 0x4c,
	0x6f, 0x73, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x22, 0x34, 0x0a,
	0x06, 0x57, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x42, 0x5f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x5f, 0x57, 0x49, 0x4e, 0x4e, 0x45, 0x52, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05,
	0x42, 0x55, 0x59, 0x45, 0x52, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x45, 0x4c, 0x4c, 0x45,
	0x52, 0x10, 0x02, 0x22, 0xf8, 0x01, 0x0a, 0x06, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x13,
	0x0a, 0x0f, 0x50, 0x42, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f,
	0x4e, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x01, 0x12, 0x07,
	0x0a, 0x03, 0x42, 0x55, 0x47, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x53, 0x41, 0x42, 0x49,
	0x4c, 0x49, 0x54, 0x59, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x43, 0x41, 0x4d, 0x10, 0x04,
	0x12, 0x16, 0x0a, 0x12, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x56, 0x49, 0x4f,
	0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x4f, 0x5f, 0x52,
	0x45, 0x50, 0x4c, 0x59, 0x10, 0x06, 0x12, 0x11, 0x0a, 0x0d, 0x42, 0x41, 0x4e, 0x4b, 0x5f, 0x50,
	0x52, 0x4f, 0x42, 0x4c, 0x45, 0x4d, 0x53, 0x10, 0x07, 0x12, 0x10, 0x0a, 0x0c, 0x4f, 0x50, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x10, 0x08, 0x12, 0x19, 0x0a, 0x15, 0x53,
	0x45, 0x4c, 0x4c, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e,
	0x44, 0x49, 0x4e, 0x47, 0x10, 0x09, 0x12, 0x18, 0x0a, 0x14, 0x57, 0x52, 0x4f, 0x4e, 0x47, 0x5f,
	0x53, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x0a,
	0x12, 0x19, 0x0a, 0x15, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44,
	0x59, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x4c, 0x45, 0x44, 0x10, 0x0b, 0x12, 0x11, 0x0a, 0x0d, 0x50,
	0x45, 0x45, 0x52, 0x5f, 0x57, 0x41, 0x53, 0x5f, 0x4c, 0x41, 0x54, 0x45, 0x10, 0x0c, 0x22, 0xb2,
	0x0a, 0x0a, 0x08, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x46, 0x0a, 0x0d, 0x6f,
	0x66, 0x66, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x0c, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x25, 0x0a, 0x0f, 0x74, 0x61, 0x6b, 0x65, 0x72,
	0x5f, 0x66, 0x65, 0x65, 0x5f, 0x74, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x46, 0x65, 0x65, 0x54, 0x78, 0x49, 0x64, 0x12, 0x43,
	0x0a, 0x1f, 0x69, 0x73, 0x5f, 0x62, 0x75, 0x79, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x6b, 0x65, 0x72,
	0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x6b, 0x65,
	0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x69, 0x73, 0x42, 0x75, 0x79, 0x65, 0x72,
	0x4d, 0x61, 0x6b, 0x65, 0x72, 0x41, 0x6e, 0x64, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x54, 0x61,
	0x6b, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d,
	0x61, 0x6b, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x28, 0x0a,
	0x10, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x6d, 0x0a, 0x1d, 0x6d, 0x61, 0x6b, 0x65, 0x72,
	0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x66, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x1a, 0x6d, 0x61, 0x6b, 0x65,
	0x72, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x6d, 0x0a, 0x1d, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x5f,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x66, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x1a, 0x74, 0x61, 0x6b, 0x65, 0x72,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x4c, 0x0a, 0x12, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x70,
	0x75, 0x62, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x52, 0x69,
	0x6e, 0x67, 0x52, 0x0f, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x52,
	0x69, 0x6e, 0x67, 0x12, 0x4c, 0x0a, 0x12, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x70, 0x75, 0x62,
	0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x52, 0x69, 0x6e, 0x67,
	0x52, 0x0f, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x52, 0x69, 0x6e,
	0x67, 0x12, 0x4e, 0x0a, 0x12, 0x62, 0x75, 0x79, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x66, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52,
	0x10, 0x62, 0x75, 0x79, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x50, 0x0a, 0x13, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x64, 0x65,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x66, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x52, 0x11, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x3d, 0x0a, 0x1b, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x79,
	0x6f, 0x75, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x50,
	0x61, 0x79, 0x6f, 0x75, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x12, 0x3d, 0x0a, 0x1b, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x79, 0x6f,
	0x75, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x50, 0x61,
	0x79, 0x6f, 0x75, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x12, 0x34, 0x0a, 0x17, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x5f, 0x73, 0x69, 0x67, 0x5f, 0x70, 0x75, 0x62, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x13, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x69,
	0x67, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x12, 0x34, 0x0a, 0x17, 0x74, 0x61, 0x6b, 0x65, 0x72,
	0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x73, 0x69, 0x67, 0x5f, 0x70, 0x75, 0x62, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x13, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x53, 0x69, 0x67, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x12, 0x54, 0x0a,
	0x15, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x69,
	0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66,
	0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x13,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x5b, 0x0a, 0x19, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x16, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4a, 0x04, 0x08,
	0x05, 0x10, 0x06, 0x22, 0x70, 0x0a, 0x13, 0x52, 0x61, 0x77, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x2d, 0x0a, 0x12, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x11, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xcf, 0x1b, 0x0a, 0x15, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x2a, 0x0a, 0x11, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x10, 0x6d,
	0x61, 0x78, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0e, 0x6d, 0x61, 0x78, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x62, 0x0a, 0x17, 0x61, 0x6c, 0x69,
	0x5f, 0x70, 0x61, 0x79, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x69, 0x6f, 0x2e,
	0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x2e, 0x41, 0x6c, 0x69, 0x50, 0x61, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x00, 0x52, 0x14, 0x61, 0x6c, 0x69, 0x50, 0x61, 0x79, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x78, 0x0a,
	0x1f, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x71, 0x75, 0x69, 0x63, 0x6b, 0x5f, 0x70, 0x61, 0x79,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61,
	0x73, 0x65, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x50, 0x61, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x00, 0x52, 0x1b, 0x63, 0x68, 0x61, 0x73,
	0x65, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x50, 0x61, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x74, 0x0a, 0x1d, 0x63, 0x6c, 0x65, 0x61, 0x72,
	0x5f, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f,
	0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x66, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x58, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x48,
	0x00, 0x52, 0x1a, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x58, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x8a, 0x01,
	0x0a, 0x25, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x64, 0x5f,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e,
	0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x66, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x61, 0x73, 0x65, 0x64,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x00, 0x52, 0x21, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x42, 0x61, 0x73, 0x65, 0x64, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x7a, 0x0a, 0x1f, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x6f, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x00, 0x52, 0x1c, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x7a, 0x0a, 0x1f, 0x66, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x31, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x46, 0x61, 0x73, 0x74, 0x65, 0x72, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x48, 0x00, 0x52, 0x1c, 0x66, 0x61, 0x73, 0x74, 0x65, 0x72, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x12, 0x81, 0x01, 0x0a, 0x22, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x5f, 0x65,
	0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x33, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x45, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x48, 0x00, 0x52, 0x1e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x45,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x64, 0x0a, 0x17, 0x6f, 0x5f, 0x6b, 0x5f, 0x70, 0x61,
	0x79, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73,
	0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x4f, 0x4b,
	0x50, 0x61, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x42, 0x02, 0x18, 0x01, 0x48, 0x00, 0x52, 0x13, 0x6f, 0x4b, 0x50, 0x61, 0x79, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x74, 0x0a, 0x1d,
	0x70, 0x65, 0x72, 0x66, 0x65, 0x63, 0x74, 0x5f, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x5f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x50, 0x65, 0x72, 0x66, 0x65, 0x63,
	0x74, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x48, 0x00, 0x52, 0x1a, 0x70, 0x65, 0x72, 0x66, 0x65, 0x63, 0x74, 0x4d,
	0x6f, 0x6e, 0x65, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x12, 0x5e, 0x0a, 0x15, 0x73, 0x77, 0x69, 0x73, 0x68, 0x5f, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x53, 0x77, 0x69, 0x73, 0x68, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x00, 0x52, 0x13, 0x73,
	0x77, 0x69, 0x73, 0x68, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x12, 0x89, 0x01, 0x0a, 0x26, 0x75, 0x5f, 0x73, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x61,
	0x6c, 0x5f, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x55, 0x53, 0x50, 0x6f, 0x73, 0x74,
	0x61, 0x6c, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x00, 0x52, 0x20, 0x75, 0x53,
	0x50, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x61,
	0x0a, 0x16, 0x75, 0x70, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x66, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x68, 0x6f, 0x6c, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x00, 0x52, 0x14, 0x75, 0x70, 0x68,
	0x6f, 0x6c, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x12, 0x69, 0x0a, 0x18, 0x63, 0x61, 0x73, 0x68, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x73, 0x68, 0x41, 0x70,
	0x70, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x42,
	0x02, 0x18, 0x01, 0x48, 0x00, 0x52, 0x15, 0x63, 0x61, 0x73, 0x68, 0x41, 0x70, 0x70, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x6b, 0x0a, 0x1a,
	0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x5f, 0x62, 0x65, 0x61, 0x6d, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x42, 0x65, 0x61, 0x6d,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x00,
	0x52, 0x17, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x42, 0x65, 0x61, 0x6d, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x62, 0x0a, 0x15, 0x76, 0x65, 0x6e,
	0x6d, 0x6f, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69,
	0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x56,
	0x65, 0x6e, 0x6d, 0x6f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x42, 0x02, 0x18, 0x01, 0x48, 0x00, 0x52, 0x13, 0x76, 0x65, 0x6e, 0x6d, 0x6f, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x67, 0x0a,
	0x18, 0x70, 0x6f, 0x70, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x50, 0x6f, 0x70, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x00, 0x52, 0x16,
	0x70, 0x6f, 0x70, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x64, 0x0a, 0x17, 0x72, 0x65, 0x76, 0x6f, 0x6c, 0x75,
	0x74, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73,
	0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x52, 0x65,
	0x76, 0x6f, 0x6c, 0x75, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x48, 0x00, 0x52, 0x15, 0x72, 0x65, 0x76, 0x6f, 0x6c, 0x75, 0x74, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x6c, 0x0a, 0x1b,
	0x77, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x5f, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x43, 0x68, 0x61, 0x74, 0x50, 0x61,
	0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x48,
	0x00, 0x52, 0x17, 0x77, 0x65, 0x43, 0x68, 0x61, 0x74, 0x50, 0x61, 0x79, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x6b, 0x0a, 0x1a, 0x6d, 0x6f,
	0x6e, 0x65, 0x79, 0x5f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x66, 0x65, 0x72, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x47, 0x72, 0x61, 0x6d, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x00, 0x52, 0x17,
	0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x47, 0x72, 0x61, 0x6d, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x65, 0x0a, 0x18, 0x68, 0x61, 0x6c, 0x5f, 0x63,
	0x61, 0x73, 0x68, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x69, 0x6f, 0x2e, 0x62,
	0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e,
	0x48, 0x61, 0x6c, 0x43, 0x61, 0x73, 0x68, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x00, 0x52, 0x15, 0x68, 0x61, 0x6c, 0x43, 0x61, 0x73, 0x68,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x6b,
	0x0a, 0x1a, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x5f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x50,
	0x61, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x48, 0x00, 0x52, 0x17, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x50, 0x61, 0x79, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x74, 0x0a, 0x1d, 0x61,
	0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x73, 0x68, 0x5f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65,
	0x64, 0x43, 0x61, 0x73, 0x68, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x48, 0x00, 0x52, 0x1a, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x43,
	0x61, 0x73, 0x68, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x12, 0x90, 0x01, 0x0a, 0x27, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x5f, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x6f, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x1b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x74, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x00, 0x52,
	0x23, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x12, 0x6b, 0x0a, 0x1a, 0x6a, 0x61, 0x70, 0x61, 0x6e, 0x5f, 0x62, 0x61,
	0x6e, 0x6b, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69,
	0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x4a,
	0x61, 0x70, 0x61, 0x6e, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x00, 0x52, 0x17, 0x6a, 0x61, 0x70, 0x61, 0x6e, 0x42,
	0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x12, 0x73, 0x0a, 0x1c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x77, 0x69, 0x73,
	0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73,
	0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x77, 0x69, 0x73, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x00, 0x52, 0x1a, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x77, 0x69, 0x73, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x64, 0x0a, 0x17, 0x61, 0x75, 0x73, 0x74, 0x72, 0x61,
	0x6c, 0x69, 0x61, 0x5f, 0x70, 0x61, 0x79, 0x69, 0x64, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73,
	0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x41, 0x75,
	0x73, 0x74, 0x72, 0x61, 0x6c, 0x69, 0x61, 0x50, 0x61, 0x79, 0x69, 0x64, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x48, 0x00, 0x52, 0x15, 0x61, 0x75, 0x73, 0x74, 0x72, 0x61, 0x6c, 0x69, 0x61,
	0x50, 0x61, 0x79, 0x69, 0x64, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x7b, 0x0a, 0x20,
	0x61, 0x6d, 0x61, 0x7a, 0x6f, 0x6e, 0x5f, 0x67, 0x69, 0x66, 0x74, 0x5f, 0x63, 0x61, 0x72, 0x64,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x41, 0x6d, 0x61,
	0x7a, 0x6f, 0x6e, 0x47, 0x69, 0x66, 0x74, 0x43, 0x61, 0x72, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x00, 0x52, 0x1c, 0x61, 0x6d, 0x61,
	0x7a, 0x6f, 0x6e, 0x47, 0x69, 0x66, 0x74, 0x43, 0x61, 0x72, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x6f, 0x0a, 0x1c, 0x63, 0x61, 0x73,
	0x68, 0x5f, 0x62, 0x79, 0x5f, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x73, 0x68, 0x42, 0x79, 0x4d, 0x61, 0x69, 0x6c,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x00,
	0x52, 0x18, 0x63, 0x61, 0x73, 0x68, 0x42, 0x79, 0x4d, 0x61, 0x69, 0x6c, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x78, 0x0a, 0x16, 0x65, 0x78,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x69, 0x6f, 0x2e,
	0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x46, 0x72,
	0x6f, 0x6d, 0x4a, 0x73, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x13, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x4a, 0x73, 0x6f, 0x6e,
	0x44, 0x61, 0x74, 0x61, 0x1a, 0x46, 0x0a, 0x18, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x46,
	0x72, 0x6f, 0x6d, 0x4a, 0x73, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x09, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x35, 0x0a, 0x14, 0x41, 0x6c, 0x69, 0x50, 0x61,
	0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x72, 0x22, 0x38,
	0x0a, 0x17, 0x57, 0x65, 0x43, 0x68, 0x61, 0x74, 0x50, 0x61, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x72, 0x22, 0x54, 0x0a, 0x1b, 0x43, 0x68, 0x61, 0x73,
	0x65, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x50, 0x61, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1f, 0x0a,
	0x0b, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x6a,
	0x0a, 0x1a, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x58, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a,
	0x12, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x6f, 0x72, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65,
	0x5f, 0x6e, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x4f, 0x72, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x4e, 0x72, 0x22, 0xc0, 0x05, 0x0a, 0x21, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x61, 0x73, 0x65, 0x64, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x5b, 0x0a, 0x14, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x00, 0x52, 0x12, 0x62, 0x61, 0x6e,
	0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12,
	0x71, 0x0a, 0x1c, 0x63, 0x61, 0x73, 0x68, 0x5f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x73, 0x68,
	0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x00, 0x52, 0x19, 0x63, 0x61, 0x73, 0x68, 0x44, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x12, 0x5b, 0x0a, 0x14, 0x73, 0x65, 0x70, 0x61, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x70, 0x61, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x00, 0x52, 0x12, 0x73, 0x65, 0x70,
	0x61, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12,
	0x74, 0x0a, 0x1d, 0x77, 0x65, 0x73, 0x74, 0x65, 0x72, 0x6e, 0x5f, 0x75, 0x6e, 0x69, 0x6f, 0x6e,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x73,
	0x74, 0x65, 0x72, 0x6e, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x00, 0x52, 0x1a, 0x77, 0x65, 0x73, 0x74, 0x65,
	0x72, 0x6e, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x71, 0x0a, 0x1c, 0x73, 0x65, 0x70, 0x61, 0x5f, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x69, 0x6f,
	0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65,
	0x72, 0x2e, 0x53, 0x65, 0x70, 0x61, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x00, 0x52, 0x19, 0x73,
	0x65, 0x70, 0x61, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x58, 0x0a, 0x13, 0x66, 0x32, 0x66, 0x5f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x46, 0x32, 0x46, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x00, 0x52,
	0x11, 0x66, 0x32, 0x66, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x9a, 0x05,
	0x0a, 0x12, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x68, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x61, 0x6e, 0x6b, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x61, 0x6e, 0x6b, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x62,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x68, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x54, 0x61, 0x78, 0x49, 0x64, 0x12, 0x18,
	0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18,
	0x01, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x74, 0x0a, 0x1d, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2f, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x4e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x42, 0x61,
	0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x48, 0x00, 0x52, 0x1a, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x42, 0x61, 0x6e, 0x6b,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x66,
	0x0a, 0x18, 0x73, 0x61, 0x6d, 0x65, 0x5f, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x61, 0x63, 0x63, 0x6f,
	0x6e, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x53, 0x61, 0x6d, 0x65, 0x42, 0x61, 0x6e, 0x6b, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x00, 0x52,
	0x15, 0x73, 0x61, 0x6d, 0x65, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x6e, 0x74, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x77, 0x0a, 0x1e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x63, 0x5f, 0x62, 0x61, 0x6e, 0x6b, 0x73, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30,
	0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x66, 0x65, 0x72, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x42, 0x61, 0x6e,
	0x6b, 0x73, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x48, 0x00, 0x52, 0x1b, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x42, 0x61, 0x6e, 0x6b,
	0x73, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12,
	0x2e, 0x0a, 0x13, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x42,
	0x09, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x1c, 0x0a, 0x1a, 0x4e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x18, 0x0a, 0x16, 0x53, 0x61, 0x6d, 0x65,
	0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x22, 0xaf, 0x02, 0x0a, 0x17, 0x4a, 0x61, 0x70, 0x61, 0x6e, 0x42, 0x61, 0x6e, 0x6b,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x62, 0x61, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x62,
	0x61, 0x6e, 0x6b, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x62, 0x61, 0x6e, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x62, 0x61, 0x6e, 0x6b,
	0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x62, 0x61, 0x6e, 0x6b, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x62, 0x61,
	0x6e, 0x6b, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x11,
	0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x62, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x62, 0x61, 0x6e, 0x6b,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x62, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x62, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x22, 0x59, 0x0a, 0x15, 0x41, 0x75, 0x73, 0x74, 0x72, 0x61, 0x6c, 0x69,
	0x61, 0x50, 0x61, 0x79, 0x69, 0x64, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x2a, 0x0a,
	0x11, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x62, 0x61, 0x6e, 0x6b, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x79,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x61, 0x79, 0x69, 0x64, 0x22,
	0x44, 0x0a, 0x1b, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x42, 0x61, 0x6e, 0x6b, 0x73,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x25,
	0x0a, 0x0e, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x61, 0x6e, 0x6b, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64,
	0x42, 0x61, 0x6e, 0x6b, 0x73, 0x22, 0xec, 0x02, 0x0a, 0x19, 0x43, 0x61, 0x73, 0x68, 0x44, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x68, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x61, 0x6e, 0x6b, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x61, 0x6e, 0x6b,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x61, 0x6e, 0x6b, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c,
	0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x22, 0x0a, 0x0d, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x78, 0x5f, 0x69,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x54,
	0x61, 0x78, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x22, 0x89, 0x01, 0x0a, 0x17, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x47, 0x72,
	0x61, 0x6d, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x22, 0x34, 0x0a, 0x15, 0x48, 0x61, 0x6c, 0x43, 0x61, 0x73, 0x68, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x6f, 0x62,
	0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x6f,
	0x62, 0x69, 0x6c, 0x65, 0x4e, 0x72, 0x22, 0x7d, 0x0a, 0x1a, 0x57, 0x65, 0x73, 0x74, 0x65, 0x72,
	0x6e, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x68, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0x6e, 0x0a, 0x1c, 0x41, 0x6d, 0x61, 0x7a, 0x6f, 0x6e, 0x47,
	0x69, 0x66, 0x74, 0x43, 0x61, 0x72, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x2b, 0x0a, 0x12, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x6f,
	0x72, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x4f, 0x72, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65,
	0x4e, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xab, 0x01, 0x0a, 0x12, 0x53, 0x65, 0x70, 0x61, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x69, 0x62, 0x61, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x62, 0x61,
	0x6e, 0x12, 0x10, 0x0a, 0x03, 0x62, 0x69, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x62, 0x69, 0x63, 0x12, 0x18, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x34, 0x0a,
	0x16, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x14, 0x61,
	0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f,
	0x64, 0x65, 0x73, 0x22, 0x98, 0x01, 0x0a, 0x19, 0x53, 0x65, 0x70, 0x61, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x62, 0x61, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x69, 0x62, 0x61, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x62, 0x69, 0x63, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x62, 0x69, 0x63, 0x12, 0x34, 0x0a, 0x16, 0x61, 0x63, 0x63, 0x65,
	0x70, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x14, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74,
	0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x22, 0x38,
	0x0a, 0x1c, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x3f, 0x0a, 0x23, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x74, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x74, 0x0a, 0x1c, 0x46, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6f, 0x72,
	0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6f,
	0x72, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x6e, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x4e, 0x72, 0x12, 0x18, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x22,
	0x8b, 0x01, 0x0a, 0x1e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x45, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x68,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x22, 0x34, 0x0a,
	0x13, 0x4f, 0x4b, 0x50, 0x61, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x6e, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x4e, 0x72, 0x22, 0x35, 0x0a, 0x14, 0x55, 0x70, 0x68, 0x6f, 0x6c, 0x64, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x32, 0x0a, 0x15, 0x43, 0x61,
	0x73, 0x68, 0x41, 0x70, 0x70, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x61, 0x73, 0x68, 0x5f, 0x74, 0x61, 0x67, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x61, 0x73, 0x68, 0x54, 0x61, 0x67, 0x22, 0x38,
	0x0a, 0x17, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x42, 0x65, 0x61, 0x6d, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x5e, 0x0a, 0x13, 0x56, 0x65, 0x6e, 0x6d,
	0x6f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12,
	0x26, 0x0a, 0x0f, 0x76, 0x65, 0x6e, 0x6d, 0x6f, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x76, 0x65, 0x6e, 0x6d, 0x6f, 0x55,
	0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x68, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x58, 0x0a, 0x16, 0x50, 0x6f, 0x70, 0x6d,
	0x6f, 0x6e, 0x65, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0x53, 0x0a, 0x15, 0x52, 0x65, 0x76, 0x6f, 0x6c, 0x75, 0x74, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x3b, 0x0a, 0x1a, 0x50, 0x65, 0x72, 0x66, 0x65,
	0x63, 0x74, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x6e, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x4e, 0x72, 0x22, 0x53, 0x0a, 0x13, 0x53, 0x77, 0x69, 0x73, 0x68, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d,
	0x6f, 0x62, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x4e, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x68,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x6a, 0x0a, 0x20, 0x55, 0x53, 0x50,
	0x6f, 0x73, 0x74, 0x61, 0x6c, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x25, 0x0a,
	0x0e, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x68, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x60, 0x0a, 0x11, 0x46, 0x32, 0x46, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x7a, 0x0a, 0x18, 0x43, 0x61, 0x73, 0x68, 0x42,
	0x79, 0x4d, 0x61, 0x69, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x6f, 0x73,
	0x74, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x78, 0x74, 0x72, 0x61, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0x3d, 0x0a, 0x17, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x50, 0x61, 0x79,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x22,
	0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x50, 0x61, 0x79,
	0x49, 0x64, 0x22, 0x3b, 0x0a, 0x1a, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x43, 0x61,
	0x73, 0x68, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x72, 0x22,
	0x32, 0x0a, 0x1a, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x77, 0x69, 0x73, 0x65, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x22, 0x84, 0x15, 0x0a, 0x13, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x12, 0x58, 0x0a, 0x13, 0x73,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6d,
	0x61, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69,
	0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x53,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4d, 0x61, 0x70,
	0x48, 0x00, 0x52, 0x11, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x4d, 0x61, 0x70, 0x12, 0x5c, 0x0a, 0x13, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74,
	0x65, 0x64, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74,
	0x65, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x4d, 0x61, 0x70, 0x42, 0x02, 0x18, 0x01, 0x48, 0x00,
	0x52, 0x11, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x4d, 0x61, 0x70, 0x12, 0x3c, 0x0a, 0x09, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x50, 0x65, 0x65,
	0x72, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x08, 0x70, 0x65, 0x65, 0x72, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x55, 0x0a, 0x12, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x65, 0x6e, 0x74,
	0x72, 0x79, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x66, 0x65, 0x72, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x10, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4e, 0x0a, 0x0f, 0x6e, 0x61, 0x76, 0x69,
	0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x4e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x48, 0x00, 0x52, 0x0e, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x12, 0x48, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x64,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x67, 0x0a, 0x18, 0x61, 0x72, 0x62, 0x69, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x41, 0x72, 0x62, 0x69, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x48, 0x00, 0x52, 0x16, 0x61, 0x72, 0x62, 0x69, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x5a, 0x0a, 0x13, 0x70,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69,
	0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x50,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x48, 0x00, 0x52, 0x12, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x45, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x66, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x48,
	0x00, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x5b,
	0x0a, 0x14, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x69,
	0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66,
	0x65, 0x72, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x12, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x68, 0x0a, 0x19, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61, 0x67, 0x65, 0x5f, 0x77, 0x69, 0x74, 0x6e, 0x65,
	0x73, 0x73, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x66, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x67, 0x65, 0x57,
	0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x48, 0x00, 0x52, 0x16, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x67, 0x65, 0x57, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x68, 0x0a, 0x17, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x32, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x32, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x42, 0x02, 0x18, 0x01, 0x48, 0x00, 0x52, 0x15, 0x74, 0x72, 0x61, 0x64, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x32, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x12,
	0x4b, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73,
	0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x50, 0x72,
	0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x70,
	0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x58, 0x0a, 0x13,
	0x74, 0x65, 0x6d, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x5f, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x69, 0x6f, 0x2e, 0x62,
	0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e,
	0x54, 0x65, 0x6d, 0x70, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x48, 0x00, 0x52, 0x11, 0x74, 0x65, 0x6d, 0x70, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61,
	0x6c, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x4f, 0x0a, 0x10, 0x62, 0x6c, 0x69, 0x6e, 0x64, 0x5f,
	0x76, 0x6f, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x56, 0x6f, 0x74, 0x65,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x62, 0x6c, 0x69, 0x6e, 0x64, 0x56, 0x6f,
	0x74, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x4f, 0x0a, 0x10, 0x6d, 0x79, 0x5f, 0x70, 0x72,
	0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x4d, 0x79, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73,
	0x61, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x6d, 0x79, 0x50, 0x72, 0x6f, 0x70,
	0x6f, 0x73, 0x61, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x0b, 0x62, 0x61, 0x6c, 0x6c,
	0x6f, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x66, 0x65, 0x72, 0x2e, 0x42, 0x61, 0x6c, 0x6c, 0x6f, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00,
	0x52, 0x0a, 0x62, 0x61, 0x6c, 0x6c, 0x6f, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x0c,
	0x6d, 0x79, 0x5f, 0x76, 0x6f, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x4d, 0x79, 0x56, 0x6f, 0x74, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x6d, 0x79, 0x56, 0x6f, 0x74, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x53, 0x0a, 0x12, 0x6d, 0x79, 0x5f, 0x62, 0x6c, 0x69, 0x6e, 0x64, 0x5f, 0x76, 0x6f,
	0x74, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x66, 0x65, 0x72, 0x2e, 0x4d, 0x79, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x56, 0x6f, 0x74, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x6d, 0x79, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x56, 0x6f,
	0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4c, 0x0a, 0x0f, 0x64, 0x61, 0x6f, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x44, 0x61, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x64, 0x61, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x12, 0x55, 0x0a, 0x12, 0x6d, 0x79, 0x5f, 0x72, 0x65, 0x70, 0x75, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x4d, 0x79, 0x52, 0x65, 0x70, 0x75, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x10, 0x6d, 0x79, 0x52, 0x65, 0x70,
	0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x5a, 0x0a, 0x15, 0x6d,
	0x79, 0x5f, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x5f, 0x6f, 0x66, 0x5f, 0x62, 0x75, 0x72, 0x6e, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x69, 0x6f, 0x2e,
	0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x2e, 0x4d, 0x79, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x4f, 0x66, 0x42, 0x75, 0x72, 0x6e, 0x4c, 0x69,
	0x73, 0x74, 0x48, 0x00, 0x52, 0x11, 0x6d, 0x79, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x4f, 0x66, 0x42,
	0x75, 0x72, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x81, 0x01, 0x0a, 0x22, 0x75, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x5f, 0x62, 0x73, 0x71, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x1b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x55, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x42, 0x73, 0x71, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x1e, 0x75, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x42, 0x73, 0x71, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x5b, 0x0a, 0x14, 0x73,
	0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x77, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x69, 0x6f, 0x2e, 0x62,
	0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e,
	0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x57, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x48, 0x00, 0x52, 0x12, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x57, 0x69, 0x74, 0x6e,
	0x65, 0x73, 0x73, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x61, 0x0a, 0x16, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69,
	0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x4d,
	0x65, 0x64, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x14, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x58, 0x0a, 0x13, 0x72,
	0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69,
	0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x52,
	0x65, 0x66, 0x75, 0x6e, 0x64, 0x44, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x48, 0x00, 0x52, 0x11, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x44, 0x69, 0x73, 0x70, 0x75, 0x74,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x64, 0x0a, 0x17, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x33, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x33, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x48, 0x00, 0x52, 0x15, 0x74, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x33, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x5b, 0x0a, 0x14, 0x6d,
	0x61, 0x69, 0x6c, 0x62, 0x6f, 0x78, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x69, 0x6f, 0x2e, 0x62,
	0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e,
	0x4d, 0x61, 0x69, 0x6c, 0x62, 0x6f, 0x78, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x48, 0x00, 0x52, 0x12, 0x6d, 0x61, 0x69, 0x6c, 0x62, 0x6f, 0x78, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x58, 0x0a, 0x13, 0x69, 0x67, 0x6e, 0x6f,
	0x72, 0x65, 0x64, 0x5f, 0x6d, 0x61, 0x69, 0x6c, 0x62, 0x6f, 0x78, 0x5f, 0x6d, 0x61, 0x70, 0x18,
	0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x49, 0x67, 0x6e, 0x6f,
	0x72, 0x65, 0x64, 0x4d, 0x61, 0x69, 0x6c, 0x62, 0x6f, 0x78, 0x4d, 0x61, 0x70, 0x48, 0x00, 0x52,
	0x11, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x64, 0x4d, 0x61, 0x69, 0x6c, 0x62, 0x6f, 0x78, 0x4d,
	0x61, 0x70, 0x12, 0x5b, 0x0a, 0x14, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x5f, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x4d, 0x61, 0x70, 0x48, 0x00, 0x52, 0x12, 0x72, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x64, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x4d, 0x61, 0x70, 0x42,
	0x09, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x75, 0x0a, 0x11, 0x53, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x12,
	0x60, 0x0a, 0x17, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x15, 0x73, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65,
	0x73, 0x22, 0x87, 0x01, 0x0a, 0x13, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x34, 0x0a, 0x05, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69,
	0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x42,
	0x79, 0x74, 0x65, 0x41, 0x72, 0x72, 0x61, 0x79, 0x52, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12,
	0x3a, 0x0a, 0x09, 0x6d, 0x61, 0x70, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x70, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x08, 0x6d, 0x61, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x21, 0x0a, 0x09, 0x42,
	0x79, 0x74, 0x65, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x22, 0x4a,
	0x0a, 0x08, 0x4d, 0x61, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x22, 0xf4, 0x01, 0x0a, 0x11, 0x50,
	0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x4d, 0x61, 0x70,
	0x12, 0x6d, 0x0a, 0x13, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x6e,
	0x74, 0x72, 0x79, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e,
	0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x66, 0x65, 0x72, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x64, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x4d, 0x61, 0x70, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x64, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x70, 0x65,
	0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x4d, 0x61, 0x70, 0x1a,
	0x70, 0x0a, 0x16, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x40, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x69, 0x6f, 0x2e,
	0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x2e, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x56, 0x0a, 0x16, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x67, 0x65, 0x57,
	0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x3c, 0x0a, 0x05, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x69, 0x6f, 0x2e,
	0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x67, 0x65, 0x57, 0x69, 0x74, 0x6e, 0x65,
	0x73, 0x73, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x4e, 0x0a, 0x12, 0x53, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x57, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x12,
	0x38, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x66, 0x65, 0x72, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x57, 0x69, 0x74, 0x6e, 0x65,
	0x73, 0x73, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x58, 0x0a, 0x15, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x32, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x12, 0x3f, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x32, 0x42, 0x02, 0x18, 0x01, 0x52, 0x05, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x22, 0x54, 0x0a, 0x15, 0x54, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x33, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x3b, 0x0a, 0x05,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x69, 0x6f,
	0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65,
	0x72, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x33, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x39, 0x0a, 0x08, 0x50, 0x65, 0x65,
	0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x52, 0x04,
	0x70, 0x65, 0x65, 0x72, 0x22, 0x5a, 0x0a, 0x10, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x0d, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0c, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x22, 0xfe, 0x02, 0x0a, 0x0c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x49, 0x64, 0x12, 0x43, 0x0a, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e,
	0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x66, 0x65, 0x72, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x75, 0x62, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x06, 0x70, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x12, 0x20, 0x0a, 0x0c, 0x70, 0x75,
	0x62, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0a, 0x70, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x48, 0x61, 0x73, 0x68, 0x12, 0x36, 0x0a, 0x18,
	0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x5f, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x5f, 0x73, 0x69, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14,
	0x63, 0x6f, 0x69, 0x6e, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x49, 0x6e, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x53, 0x69, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x67, 0x77, 0x69, 0x74, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x65, 0x67, 0x77, 0x69, 0x74, 0x22, 0x82, 0x01, 0x0a,
	0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x42, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x52, 0x42, 0x49, 0x54, 0x52,
	0x41, 0x54, 0x4f, 0x52, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41,
	0x42, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x4f, 0x46, 0x46, 0x45, 0x52, 0x5f, 0x46,
	0x55, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x45, 0x53, 0x45,
	0x52, 0x56, 0x45, 0x44, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x10, 0x04,
	0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x5f, 0x53, 0x49, 0x47, 0x10, 0x05, 0x12,
	0x10, 0x0a, 0x0c, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x50, 0x41, 0x59, 0x4f, 0x55, 0x54, 0x10,
	0x06, 0x22, 0x24, 0x0a, 0x0e, 0x4e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0x62, 0x0a, 0x12, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4c, 0x0a,
	0x0f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0e, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x49, 0x0a, 0x0c, 0x54,
	0x72, 0x61, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x08, 0x74,
	0x72, 0x61, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x66, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x08, 0x74, 0x72,
	0x61, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x22, 0xc9, 0x01, 0x0a, 0x05, 0x4f, 0x66, 0x66, 0x65, 0x72,
	0x12, 0x46, 0x0a, 0x0d, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73,
	0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x4f, 0x66,
	0x66, 0x65, 0x72, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x0c, 0x6f, 0x66, 0x66, 0x65,
	0x72, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x78, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x42, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x00, 0x12,
	0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e,
	0x4f, 0x46, 0x46, 0x45, 0x52, 0x5f, 0x46, 0x45, 0x45, 0x5f, 0x50, 0x41, 0x49, 0x44, 0x10, 0x02,
	0x12, 0x0d, 0x0a, 0x09, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x03, 0x12,
	0x11, 0x0a, 0x0d, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45,
	0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x44, 0x10, 0x05, 0x12,
	0x11, 0x0a, 0x0d, 0x4d, 0x41, 0x4b, 0x45, 0x52, 0x5f, 0x4f, 0x46, 0x46, 0x4c, 0x49, 0x4e, 0x45,
	0x10, 0x06, 0x22, 0x8a, 0x04, 0x0a, 0x09, 0x4f, 0x70, 0x65, 0x6e, 0x4f, 0x66, 0x66, 0x65, 0x72,
	0x12, 0x30, 0x0a, 0x05, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x52, 0x05, 0x6f, 0x66, 0x66,
	0x65, 0x72, 0x12, 0x3a, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x24, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x4f, 0x66, 0x66, 0x65,
	0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x58,
	0x0a, 0x17, 0x61, 0x72, 0x62, 0x69, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x6f, 0x64,
	0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x52, 0x15, 0x61, 0x72, 0x62, 0x69, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x6f, 0x64,
	0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x54, 0x0a, 0x15, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73,
	0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x4e, 0x6f,
	0x64, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x13, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x74, 0x6f, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x5b,
	0x0a, 0x19, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x6e,
	0x6f, 0x64, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x52, 0x16, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x4e, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x74,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0c, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x22, 0x5d, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x42, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x56, 0x41, 0x49, 0x4c,
	0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56,
	0x45, 0x44, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x44, 0x10, 0x03,
	0x12, 0x0c, 0x0a, 0x08, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x45, 0x44, 0x10, 0x04, 0x12, 0x0f,
	0x0a, 0x0b, 0x44, 0x45, 0x41, 0x43, 0x54, 0x49, 0x56, 0x41, 0x54, 0x45, 0x44, 0x10, 0x05, 0x22,
	0xc8, 0x03, 0x0a, 0x08, 0x54, 0x72, 0x61, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x3f, 0x0a, 0x0a,
	0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x4f, 0x66, 0x66, 0x65, 0x72,
	0x48, 0x00, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x6e, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x12, 0x59, 0x0a,
	0x14, 0x62, 0x75, 0x79, 0x65, 0x72, 0x5f, 0x61, 0x73, 0x5f, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x5f,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x69, 0x6f,
	0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65,
	0x72, 0x2e, 0x42, 0x75, 0x79, 0x65, 0x72, 0x41, 0x73, 0x4d, 0x61, 0x6b, 0x65, 0x72, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x48, 0x00, 0x52, 0x11, 0x62, 0x75, 0x79, 0x65, 0x72, 0x41, 0x73, 0x4d, 0x61,
	0x6b, 0x65, 0x72, 0x54, 0x72, 0x61, 0x64, 0x65, 0x12, 0x59, 0x0a, 0x14, 0x62, 0x75, 0x79, 0x65,
	0x72, 0x5f, 0x61, 0x73, 0x5f, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x42, 0x75, 0x79,
	0x65, 0x72, 0x41, 0x73, 0x54, 0x61, 0x6b, 0x65, 0x72, 0x54, 0x72, 0x61, 0x64, 0x65, 0x48, 0x00,
	0x52, 0x11, 0x62, 0x75, 0x79, 0x65, 0x72, 0x41, 0x73, 0x54, 0x61, 0x6b, 0x65, 0x72, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x12, 0x5c, 0x0a, 0x15, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x61, 0x73,
	0x5f, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x41,
	0x73, 0x4d, 0x61, 0x6b, 0x65, 0x72, 0x54, 0x72, 0x61, 0x64, 0x65, 0x48, 0x00, 0x52, 0x12, 0x73,
	0x65, 0x6c, 0x6c, 0x65, 0x72, 0x41, 0x73, 0x4d, 0x61, 0x6b, 0x65, 0x72, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x12, 0x5c, 0x0a, 0x15, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x61, 0x73, 0x5f, 0x74,
	0x61, 0x6b, 0x65, 0x72, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x41, 0x73, 0x54,
	0x61, 0x6b, 0x65, 0x72, 0x54, 0x72, 0x61, 0x64, 0x65, 0x48, 0x00, 0x52, 0x12, 0x73, 0x65, 0x6c,
	0x6c, 0x65, 0x72, 0x41, 0x73, 0x54, 0x61, 0x6b, 0x65, 0x72, 0x54, 0x72, 0x61, 0x64, 0x65, 0x42,
	0x09, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xb5, 0x21, 0x0a, 0x05, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x52,
	0x05, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x12, 0x46, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x66, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x52, 0x0c, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x25,
	0x0a, 0x0f, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x74, 0x78, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x46, 0x65,
	0x65, 0x54, 0x78, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x5f, 0x74, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x54, 0x78, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x70, 0x61, 0x79,
	0x6f, 0x75, 0x74, 0x5f, 0x74, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x54, 0x78, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x14, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61, 0x73, 0x5f, 0x6c,
	0x6f, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x73, 0x4c, 0x6f, 0x6e, 0x67, 0x12, 0x23, 0x0a, 0x0e,
	0x74, 0x78, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x61, 0x73, 0x5f, 0x6c, 0x6f, 0x6e, 0x67, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x74, 0x78, 0x46, 0x65, 0x65, 0x41, 0x73, 0x4c, 0x6f, 0x6e,
	0x67, 0x12, 0x29, 0x0a, 0x11, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x61,
	0x73, 0x5f, 0x6c, 0x6f, 0x6e, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x74, 0x61,
	0x6b, 0x65, 0x72, 0x46, 0x65, 0x65, 0x41, 0x73, 0x4c, 0x6f, 0x6e, 0x67, 0x12, 0x26, 0x0a, 0x0f,
	0x74, 0x61, 0x6b, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x74, 0x61, 0x6b, 0x65, 0x4f, 0x66, 0x66, 0x65, 0x72,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x3f, 0x0a, 0x1d, 0x69, 0x73, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x66, 0x65,
	0x65, 0x5f, 0x62, 0x74, 0x63, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x69, 0x73, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x46, 0x6f, 0x72, 0x54, 0x61, 0x6b, 0x65, 0x72, 0x46,
	0x65, 0x65, 0x42, 0x74, 0x63, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x5b, 0x0a, 0x19, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e,
	0x67, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x69, 0x6f, 0x2e, 0x62,
	0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e,
	0x4e, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x16, 0x74, 0x72, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x36, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x20, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x4c, 0x0a, 0x0d, 0x64,
	0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x27, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x44,
	0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0c, 0x64, 0x69, 0x73,
	0x70, 0x75, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x59, 0x0a, 0x12, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x10, 0x74, 0x72, 0x61, 0x64, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x39, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12,
	0x28, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x61, 0x73, 0x5f, 0x6a,
	0x73, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x41, 0x73, 0x4a, 0x73, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x38,
	0x0a, 0x18, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x16, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x38, 0x0a, 0x18, 0x6d, 0x61, 0x6b, 0x65,
	0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x6d, 0x61, 0x6b, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x12, 0x58, 0x0a, 0x17, 0x61, 0x72, 0x62, 0x69, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x15, 0x61, 0x72, 0x62, 0x69, 0x74, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x54, 0x0a, 0x15,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x69, 0x6f,
	0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65,
	0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x13, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x33, 0x0a, 0x16, 0x61, 0x72, 0x62, 0x69, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x5f, 0x62, 0x74, 0x63, 0x5f, 0x70, 0x75, 0x62, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x13, 0x61, 0x72, 0x62, 0x69, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x74,
	0x63, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x12, 0x37, 0x0a, 0x18, 0x74, 0x61, 0x6b, 0x65, 0x72,
	0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x74, 0x61, 0x6b, 0x65, 0x72,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x56, 0x0a, 0x17, 0x61, 0x72, 0x62, 0x69, 0x74, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x5f, 0x70, 0x75, 0x62, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x72, 0x69, 0x6e, 0x67,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x50, 0x75, 0x62,
	0x4b, 0x65, 0x79, 0x52, 0x69, 0x6e, 0x67, 0x52, 0x14, 0x61, 0x72, 0x62, 0x69, 0x74, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x52, 0x69, 0x6e, 0x67, 0x12, 0x52, 0x0a,
	0x15, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x70, 0x75, 0x62, 0x5f, 0x6b, 0x65,
	0x79, 0x5f, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x69,
	0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66,
	0x65, 0x72, 0x2e, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x52, 0x69, 0x6e, 0x67, 0x52, 0x12, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x52, 0x69, 0x6e,
	0x67, 0x12, 0x33, 0x0a, 0x16, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x74, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x1c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x13, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x54, 0x78, 0x49, 0x64, 0x12, 0x43, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x1d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x69,
	0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66,
	0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0b,
	0x63, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x5f, 0x0a, 0x16, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x69, 0x6f,
	0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65,
	0x72, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x14, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x64, 0x65, 0x6c,
	0x61, 0x79, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x5f, 0x74, 0x78, 0x5f, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x14, 0x64, 0x65, 0x6c, 0x61,
	0x79, 0x65, 0x64, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x54, 0x78, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x12, 0x5b, 0x0a, 0x19, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x21, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x16, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x59, 0x0a,
	0x19, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x75,
	0x62, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x52, 0x69, 0x6e,
	0x67, 0x52, 0x15, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x50, 0x75,
	0x62, 0x4b, 0x65, 0x79, 0x52, 0x69, 0x6e, 0x67, 0x12, 0x56, 0x0a, 0x13, 0x72, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x23, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x11, 0x72,
	0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x3d, 0x0a, 0x19, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x24, 0x20,
	0x01, 0x28, 0x03, 0x42, 0x02, 0x18, 0x01, 0x52, 0x16, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x3d, 0x0a, 0x1b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x25,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x45, 0x78, 0x74, 0x72, 0x61, 0x44, 0x61, 0x74, 0x61, 0x12, 0x31,
	0x0a, 0x15, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x78, 0x5f, 0x70, 0x72, 0x6f, 0x6f, 0x66,
	0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x54, 0x78, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x75, 0x69, 0x64, 0x22, 0xc1, 0x0a, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a,
	0x0e, 0x50, 0x42, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10,
	0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x52, 0x45, 0x50, 0x41, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x54, 0x41, 0x4b, 0x45, 0x52, 0x5f, 0x50, 0x55, 0x42, 0x4c,
	0x49, 0x53, 0x48, 0x45, 0x44, 0x5f, 0x54, 0x41, 0x4b, 0x45, 0x52, 0x5f, 0x46, 0x45, 0x45, 0x5f,
	0x54, 0x58, 0x10, 0x02, 0x12, 0x29, 0x0a, 0x25, 0x4d, 0x41, 0x4b, 0x45, 0x52, 0x5f, 0x53, 0x45,
	0x4e, 0x54, 0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x5f, 0x44, 0x45, 0x50, 0x4f, 0x53,
	0x49, 0x54, 0x5f, 0x54, 0x58, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x03, 0x12,
	0x30, 0x0a, 0x2c, 0x4d, 0x41, 0x4b, 0x45, 0x52, 0x5f, 0x53, 0x41, 0x57, 0x5f, 0x41, 0x52, 0x52,
	0x49, 0x56, 0x45, 0x44, 0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x5f, 0x44, 0x45, 0x50,
	0x4f, 0x53, 0x49, 0x54, 0x5f, 0x54, 0x58, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10,
	0x04, 0x12, 0x36, 0x0a, 0x32, 0x4d, 0x41, 0x4b, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x45,
	0x44, 0x5f, 0x49, 0x4e, 0x5f, 0x4d, 0x41, 0x49, 0x4c, 0x42, 0x4f, 0x58, 0x5f, 0x50, 0x55, 0x42,
	0x4c, 0x49, 0x53, 0x48, 0x5f, 0x44, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x5f, 0x54, 0x58, 0x5f,
	0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x05, 0x12, 0x30, 0x0a, 0x2c, 0x4d, 0x41, 0x4b,
	0x45, 0x52, 0x5f, 0x53, 0x45, 0x4e, 0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x50,
	0x55, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x5f, 0x44, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x5f, 0x54,
	0x58, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x06, 0x12, 0x2d, 0x0a, 0x29, 0x54,
	0x41, 0x4b, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x43, 0x45, 0x49, 0x56, 0x45, 0x44, 0x5f, 0x50, 0x55,
	0x42, 0x4c, 0x49, 0x53, 0x48, 0x5f, 0x44, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x5f, 0x54, 0x58,
	0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x07, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x45,
	0x4c, 0x4c, 0x45, 0x52, 0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x45, 0x44, 0x5f, 0x44,
	0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x5f, 0x54, 0x58, 0x10, 0x08, 0x12, 0x28, 0x0a, 0x24, 0x53,
	0x45, 0x4c, 0x4c, 0x45, 0x52, 0x5f, 0x53, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x45, 0x50, 0x4f, 0x53,
	0x49, 0x54, 0x5f, 0x54, 0x58, 0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x45, 0x44, 0x5f,
	0x4d, 0x53, 0x47, 0x10, 0x09, 0x12, 0x2f, 0x0a, 0x2b, 0x53, 0x45, 0x4c, 0x4c, 0x45, 0x52, 0x5f,
	0x53, 0x41, 0x57, 0x5f, 0x41, 0x52, 0x52, 0x49, 0x56, 0x45, 0x44, 0x5f, 0x44, 0x45, 0x50, 0x4f,
	0x53, 0x49, 0x54, 0x5f, 0x54, 0x58, 0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x45, 0x44,
	0x5f, 0x4d, 0x53, 0x47, 0x10, 0x0a, 0x12, 0x35, 0x0a, 0x31, 0x53, 0x45, 0x4c, 0x4c, 0x45, 0x52,
	0x5f, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x5f, 0x4d, 0x41, 0x49, 0x4c, 0x42,
	0x4f, 0x58, 0x5f, 0x44, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x5f, 0x54, 0x58, 0x5f, 0x50, 0x55,
	0x42, 0x4c, 0x49, 0x53, 0x48, 0x45, 0x44, 0x5f, 0x4d, 0x53, 0x47, 0x10, 0x0b, 0x12, 0x2f, 0x0a,
	0x2b, 0x53, 0x45, 0x4c, 0x4c, 0x45, 0x52, 0x5f, 0x53, 0x45, 0x4e, 0x44, 0x5f, 0x46, 0x41, 0x49,
	0x4c, 0x45, 0x44, 0x5f, 0x44, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x5f, 0x54, 0x58, 0x5f, 0x50,
	0x55, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x45, 0x44, 0x5f, 0x4d, 0x53, 0x47, 0x10, 0x0c, 0x12, 0x2b,
	0x0a, 0x27, 0x42, 0x55, 0x59, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x43, 0x45, 0x49, 0x56, 0x45, 0x44,
	0x5f, 0x44, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x5f, 0x54, 0x58, 0x5f, 0x50, 0x55, 0x42, 0x4c,
	0x49, 0x53, 0x48, 0x45, 0x44, 0x5f, 0x4d, 0x53, 0x47, 0x10, 0x0d, 0x12, 0x23, 0x0a, 0x1f, 0x42,
	0x55, 0x59, 0x45, 0x52, 0x5f, 0x53, 0x41, 0x57, 0x5f, 0x44, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54,
	0x5f, 0x54, 0x58, 0x5f, 0x49, 0x4e, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x10, 0x0e,
	0x12, 0x24, 0x0a, 0x20, 0x44, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x52, 0x4d, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x43,
	0x48, 0x41, 0x49, 0x4e, 0x10, 0x0f, 0x12, 0x30, 0x0a, 0x2c, 0x42, 0x55, 0x59, 0x45, 0x52, 0x5f,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x52, 0x4d, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x5f, 0x55, 0x49, 0x5f,
	0x46, 0x49, 0x41, 0x54, 0x5f, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x4e, 0x49,
	0x54, 0x49, 0x41, 0x54, 0x45, 0x44, 0x10, 0x10, 0x12, 0x29, 0x0a, 0x25, 0x42, 0x55, 0x59, 0x45,
	0x52, 0x5f, 0x53, 0x45, 0x4e, 0x54, 0x5f, 0x46, 0x49, 0x41, 0x54, 0x5f, 0x50, 0x41, 0x59, 0x4d,
	0x45, 0x4e, 0x54, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x4d, 0x53,
	0x47, 0x10, 0x11, 0x12, 0x30, 0x0a, 0x2c, 0x42, 0x55, 0x59, 0x45, 0x52, 0x5f, 0x53, 0x41, 0x57,
	0x5f, 0x41, 0x52, 0x52, 0x49, 0x56, 0x45, 0x44, 0x5f, 0x46, 0x49, 0x41, 0x54, 0x5f, 0x50, 0x41,
	0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x54, 0x45, 0x44, 0x5f,
	0x4d, 0x53, 0x47, 0x10, 0x12, 0x12, 0x36, 0x0a, 0x32, 0x42, 0x55, 0x59, 0x45, 0x52, 0x5f, 0x53,
	0x54, 0x4f, 0x52, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x5f, 0x4d, 0x41, 0x49, 0x4c, 0x42, 0x4f, 0x58,
	0x5f, 0x46, 0x49, 0x41, 0x54, 0x5f, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x4e,
	0x49, 0x54, 0x49, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x4d, 0x53, 0x47, 0x10, 0x13, 0x12, 0x30, 0x0a,
	0x2c, 0x42, 0x55, 0x59, 0x45, 0x52, 0x5f, 0x53, 0x45, 0x4e, 0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c,
	0x45, 0x44, 0x5f, 0x46, 0x49, 0x41, 0x54, 0x5f, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f,
	0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x4d, 0x53, 0x47, 0x10, 0x14, 0x12,
	0x2e, 0x0a, 0x2a, 0x53, 0x45, 0x4c, 0x4c, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x43, 0x45, 0x49, 0x56,
	0x45, 0x44, 0x5f, 0x46, 0x49, 0x41, 0x54, 0x5f, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f,
	0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x4d, 0x53, 0x47, 0x10, 0x15, 0x12,
	0x2f, 0x0a, 0x2b, 0x53, 0x45, 0x4c, 0x4c, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x52,
	0x4d, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x5f, 0x55, 0x49, 0x5f, 0x46, 0x49, 0x41, 0x54, 0x5f, 0x50,
	0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x43, 0x45, 0x49, 0x50, 0x54, 0x10, 0x16,
	0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x45, 0x4c, 0x4c, 0x45, 0x52, 0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49,
	0x53, 0x48, 0x45, 0x44, 0x5f, 0x50, 0x41, 0x59, 0x4f, 0x55, 0x54, 0x5f, 0x54, 0x58, 0x10, 0x17,
	0x12, 0x27, 0x0a, 0x23, 0x53, 0x45, 0x4c, 0x4c, 0x45, 0x52, 0x5f, 0x53, 0x45, 0x4e, 0x54, 0x5f,
	0x50, 0x41, 0x59, 0x4f, 0x55, 0x54, 0x5f, 0x54, 0x58, 0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x53,
	0x48, 0x45, 0x44, 0x5f, 0x4d, 0x53, 0x47, 0x10, 0x18, 0x12, 0x2e, 0x0a, 0x2a, 0x53, 0x45, 0x4c,
	0x4c, 0x45, 0x52, 0x5f, 0x53, 0x41, 0x57, 0x5f, 0x41, 0x52, 0x52, 0x49, 0x56, 0x45, 0x44, 0x5f,
	0x50, 0x41, 0x59, 0x4f, 0x55, 0x54, 0x5f, 0x54, 0x58, 0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x53,
	0x48, 0x45, 0x44, 0x5f, 0x4d, 0x53, 0x47, 0x10, 0x19, 0x12, 0x34, 0x0a, 0x30, 0x53, 0x45, 0x4c,
	0x4c, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x5f, 0x4d, 0x41,
	0x49, 0x4c, 0x42, 0x4f, 0x58, 0x5f, 0x50, 0x41, 0x59, 0x4f, 0x55, 0x54, 0x5f, 0x54, 0x58, 0x5f,
	0x50, 0x55, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x45, 0x44, 0x5f, 0x4d, 0x53, 0x47, 0x10, 0x1a, 0x12,
	0x2e, 0x0a, 0x2a, 0x53, 0x45, 0x4c, 0x4c, 0x45, 0x52, 0x5f, 0x53, 0x45, 0x4e, 0x44, 0x5f, 0x46,
	0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x50, 0x41, 0x59, 0x4f, 0x55, 0x54, 0x5f, 0x54, 0x58, 0x5f,
	0x50, 0x55, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x45, 0x44, 0x5f, 0x4d, 0x53, 0x47, 0x10, 0x1b, 0x12,
	0x2a, 0x0a, 0x26, 0x42, 0x55, 0x59, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x43, 0x45, 0x49, 0x56, 0x45,
	0x44, 0x5f, 0x50, 0x41, 0x59, 0x4f, 0x55, 0x54, 0x5f, 0x54, 0x58, 0x5f, 0x50, 0x55, 0x42, 0x4c,
	0x49, 0x53, 0x48, 0x45, 0x44, 0x5f, 0x4d, 0x53, 0x47, 0x10, 0x1c, 0x12, 0x22, 0x0a, 0x1e, 0x42,
	0x55, 0x59, 0x45, 0x52, 0x5f, 0x53, 0x41, 0x57, 0x5f, 0x50, 0x41, 0x59, 0x4f, 0x55, 0x54, 0x5f,
	0x54, 0x58, 0x5f, 0x49, 0x4e, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x10, 0x1d, 0x12,
	0x16, 0x0a, 0x12, 0x57, 0x49, 0x54, 0x48, 0x44, 0x52, 0x41, 0x57, 0x5f, 0x43, 0x4f, 0x4d, 0x50,
	0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x1e, 0x22, 0xb3, 0x01, 0x0a, 0x05, 0x50, 0x68, 0x61, 0x73,
	0x65, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x42, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x50, 0x48,
	0x41, 0x53, 0x45, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x4e, 0x49, 0x54, 0x10, 0x01, 0x12,
	0x17, 0x0a, 0x13, 0x54, 0x41, 0x4b, 0x45, 0x52, 0x5f, 0x46, 0x45, 0x45, 0x5f, 0x50, 0x55, 0x42,
	0x4c, 0x49, 0x53, 0x48, 0x45, 0x44, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x45, 0x50, 0x4f,
	0x53, 0x49, 0x54, 0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x45, 0x44, 0x10, 0x03, 0x12,
	0x15, 0x0a, 0x11, 0x44, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x52, 0x4d, 0x45, 0x44, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x46, 0x49, 0x41, 0x54, 0x5f, 0x53,
	0x45, 0x4e, 0x54, 0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d, 0x46, 0x49, 0x41, 0x54, 0x5f, 0x52, 0x45,
	0x43, 0x45, 0x49, 0x56, 0x45, 0x44, 0x10, 0x06, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x41, 0x59, 0x4f,
	0x55, 0x54, 0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x45, 0x44, 0x10, 0x07, 0x12, 0x0d,
	0x0a, 0x09, 0x57, 0x49, 0x54, 0x48, 0x44, 0x52, 0x41, 0x57, 0x4e, 0x10, 0x08, 0x22, 0xa5, 0x02,
	0x0a, 0x0c, 0x44, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1a,
	0x0a, 0x16, 0x50, 0x42, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x55,
	0x54, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x4e, 0x4f,
	0x5f, 0x44, 0x49, 0x53, 0x50, 0x55, 0x54, 0x45, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x49,
	0x53, 0x50, 0x55, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x45, 0x44, 0x10,
	0x02, 0x12, 0x1b, 0x0a, 0x17, 0x44, 0x49, 0x53, 0x50, 0x55, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41,
	0x52, 0x54, 0x45, 0x44, 0x5f, 0x42, 0x59, 0x5f, 0x50, 0x45, 0x45, 0x52, 0x10, 0x03, 0x12, 0x12,
	0x0a, 0x0e, 0x44, 0x49, 0x53, 0x50, 0x55, 0x54, 0x45, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x44,
	0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x45, 0x44, 0x10, 0x05, 0x12, 0x1d, 0x0a, 0x19, 0x4d,
	0x45, 0x44, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x45, 0x44,
	0x5f, 0x42, 0x59, 0x5f, 0x50, 0x45, 0x45, 0x52, 0x10, 0x06, 0x12, 0x14, 0x0a, 0x10, 0x4d, 0x45,
	0x44, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x44, 0x10, 0x07,
	0x12, 0x14, 0x0a, 0x10, 0x52, 0x45, 0x46, 0x55, 0x4e, 0x44, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45,
	0x53, 0x54, 0x45, 0x44, 0x10, 0x08, 0x12, 0x22, 0x0a, 0x1e, 0x52, 0x45, 0x46, 0x55, 0x4e, 0x44,
	0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x45, 0x44,
	0x5f, 0x42, 0x59, 0x5f, 0x50, 0x45, 0x45, 0x52, 0x10, 0x09, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x45,
	0x46, 0x55, 0x4e, 0x44, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x43, 0x4c, 0x4f,
	0x53, 0x45, 0x44, 0x10, 0x0a, 0x22, 0x6b, 0x0a, 0x10, 0x54, 0x72, 0x61, 0x64, 0x65, 0x50, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x1b, 0x50, 0x42, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x50, 0x45, 0x52, 0x49,
	0x4f, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x46, 0x49,
	0x52, 0x53, 0x54, 0x5f, 0x48, 0x41, 0x4c, 0x46, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x45,
	0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x48, 0x41, 0x4c, 0x46, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x54,
	0x52, 0x41, 0x44, 0x45, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x5f, 0x4f, 0x56, 0x45, 0x52,
	0x10, 0x03, 0x22, 0x45, 0x0a, 0x11, 0x42, 0x75, 0x79, 0x65, 0x72, 0x41, 0x73, 0x4d, 0x61, 0x6b,
	0x65, 0x72, 0x54, 0x72, 0x61, 0x64, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x52, 0x05, 0x74, 0x72, 0x61, 0x64, 0x65, 0x22, 0x45, 0x0a, 0x11, 0x42, 0x75, 0x79,
	0x65, 0x72, 0x41, 0x73, 0x54, 0x61, 0x6b, 0x65, 0x72, 0x54, 0x72, 0x61, 0x64, 0x65, 0x12, 0x30,
	0x0a, 0x05, 0x74, 0x72, 0x61, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x66, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x05, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x22, 0x46, 0x0a, 0x12, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x41, 0x73, 0x4d, 0x61, 0x6b, 0x65,
	0x72, 0x54, 0x72, 0x61, 0x64, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x74, 0x72, 0x61, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x52, 0x05, 0x74, 0x72, 0x61, 0x64, 0x65, 0x22, 0x46, 0x0a, 0x12, 0x53, 0x65, 0x6c, 0x6c,
	0x65, 0x72, 0x41, 0x73, 0x54, 0x61, 0x6b, 0x65, 0x72, 0x54, 0x72, 0x61, 0x64, 0x65, 0x12, 0x30,
	0x0a, 0x05, 0x74, 0x72, 0x61, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x66, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x05, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x22, 0xd5, 0x08, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x12, 0x43, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x65, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73,
	0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x54, 0x72,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x65, 0x72, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x64, 0x69,
	0x6e, 0x67, 0x50, 0x65, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x41, 0x0a, 0x0c, 0x70, 0x75, 0x62, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x72, 0x69, 0x6e, 0x67,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x50, 0x75, 0x62,
	0x4b, 0x65, 0x79, 0x52, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x70, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x52,
	0x69, 0x6e, 0x67, 0x12, 0x2e, 0x0a, 0x14, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x65,
	0x72, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x74, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x74, 0x61, 0x6b, 0x65, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x46, 0x65, 0x65, 0x54,
	0x78, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x5f, 0x74, 0x78,
	0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x11, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x54, 0x78, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x64, 0x5f,
	0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x74, 0x78, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x11, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x64, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x54, 0x78, 0x12, 0x5e, 0x0a, 0x16, 0x72, 0x61, 0x77, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x52, 0x61, 0x77, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x14, 0x72,
	0x61, 0x77, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x11, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x13, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x75, 0x73, 0x65, 0x5f, 0x73,
	0x61, 0x76, 0x69, 0x6e, 0x67, 0x73, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x10, 0x75, 0x73, 0x65, 0x53, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x73, 0x57,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12, 0x41, 0x0a, 0x1e, 0x66, 0x75, 0x6e, 0x64, 0x73, 0x5f, 0x6e,
	0x65, 0x65, 0x64, 0x65, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f,
	0x61, 0x73, 0x5f, 0x6c, 0x6f, 0x6e, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x19, 0x66,
	0x75, 0x6e, 0x64, 0x73, 0x4e, 0x65, 0x65, 0x64, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x41, 0x73, 0x4c, 0x6f, 0x6e, 0x67, 0x12, 0x2e, 0x0a, 0x14, 0x6d, 0x79, 0x5f, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x5f, 0x73, 0x69, 0x67, 0x5f, 0x70, 0x75, 0x62, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x6d, 0x79, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53,
	0x69, 0x67, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x12, 0x64, 0x0a, 0x1e, 0x74, 0x65, 0x6d, 0x70,
	0x5f, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x6e, 0x6f,
	0x64, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x52, 0x1a, 0x74, 0x65, 0x6d, 0x70, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x50,
	0x65, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x41,
	0x0a, 0x1d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65,
	0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x3f, 0x0a, 0x1c, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x61,
	0x79, 0x6f, 0x75, 0x74, 0x5f, 0x74, 0x78, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x19, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65,
	0x64, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x54, 0x78, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x12, 0x4a, 0x0a, 0x22, 0x62, 0x75, 0x79, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x79, 0x6f,
	0x75, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1e,
	0x62, 0x75, 0x79, 0x65, 0x72, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x46, 0x72, 0x6f, 0x6d, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4c,
	0x0a, 0x23, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1f, 0x73, 0x65, 0x6c,
	0x6c, 0x65, 0x72, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x46,
	0x72, 0x6f, 0x6d, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x04, 0x08, 0x07,
	0x10, 0x08, 0x4a, 0x04, 0x08, 0x08, 0x10, 0x09, 0x22, 0xcf, 0x06, 0x0a, 0x0b, 0x54, 0x72, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x62, 0x0a, 0x17, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69,
	0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x52, 0x15, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x70,
	0x61, 0x79, 0x6f, 0x75, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x70, 0x61, 0x79, 0x6f,
	0x75, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12,
	0x28, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x61, 0x73, 0x5f, 0x6a,
	0x73, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x41, 0x73, 0x4a, 0x73, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x12, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x41, 0x0a, 0x0c, 0x70, 0x75, 0x62, 0x5f, 0x6b, 0x65,
	0x79, 0x5f, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x69,
	0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66,
	0x65, 0x72, 0x2e, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x52, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x70,
	0x75, 0x62, 0x4b, 0x65, 0x79, 0x52, 0x69, 0x6e, 0x67, 0x12, 0x29, 0x0a, 0x11, 0x6d, 0x75, 0x6c,
	0x74, 0x69, 0x5f, 0x73, 0x69, 0x67, 0x5f, 0x70, 0x75, 0x62, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x69, 0x67, 0x50, 0x75,
	0x62, 0x4b, 0x65, 0x79, 0x12, 0x5e, 0x0a, 0x16, 0x72, 0x61, 0x77, 0x5f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x09,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x52, 0x61, 0x77, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x14,
	0x72, 0x61, 0x77, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x11, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x13, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x39, 0x0a, 0x19, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x61, 0x67, 0x65, 0x5f, 0x77, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x5f,
	0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x16, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x41, 0x67, 0x65, 0x57, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x4e, 0x6f,
	0x6e, 0x63, 0x65, 0x12, 0x41, 0x0a, 0x1d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61,
	0x67, 0x65, 0x5f, 0x77, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x1a, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x41, 0x67, 0x65, 0x57, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x3f, 0x0a, 0x1c, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x5f, 0x74, 0x78, 0x5f,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x19, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x64, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x54,
	0x78, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x50, 0x0a, 0x16, 0x41, 0x72,
	0x62, 0x69, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x07, 0x64, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x44, 0x69, 0x73, 0x70,
	0x75, 0x74, 0x65, 0x52, 0x07, 0x64, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x22, 0x4e, 0x0a, 0x14,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x07, 0x64, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x44, 0x69, 0x73, 0x70,
	0x75, 0x74, 0x65, 0x52, 0x07, 0x64, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x22, 0x4b, 0x0a, 0x11,
	0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x44, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x36, 0x0a, 0x07, 0x64, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65,
	0x52, 0x07, 0x64, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x22, 0xd0, 0x1e, 0x0a, 0x12, 0x50, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x12, 0x23, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x4c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x3f, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x69, 0x6f,
	0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65,
	0x72, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x4b, 0x0a, 0x0f, 0x66, 0x69, 0x61, 0x74, 0x5f, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x52, 0x0e, 0x66, 0x69, 0x61, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x69, 0x65, 0x73, 0x12, 0x4f, 0x0a, 0x11, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x5f, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x66, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x52, 0x10, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x69, 0x65, 0x73, 0x12, 0x69, 0x0a, 0x1d, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x5f, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x69,
	0x6e, 0x5f, 0x6e, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x69, 0x6f,
	0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65,
	0x72, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x45, 0x78, 0x70, 0x6c,
	0x6f, 0x72, 0x65, 0x72, 0x52, 0x19, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x69, 0x6e,
	0x45, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72, 0x4d, 0x61, 0x69, 0x6e, 0x4e, 0x65, 0x74, 0x12,
	0x69, 0x0a, 0x1d, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x65,
	0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x6e, 0x65, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72, 0x52,
	0x19, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x45, 0x78, 0x70, 0x6c, 0x6f,
	0x72, 0x65, 0x72, 0x54, 0x65, 0x73, 0x74, 0x4e, 0x65, 0x74, 0x12, 0x60, 0x0a, 0x18, 0x62, 0x73,
	0x71, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x65, 0x78,
	0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x69,
	0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66,
	0x65, 0x72, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x45, 0x78, 0x70,
	0x6c, 0x6f, 0x72, 0x65, 0x72, 0x52, 0x15, 0x62, 0x73, 0x71, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x43,
	0x68, 0x61, 0x69, 0x6e, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x10,
	0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x36, 0x0a, 0x17, 0x61, 0x75, 0x74, 0x6f, 0x5f,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x61, 0x72, 0x62, 0x69, 0x74, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x61, 0x75, 0x74, 0x6f, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x41, 0x72, 0x62, 0x69, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x12,
	0x6c, 0x0a, 0x13, 0x64, 0x6f, 0x6e, 0x74, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x61, 0x67, 0x61,
	0x69, 0x6e, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x69,
	0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66,
	0x65, 0x72, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x44, 0x6f, 0x6e, 0x74, 0x53, 0x68, 0x6f, 0x77, 0x41, 0x67,
	0x61, 0x69, 0x6e, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x64, 0x6f, 0x6e,
	0x74, 0x53, 0x68, 0x6f, 0x77, 0x41, 0x67, 0x61, 0x69, 0x6e, 0x4d, 0x61, 0x70, 0x12, 0x21, 0x0a,
	0x0c, 0x74, 0x61, 0x63, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x74, 0x61, 0x63, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64,
	0x12, 0x30, 0x0a, 0x15, 0x75, 0x73, 0x65, 0x5f, 0x74, 0x6f, 0x72, 0x5f, 0x66, 0x6f, 0x72, 0x5f,
	0x62, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x6a, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x11, 0x75, 0x73, 0x65, 0x54, 0x6f, 0x72, 0x46, 0x6f, 0x72, 0x42, 0x69, 0x74, 0x63, 0x6f, 0x69,
	0x6e, 0x4a, 0x12, 0x3f, 0x0a, 0x1d, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x6f, 0x77, 0x6e, 0x5f, 0x6f,
	0x66, 0x66, 0x65, 0x72, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x62,
	0x6f, 0x6f, 0x6b, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x73, 0x68, 0x6f, 0x77, 0x4f,
	0x77, 0x6e, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x73, 0x49, 0x6e, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x42,
	0x6f, 0x6f, 0x6b, 0x12, 0x5c, 0x0a, 0x18, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64,
	0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x16, 0x70, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x72, 0x65, 0x64, 0x54, 0x72, 0x61, 0x64, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x12, 0x3c, 0x0a, 0x1b, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x5f,
	0x74, 0x78, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x76, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x17, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x61, 0x6c, 0x54, 0x78, 0x46, 0x65, 0x65, 0x49, 0x6e, 0x56, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12,
	0x3e, 0x0a, 0x1c, 0x75, 0x73, 0x65, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x77, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x5f, 0x74, 0x78, 0x5f, 0x66, 0x65, 0x65, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x75, 0x73, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x54, 0x78, 0x46, 0x65, 0x65, 0x12,
	0x40, 0x0a, 0x1d, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x64, 0x69, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x19, 0x6d, 0x61, 0x78, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x12, 0x4f, 0x0a, 0x25, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x5f,
	0x63, 0x68, 0x61, 0x72, 0x74, 0x5f, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x20, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x42, 0x6f, 0x6f, 0x6b, 0x43, 0x68, 0x61, 0x72, 0x74,
	0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x48, 0x0a, 0x21, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x72,
	0x74, 0x73, 0x5f, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1d, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x43, 0x68, 0x61, 0x72, 0x74, 0x73, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x37, 0x0a, 0x18,
	0x62, 0x75, 0x79, 0x5f, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15,
	0x62, 0x75, 0x79, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x39, 0x0a, 0x19, 0x73, 0x65, 0x6c, 0x6c, 0x5f, 0x73, 0x63,
	0x72, 0x65, 0x65, 0x6e, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x73, 0x65, 0x6c, 0x6c, 0x53, 0x63,
	0x72, 0x65, 0x65, 0x6e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x46, 0x0a, 0x20, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1c, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x54, 0x69, 0x63, 0x6b, 0x55,
	0x6e, 0x69, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x65, 0x73, 0x79,
	0x6e, 0x63, 0x5f, 0x53, 0x70, 0x76, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x72, 0x65, 0x73, 0x79, 0x6e, 0x63, 0x53, 0x70,
	0x76, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x12, 0x4b, 0x0a, 0x22, 0x73, 0x6f,
	0x72, 0x74, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x69, 0x65, 0x73, 0x5f, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x79,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1f, 0x73, 0x6f, 0x72, 0x74, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x4e, 0x75, 0x6d, 0x65,
	0x72, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x12, 0x3b, 0x0a, 0x1a, 0x75, 0x73, 0x65, 0x5f, 0x70,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x64, 0x5f,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x75, 0x73, 0x65,
	0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x64, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x59, 0x0a, 0x0c, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x67,
	0x5f, 0x6d, 0x61, 0x70, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x69, 0x6f, 0x2e,
	0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x2e, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x54, 0x61, 0x67, 0x4d, 0x61, 0x70, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0a, 0x70, 0x65, 0x65, 0x72, 0x54, 0x61, 0x67, 0x4d, 0x61, 0x70, 0x12,
	0x23, 0x0a, 0x0d, 0x62, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73,
	0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x4e,
	0x6f, 0x64, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x72, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x1c, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x11, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x73,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x16, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x79, 0x5f, 0x63, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x1d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x43,
	0x68, 0x6f, 0x6f, 0x73, 0x65, 0x72, 0x50, 0x61, 0x74, 0x68, 0x12, 0x46, 0x0a, 0x1e, 0x62, 0x75,
	0x79, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x64, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x5f, 0x61, 0x73, 0x5f, 0x6c, 0x6f, 0x6e, 0x67, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x03, 0x42, 0x02, 0x18, 0x01, 0x52, 0x1a, 0x62, 0x75, 0x79, 0x65, 0x72, 0x53, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x41, 0x73, 0x4c, 0x6f,
	0x6e, 0x67, 0x12, 0x25, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x5f, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x41,
	0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x7a, 0x0a, 0x27, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f,
	0x66, 0x66, 0x65, 0x72, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x69, 0x6f, 0x2e,
	0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x24, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4f, 0x66, 0x66, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0e, 0x70, 0x61, 0x79, 0x5f, 0x66, 0x65, 0x65,
	0x5f, 0x69, 0x6e, 0x5f, 0x42, 0x74, 0x63, 0x18, 0x21, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x70,
	0x61, 0x79, 0x46, 0x65, 0x65, 0x49, 0x6e, 0x42, 0x74, 0x63, 0x12, 0x29, 0x0a, 0x10, 0x62, 0x72,
	0x69, 0x64, 0x67, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x22,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x23,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x32, 0x0a, 0x15, 0x74, 0x6f, 0x72,
	0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x69, 0x6e,
	0x61, 0x6c, 0x18, 0x24, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x74, 0x6f, 0x72, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x25, 0x0a,
	0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x73, 0x18,
	0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x42, 0x72, 0x69,
	0x64, 0x67, 0x65, 0x73, 0x12, 0x3f, 0x0a, 0x1c, 0x62, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x5f,
	0x6e, 0x6f, 0x64, 0x65, 0x73, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x72, 0x64,
	0x69, 0x6e, 0x61, 0x6c, 0x18, 0x26, 0x20, 0x01, 0x28, 0x05, 0x52, 0x19, 0x62, 0x69, 0x74, 0x63,
	0x6f, 0x69, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72,
	0x64, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61,
	0x6c, 0x5f, 0x69, 0x64, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x72, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x13, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f,
	0x6b, 0x65, 0x79, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x28, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4b, 0x65, 0x79, 0x41, 0x6e, 0x64,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x4a, 0x0a, 0x22, 0x75, 0x73, 0x65, 0x5f, 0x73, 0x6f, 0x75,
	0x6e, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x29, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x1e, 0x75, 0x73, 0x65, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x46, 0x6f, 0x72, 0x4d, 0x6f,
	0x62, 0x69, 0x6c, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x36, 0x0a, 0x17, 0x75, 0x73, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x2a, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x15, 0x75, 0x73, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x38, 0x0a, 0x18, 0x75, 0x73, 0x65,
	0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x75, 0x73, 0x65,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x75, 0x73, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x2c,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x75, 0x73, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x75,
	0x73, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x62, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18,
	0x2d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x75, 0x73, 0x65, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x62,
	0x79, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x27, 0x0a, 0x10, 0x69, 0x73, 0x5f, 0x64, 0x61, 0x6f, 0x5f,
	0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0d, 0x69, 0x73, 0x44, 0x61, 0x6f, 0x46, 0x75, 0x6c, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x72, 0x70, 0x63, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x72, 0x70, 0x63, 0x55, 0x73, 0x65, 0x72, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x70, 0x63,
	0x5f, 0x70, 0x77, 0x18, 0x30, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x70, 0x63, 0x50, 0x77,
	0x12, 0x51, 0x0a, 0x26, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x31, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x21, 0x74, 0x61, 0x6b, 0x65, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x48, 0x0a, 0x21, 0x62, 0x75, 0x79, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x61, 0x73,
	0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x32, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1d,
	0x62, 0x75, 0x79, 0x65, 0x72, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x44, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x41, 0x73, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x32, 0x0a,
	0x15, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f, 0x64, 0x75, 0x73, 0x74, 0x5f, 0x74, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x33, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x69, 0x67,
	0x6e, 0x6f, 0x72, 0x65, 0x44, 0x75, 0x73, 0x74, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x12, 0x5c, 0x0a, 0x2c, 0x62, 0x75, 0x79, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x5f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x61, 0x73, 0x5f, 0x70,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x6f, 0x18, 0x34, 0x20, 0x01, 0x28, 0x01, 0x52, 0x26, 0x62, 0x75, 0x79, 0x65, 0x72, 0x53, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x41, 0x73, 0x50,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x12,
	0x2a, 0x0a, 0x11, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f,
	0x70, 0x6f, 0x72, 0x74, 0x18, 0x35, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63,
	0x73, 0x73, 0x5f, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x18, 0x36, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x63, 0x73, 0x73, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x61, 0x63, 0x5f,
	0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x76, 0x31, 0x32, 0x30, 0x18, 0x37, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0f, 0x74, 0x61, 0x63, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64,
	0x56, 0x31, 0x32, 0x30, 0x12, 0x5c, 0x0a, 0x15, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x72, 0x6d, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x38, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x72, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x13, 0x61,
	0x75, 0x74, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x12, 0x3b, 0x0a, 0x1a, 0x62, 0x73, 0x71, 0x5f, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67,
	0x65, 0x5f, 0x74, 0x72, 0x69, 0x6d, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x18, 0x39, 0x20, 0x01, 0x28, 0x01, 0x52, 0x17, 0x62, 0x73, 0x71, 0x41, 0x76, 0x65, 0x72, 0x61,
	0x67, 0x65, 0x54, 0x72, 0x69, 0x6d, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12,
	0x46, 0x0a, 0x20, 0x68, 0x69, 0x64, 0x65, 0x5f, 0x6e, 0x6f, 0x6e, 0x5f, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x73, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1c, 0x68, 0x69, 0x64, 0x65, 0x4e,
	0x6f, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x12, 0x46, 0x0a, 0x20, 0x73, 0x68, 0x6f, 0x77, 0x5f,
	0x6f, 0x66, 0x66, 0x65, 0x72, 0x73, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x5f,
	0x6d, 0x79, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x3b, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x1c, 0x73, 0x68, 0x6f, 0x77, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x73, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x69, 0x6e, 0x67, 0x4d, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12,
	0x24, 0x0a, 0x0e, 0x64, 0x65, 0x6e, 0x79, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x74, 0x61, 0x6b, 0x65,
	0x72, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x64, 0x65, 0x6e, 0x79, 0x41, 0x70, 0x69,
	0x54, 0x61, 0x6b, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x15, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f,
	0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x18, 0x3d,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x4f, 0x6e, 0x50, 0x72,
	0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x1a, 0x43, 0x0a, 0x15, 0x44, 0x6f, 0x6e, 0x74,
	0x53, 0x68, 0x6f, 0x77, 0x41, 0x67, 0x61, 0x69, 0x6e, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3d, 0x0a,
	0x0f, 0x50, 0x65, 0x65, 0x72, 0x54, 0x61, 0x67, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xd9, 0x01, 0x0a,
	0x13, 0x41, 0x75, 0x74, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x35,
	0x0a, 0x16, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15,
	0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x10, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x9e, 0x0a, 0x0a, 0x0b, 0x55, 0x73, 0x65,
	0x72, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x4e, 0x0a, 0x10, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x5b, 0x0a, 0x17, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69,
	0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x15, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x43, 0x0a, 0x1e, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64,
	0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x1b, 0x61, 0x63,
	0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x4c, 0x6f,
	0x63, 0x61, 0x6c, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x45, 0x0a, 0x10, 0x64, 0x65, 0x76,
	0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x5f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52,
	0x0f, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x41, 0x6c, 0x65, 0x72, 0x74,
	0x12, 0x43, 0x0a, 0x0f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x5f, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x69, 0x6f, 0x2e, 0x62,
	0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e,
	0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x0e, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x64,
	0x41, 0x6c, 0x65, 0x72, 0x74, 0x12, 0x48, 0x0a, 0x11, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70,
	0x65, 0x72, 0x73, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x10, 0x64,
	0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12,
	0x52, 0x0a, 0x14, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x72, 0x62, 0x69,
	0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x66, 0x65, 0x72, 0x2e, 0x41, 0x72, 0x62, 0x69, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x13,
	0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x41, 0x72, 0x62, 0x69, 0x74, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x73, 0x12, 0x4c, 0x0a, 0x12, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x5f,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x11,
	0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x6f, 0x72,
	0x73, 0x12, 0x54, 0x0a, 0x15, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x5f,
	0x61, 0x72, 0x62, 0x69, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x41, 0x72, 0x62, 0x69, 0x74, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x52, 0x14, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x41, 0x72, 0x62,
	0x69, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x4e, 0x0a, 0x13, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61,
	0x74, 0x6f, 0x72, 0x52, 0x12, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x4d,
	0x65, 0x64, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x53, 0x0a, 0x12, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x5f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x41,
	0x6c, 0x65, 0x72, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x10, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x58, 0x0a, 0x14,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x69, 0x6f, 0x2e,
	0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x52, 0x12, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x56, 0x0a, 0x16, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74,
	0x65, 0x64, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x14, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74,
	0x65, 0x64, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x58,
	0x0a, 0x17, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x52, 0x15, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x52, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x44, 0x0a, 0x06, 0x63, 0x6f, 0x6f, 0x6b,
	0x69, 0x65, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69,
	0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x43, 0x6f, 0x6f, 0x6b, 0x69,
	0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x1a, 0x39,
	0x0a, 0x0b, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xf8, 0x01, 0x0a, 0x09, 0x42, 0x61,
	0x73, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x72, 0x65, 0x76, 0x69,
	0x6f, 0x75, 0x73, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x3c, 0x0a, 0x09, 0x72, 0x61, 0x77, 0x5f, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x69, 0x6f, 0x2e,
	0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x2e, 0x52, 0x61, 0x77, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x08, 0x72, 0x61, 0x77,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x32, 0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x48, 0x00, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x09, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0x40, 0x0a, 0x08, 0x52, 0x61, 0x77, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x12, 0x34, 0x0a, 0x07, 0x72, 0x61, 0x77, 0x5f, 0x74, 0x78, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x54, 0x78, 0x52, 0x06,
	0x72, 0x61, 0x77, 0x54, 0x78, 0x73, 0x22, 0x36, 0x0a, 0x05, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12,
	0x2d, 0x0a, 0x03, 0x74, 0x78, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x69,
	0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66,
	0x65, 0x72, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x54, 0x78, 0x52, 0x03, 0x74, 0x78, 0x73, 0x22, 0xb3,
	0x02, 0x0a, 0x06, 0x42, 0x61, 0x73, 0x65, 0x54, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x78, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74,
	0x78, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x39,
	0x0a, 0x09, 0x74, 0x78, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x54, 0x78, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52,
	0x08, 0x74, 0x78, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x33, 0x0a, 0x06, 0x72, 0x61, 0x77,
	0x5f, 0x74, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x69, 0x6f, 0x2e, 0x62,
	0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e,
	0x52, 0x61, 0x77, 0x54, 0x78, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x77, 0x54, 0x78, 0x12, 0x29,
	0x0a, 0x02, 0x74, 0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x69, 0x6f, 0x2e,
	0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x2e, 0x54, 0x78, 0x48, 0x00, 0x52, 0x02, 0x74, 0x78, 0x42, 0x09, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0x50, 0x0a, 0x05, 0x52, 0x61, 0x77, 0x54, 0x78, 0x12, 0x47, 0x0a,
	0x0e, 0x72, 0x61, 0x77, 0x5f, 0x74, 0x78, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x42, 0x61, 0x73, 0x65,
	0x54, 0x78, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x0c, 0x72, 0x61, 0x77, 0x54, 0x78, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x22, 0x98, 0x01, 0x0a, 0x02, 0x54, 0x78, 0x12, 0x40, 0x0a,
	0x0a, 0x74, 0x78, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x54, 0x78, 0x4f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x52, 0x09, 0x74, 0x78, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x12,
	0x33, 0x0a, 0x06, 0x74, 0x78, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1b, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x54, 0x78, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x74, 0x78,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x75, 0x72, 0x6e, 0x74, 0x5f, 0x62, 0x73,
	0x71, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x62, 0x75, 0x72, 0x6e, 0x74, 0x42, 0x73,
	0x71, 0x22, 0x97, 0x01, 0x0a, 0x07, 0x54, 0x78, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x38, 0x0a,
	0x19, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x78, 0x5f, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x5f, 0x74, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x15, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x54, 0x78, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x54, 0x78, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x19, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x78, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x54, 0x78, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x75, 0x62, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x22, 0x8c, 0x03, 0x0a, 0x0c,
	0x42, 0x61, 0x73, 0x65, 0x54, 0x78, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x13, 0x0a, 0x05, 0x74, 0x78, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x78, 0x49, 0x64, 0x12, 0x47, 0x0a,
	0x0e, 0x70, 0x75, 0x62, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x50, 0x75, 0x62, 0x4b,
	0x65, 0x79, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x0c, 0x70, 0x75, 0x62, 0x4b, 0x65, 0x79,
	0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x24, 0x0a, 0x0e, 0x6f, 0x70, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x6f, 0x70, 0x52, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f,
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x46, 0x0a, 0x0d, 0x72, 0x61, 0x77,
	0x5f, 0x74, 0x78, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x52, 0x61, 0x77, 0x54, 0x78, 0x4f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x72, 0x61, 0x77, 0x54, 0x78, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x12, 0x3c, 0x0a, 0x09, 0x74, 0x78, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x54, 0x78, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x48, 0x00, 0x52, 0x08, 0x74, 0x78, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x42,
	0x09, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x56, 0x0a, 0x13, 0x55, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x54, 0x78, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x13, 0x0a,
	0x05, 0x74, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x78,
	0x49, 0x64, 0x22, 0x0d, 0x0a, 0x0b, 0x52, 0x61, 0x77, 0x54, 0x78, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x22, 0xa0, 0x01, 0x0a, 0x08, 0x54, 0x78, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x47,
	0x0a, 0x0e, 0x74, 0x78, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x54, 0x78, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x74, 0x78, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x6b, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x6b,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x11, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x22, 0x64, 0x0a, 0x09, 0x53, 0x70, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x12, 0x13, 0x0a, 0x05, 0x74, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x78, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0xad, 0x01, 0x0a, 0x0c, 0x50,
	0x75, 0x62, 0x4b, 0x65, 0x79, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x72,
	0x65, 0x71, 0x5f, 0x73, 0x69, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72,
	0x65, 0x71, 0x53, 0x69, 0x67, 0x73, 0x12, 0x40, 0x0a, 0x0b, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x69, 0x6f,
	0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65,
	0x72, 0x2e, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x73, 0x6d, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x73, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x68, 0x65, 0x78, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x68, 0x65, 0x78, 0x22, 0x4b, 0x0a, 0x08, 0x44, 0x61,
	0x6f, 0x50, 0x68, 0x61, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x68, 0x61, 0x73, 0x65, 0x5f,
	0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x70,
	0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x74, 0x0a, 0x05, 0x43, 0x79, 0x63, 0x6c, 0x65,
	0x12, 0x2f, 0x0a, 0x14, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x66, 0x69,
	0x72, 0x73, 0x74, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11,
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x4f, 0x66, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4c, 0x6f, 0x63,
	0x6b, 0x12, 0x3a, 0x0a, 0x09, 0x64, 0x61, 0x6f, 0x5f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x44, 0x61, 0x6f, 0x50, 0x68,
	0x61, 0x73, 0x65, 0x52, 0x08, 0x64, 0x61, 0x6f, 0x50, 0x68, 0x61, 0x73, 0x65, 0x22, 0xbf, 0x08,
	0x0a, 0x08, 0x44, 0x61, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x36, 0x0a,
	0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x66, 0x65, 0x72, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x06, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x32, 0x0a, 0x06, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x43, 0x79, 0x63, 0x6c,
	0x65, 0x52, 0x06, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x73, 0x12, 0x68, 0x0a, 0x15, 0x75, 0x6e, 0x73,
	0x70, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x78, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x6d,
	0x61, 0x70, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69,
	0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x44,
	0x61, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x55, 0x6e, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x54,
	0x78, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x12, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x54, 0x78, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x4d, 0x61, 0x70, 0x12, 0x51, 0x0a, 0x0c, 0x69, 0x73, 0x73, 0x75, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x6d, 0x61, 0x70, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x69, 0x6f, 0x2e, 0x62,
	0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e,
	0x44, 0x61, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x61, 0x6e, 0x63,
	0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x69, 0x73, 0x73, 0x75, 0x61,
	0x6e, 0x63, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x3b, 0x0a, 0x1a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x73,
	0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x74, 0x78, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x17, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x73, 0x63, 0x61, 0x74, 0x65, 0x64, 0x4c, 0x6f, 0x63, 0x6b, 0x75, 0x70, 0x54, 0x78, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x55, 0x0a, 0x0e, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x69, 0x6f,
	0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65,
	0x72, 0x2e, 0x44, 0x61, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x6e, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x73, 0x70,
	0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x61, 0x70, 0x12, 0x4c, 0x0a, 0x11, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x5e, 0x0a, 0x17, 0x65, 0x76, 0x61, 0x6c,
	0x75, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x69, 0x6f, 0x2e, 0x62,
	0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e,
	0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61,
	0x6c, 0x52, 0x15, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x70,
	0x6f, 0x73, 0x61, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x7b, 0x0a, 0x22, 0x64, 0x65, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x61, 0x6c, 0x6c, 0x6f, 0x74, 0x73, 0x5f, 0x77, 0x69,
	0x74, 0x68, 0x5f, 0x6d, 0x65, 0x72, 0x69, 0x74, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x65, 0x64, 0x42, 0x61, 0x6c, 0x6c, 0x6f, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68, 0x4d,
	0x65, 0x72, 0x69, 0x74, 0x73, 0x52, 0x1e, 0x64, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64,
	0x42, 0x61, 0x6c, 0x6c, 0x6f, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68, 0x4d, 0x65, 0x72, 0x69, 0x74,
	0x73, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x68, 0x0a, 0x17, 0x55, 0x6e, 0x73, 0x70, 0x65, 0x6e, 0x74,
	0x54, 0x78, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x37, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x54, 0x78, 0x4f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x5d, 0x0a, 0x10, 0x49, 0x73, 0x73, 0x75, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x33, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x61,
	0x6e, 0x63, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5f,
	0x0a, 0x11, 0x53, 0x70, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x61, 0x70, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x34, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x53, 0x70, 0x65, 0x6e, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x98, 0x01, 0x0a, 0x08, 0x49, 0x73, 0x73, 0x75, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x13, 0x0a, 0x05,
	0x74, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x78, 0x49,
	0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x48, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07,
	0x70, 0x75, 0x62, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70,
	0x75, 0x62, 0x4b, 0x65, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x73, 0x73, 0x75, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x73,
	0x73, 0x75, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0xa9, 0x07, 0x0a, 0x08, 0x50,
	0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6c,
	0x69, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x12,
	0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x13,
	0x0a, 0x05, 0x74, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x78, 0x49, 0x64, 0x12, 0x60, 0x0a, 0x15, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x48, 0x00, 0x52,
	0x14, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f,
	0x70, 0x6f, 0x73, 0x61, 0x6c, 0x12, 0x63, 0x0a, 0x16, 0x72, 0x65, 0x69, 0x6d, 0x62, 0x75, 0x72,
	0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x69, 0x6d,
	0x62, 0x75, 0x72, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61,
	0x6c, 0x48, 0x00, 0x52, 0x15, 0x72, 0x65, 0x69, 0x6d, 0x62, 0x75, 0x72, 0x73, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x12, 0x5e, 0x0a, 0x15, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x6f,
	0x73, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x69, 0x6f, 0x2e, 0x62,
	0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x50, 0x72, 0x6f, 0x70, 0x6f,
	0x73, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x13, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x12, 0x48, 0x0a, 0x0d, 0x72, 0x6f,
	0x6c, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x70,
	0x6f, 0x73, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x0c, 0x72, 0x6f, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x70,
	0x6f, 0x73, 0x61, 0x6c, 0x12, 0x67, 0x0a, 0x18, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x73, 0x63, 0x61,
	0x74, 0x65, 0x5f, 0x62, 0x6f, 0x6e, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x73, 0x63, 0x61, 0x74, 0x65, 0x42, 0x6f, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x6f,
	0x73, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x16, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x73, 0x63, 0x61, 0x74,
	0x65, 0x42, 0x6f, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x12, 0x51, 0x0a,
	0x10, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61,
	0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73,
	0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x69, 0x63, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x48, 0x00, 0x52,
	0x0f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c,
	0x12, 0x5e, 0x0a, 0x15, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x5f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x13, 0x72, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c,
	0x12, 0x4b, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x14,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f,
	0x73, 0x61, 0x6c, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x09, 0x65, 0x78, 0x74, 0x72, 0x61, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x3c, 0x0a,
	0x0e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x5c, 0x0a, 0x14, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x6e,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x12, 0x23,
	0x0a, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x73, 0x71, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64,
	0x42, 0x73, 0x71, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x73, 0x71, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x73, 0x71, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x22, 0x5d, 0x0a, 0x15, 0x52, 0x65, 0x69, 0x6d, 0x62, 0x75, 0x72, 0x73,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x12, 0x23, 0x0a,
	0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x73, 0x71, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x42,
	0x73, 0x71, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x73, 0x71, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x73, 0x71, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x22, 0x4c, 0x0a, 0x13, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x8c, 0x01, 0x0a, 0x0c, 0x52, 0x6f, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73,
	0x61, 0x6c, 0x12, 0x2d, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x04, 0x72, 0x6f, 0x6c,
	0x65, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x62, 0x6f,
	0x6e, 0x64, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x42, 0x6f, 0x6e, 0x64, 0x55, 0x6e, 0x69, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65,
	0x22, 0x3a, 0x0a, 0x16, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x73, 0x63, 0x61, 0x74, 0x65, 0x42, 0x6f,
	0x6e, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x12, 0x20, 0x0a, 0x0c, 0x6c, 0x6f,
	0x63, 0x6b, 0x75, 0x70, 0x5f, 0x74, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x6c, 0x6f, 0x63, 0x6b, 0x75, 0x70, 0x54, 0x78, 0x49, 0x64, 0x22, 0x11, 0x0a, 0x0f,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x22,
	0x3a, 0x0a, 0x13, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x50, 0x72,
	0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72,
	0x5f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74,
	0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x22, 0x6a, 0x0a, 0x04, 0x52,
	0x6f, 0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x6e,
	0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x28, 0x0a,
	0x10, 0x62, 0x6f, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x62, 0x6f, 0x6e, 0x64, 0x65, 0x64, 0x52,
	0x6f, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x34, 0x0a, 0x0c, 0x4d, 0x79, 0x52, 0x65, 0x70,
	0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x61, 0x6c,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x73, 0x61, 0x6c, 0x74, 0x22, 0x5a, 0x0a,
	0x10, 0x4d, 0x79, 0x52, 0x65, 0x70, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x46, 0x0a, 0x0d, 0x6d, 0x79, 0x5f, 0x72, 0x65, 0x70, 0x75, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69,
	0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x4d,
	0x79, 0x52, 0x65, 0x70, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x6d, 0x79, 0x52,
	0x65, 0x70, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x41, 0x0a, 0x0d, 0x4d, 0x79, 0x50,
	0x72, 0x6f, 0x6f, 0x66, 0x4f, 0x66, 0x42, 0x75, 0x72, 0x6e, 0x12, 0x13, 0x0a, 0x05, 0x74, 0x78,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x78, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x22, 0x60, 0x0a, 0x11,
	0x4d, 0x79, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x4f, 0x66, 0x42, 0x75, 0x72, 0x6e, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x4b, 0x0a, 0x10, 0x6d, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x5f, 0x6f, 0x66,
	0x5f, 0x62, 0x75, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x69, 0x6f,
	0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65,
	0x72, 0x2e, 0x4d, 0x79, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x4f, 0x66, 0x42, 0x75, 0x72, 0x6e, 0x52,
	0x0d, 0x6d, 0x79, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x4f, 0x66, 0x42, 0x75, 0x72, 0x6e, 0x22, 0x7e,
	0x0a, 0x1e, 0x55, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x42, 0x73, 0x71,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x5c, 0x0a, 0x15, 0x75, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x5f,
	0x74, 0x78, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x55, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65,
	0x64, 0x54, 0x78, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x13, 0x75, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x54, 0x78, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x99,
	0x02, 0x0a, 0x13, 0x54, 0x65, 0x6d, 0x70, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x39, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73,
	0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69,
	0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x50,
	0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61,
	0x6c, 0x12, 0x31, 0x0a, 0x15, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x70, 0x75, 0x62, 0x5f, 0x6b,
	0x65, 0x79, 0x5f, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x12, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x45, 0x6e, 0x63,
	0x6f, 0x64, 0x65, 0x64, 0x12, 0x56, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69,
	0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x54,
	0x65, 0x6d, 0x70, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x09, 0x65, 0x78, 0x74, 0x72, 0x61, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x3c, 0x0a, 0x0e,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x60, 0x0a, 0x0f, 0x50, 0x72,
	0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x39, 0x0a,
	0x08, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x52, 0x08,
	0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x22, 0x4b, 0x0a, 0x0d,
	0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x3a, 0x0a,
	0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x69,
	0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66,
	0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x55, 0x0a, 0x11, 0x54, 0x65, 0x6d,
	0x70, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x40,
	0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x66, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x22, 0x72, 0x0a, 0x06, 0x42, 0x61, 0x6c, 0x6c, 0x6f, 0x74, 0x12, 0x39, 0x0a, 0x08, 0x70, 0x72,
	0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x69,
	0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66,
	0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x52, 0x08, 0x70, 0x72, 0x6f,
	0x70, 0x6f, 0x73, 0x61, 0x6c, 0x12, 0x2d, 0x0a, 0x04, 0x76, 0x6f, 0x74, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x04,
	0x76, 0x6f, 0x74, 0x65, 0x22, 0x4b, 0x0a, 0x0e, 0x4d, 0x79, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73,
	0x61, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73,
	0x61, 0x6c, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69,
	0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x50,
	0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61,
	0x6c, 0x22, 0x41, 0x0a, 0x0a, 0x42, 0x61, 0x6c, 0x6c, 0x6f, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x33, 0x0a, 0x06, 0x62, 0x61, 0x6c, 0x6c, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x42, 0x61, 0x6c, 0x6c, 0x6f, 0x74, 0x52, 0x06, 0x62, 0x61,
	0x6c, 0x6c, 0x6f, 0x74, 0x22, 0x7a, 0x0a, 0x0b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x22, 0x32, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x73, 0x63, 0x61, 0x74, 0x65, 0x42, 0x6f,
	0x6e, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x6c, 0x6f, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x74, 0x78, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x6f, 0x63, 0x6b, 0x75, 0x70,
	0x54, 0x78, 0x49, 0x64, 0x22, 0x85, 0x02, 0x0a, 0x06, 0x4d, 0x79, 0x56, 0x6f, 0x74, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x40, 0x0a, 0x0b, 0x62, 0x61, 0x6c, 0x6c, 0x6f,
	0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x69,
	0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66,
	0x65, 0x72, 0x2e, 0x42, 0x61, 0x6c, 0x6c, 0x6f, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0a, 0x62,
	0x61, 0x6c, 0x6c, 0x6f, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79,
	0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x12, 0x3d, 0x0a, 0x0a, 0x62, 0x6c, 0x69, 0x6e, 0x64,
	0x5f, 0x76, 0x6f, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x69, 0x6f,
	0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65,
	0x72, 0x2e, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x09, 0x62, 0x6c, 0x69,
	0x6e, 0x64, 0x56, 0x6f, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x72, 0x65,
	0x76, 0x65, 0x61, 0x6c, 0x5f, 0x74, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x72, 0x65, 0x76, 0x65, 0x61, 0x6c, 0x54, 0x78, 0x49, 0x64, 0x22, 0x42, 0x0a, 0x0a,
	0x4d, 0x79, 0x56, 0x6f, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x07, 0x6d, 0x79,
	0x5f, 0x76, 0x6f, 0x74, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x69, 0x6f,
	0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65,
	0x72, 0x2e, 0x4d, 0x79, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x06, 0x6d, 0x79, 0x56, 0x6f, 0x74, 0x65,
	0x22, 0x6b, 0x0a, 0x14, 0x56, 0x6f, 0x74, 0x65, 0x57, 0x69, 0x74, 0x68, 0x50, 0x72, 0x6f, 0x70,
	0x6f, 0x73, 0x61, 0x6c, 0x54, 0x78, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x70,
	0x6f, 0x73, 0x61, 0x6c, 0x5f, 0x74, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x54, 0x78, 0x49, 0x64, 0x12, 0x2d,
	0x0a, 0x04, 0x76, 0x6f, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x69,
	0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66,
	0x65, 0x72, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x04, 0x76, 0x6f, 0x74, 0x65, 0x22, 0x59, 0x0a,
	0x18, 0x56, 0x6f, 0x74, 0x65, 0x57, 0x69, 0x74, 0x68, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61,
	0x6c, 0x54, 0x78, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x04, 0x69, 0x74, 0x65,
	0x6d, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73,
	0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x56, 0x6f,
	0x74, 0x65, 0x57, 0x69, 0x74, 0x68, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x54, 0x78,
	0x49, 0x64, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x22, 0xb1, 0x02, 0x0a, 0x09, 0x42, 0x6c, 0x69,
	0x6e, 0x64, 0x56, 0x6f, 0x74, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x65, 0x64, 0x5f, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0e, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x12,
	0x13, 0x0a, 0x05, 0x74, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x78, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x65, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x72, 0x69, 0x74, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x12, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x65, 0x64, 0x4d, 0x65, 0x72, 0x69, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x4c, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x42, 0x6c, 0x69, 0x6e, 0x64,
	0x56, 0x6f, 0x74, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x09, 0x65, 0x78, 0x74, 0x72, 0x61, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x3c,
	0x0a, 0x0e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x50, 0x0a, 0x0f,
	0x4d, 0x79, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x56, 0x6f, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x3d, 0x0a, 0x0a, 0x62, 0x6c, 0x69, 0x6e, 0x64, 0x5f, 0x76, 0x6f, 0x74, 0x65, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x56,
	0x6f, 0x74, 0x65, 0x52, 0x09, 0x62, 0x6c, 0x69, 0x6e, 0x64, 0x56, 0x6f, 0x74, 0x65, 0x22, 0x4d,
	0x0a, 0x0e, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x56, 0x6f, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x12, 0x3b, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x56, 0x6f, 0x74, 0x65, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x65, 0x0a,
	0x10, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x56, 0x6f, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x12, 0x3d, 0x0a, 0x0a, 0x62, 0x6c, 0x69, 0x6e, 0x64, 0x5f, 0x76, 0x6f, 0x74, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x42, 0x6c, 0x69, 0x6e,
	0x64, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x09, 0x62, 0x6c, 0x69, 0x6e, 0x64, 0x56, 0x6f, 0x74, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04,
	0x68, 0x61, 0x73, 0x68, 0x22, 0x22, 0x0a, 0x04, 0x56, 0x6f, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x22, 0x60, 0x0a, 0x05, 0x4d, 0x65, 0x72, 0x69,
	0x74, 0x12, 0x39, 0x0a, 0x08, 0x69, 0x73, 0x73, 0x75, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x61, 0x6e,
	0x63, 0x65, 0x52, 0x08, 0x69, 0x73, 0x73, 0x75, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x3d, 0x0a, 0x09, 0x4d, 0x65,
	0x72, 0x69, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x05, 0x6d, 0x65, 0x72, 0x69, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x4d, 0x65, 0x72,
	0x69, 0x74, 0x52, 0x05, 0x6d, 0x65, 0x72, 0x69, 0x74, 0x22, 0xc5, 0x02, 0x0a, 0x12, 0x50, 0x72,
	0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x39, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61,
	0x6c, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x12, 0x35, 0x0a, 0x17, 0x73,
	0x74, 0x61, 0x6b, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64,
	0x5f, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x73, 0x74,
	0x61, 0x6b, 0x65, 0x4f, 0x66, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x56, 0x6f, 0x74,
	0x65, 0x73, 0x12, 0x35, 0x0a, 0x17, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x52,
	0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x14, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x4f, 0x66, 0x52, 0x65, 0x6a, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x6e, 0x75, 0x6d,
	0x5f, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x6e, 0x75, 0x6d, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74,
	0x65, 0x64, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x6e, 0x75, 0x6d, 0x5f, 0x72,
	0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x10, 0x6e, 0x75, 0x6d, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x56, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x6e, 0x75, 0x6d, 0x5f, 0x69, 0x67, 0x6e,
	0x6f, 0x72, 0x65, 0x64, 0x5f, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0f, 0x6e, 0x75, 0x6d, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x64, 0x56, 0x6f, 0x74, 0x65,
	0x73, 0x22, 0x8f, 0x01, 0x0a, 0x11, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x64, 0x50,
	0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x61, 0x63,
	0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73,
	0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x12, 0x59, 0x0a, 0x14, 0x70, 0x72, 0x6f, 0x70,
	0x6f, 0x73, 0x61, 0x6c, 0x5f, 0x76, 0x6f, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f,
	0x70, 0x6f, 0x73, 0x61, 0x6c, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x12, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0xbd, 0x02, 0x0a, 0x1a, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65,
	0x64, 0x42, 0x61, 0x6c, 0x6c, 0x6f, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68, 0x4d, 0x65, 0x72, 0x69,
	0x74, 0x73, 0x12, 0x34, 0x0a, 0x17, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x6f, 0x66, 0x5f, 0x62, 0x6c,
	0x69, 0x6e, 0x64, 0x5f, 0x76, 0x6f, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x13, 0x68, 0x61, 0x73, 0x68, 0x4f, 0x66, 0x42, 0x6c, 0x69, 0x6e, 0x64,
	0x56, 0x6f, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x10, 0x62, 0x6c, 0x69, 0x6e,
	0x64, 0x5f, 0x76, 0x6f, 0x74, 0x65, 0x5f, 0x74, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x62, 0x6c, 0x69, 0x6e, 0x64, 0x56, 0x6f, 0x74, 0x65, 0x54, 0x78, 0x49,
	0x64, 0x12, 0x29, 0x0a, 0x11, 0x76, 0x6f, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x76, 0x65, 0x61, 0x6c,
	0x5f, 0x74, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x76, 0x6f,
	0x74, 0x65, 0x52, 0x65, 0x76, 0x65, 0x61, 0x6c, 0x54, 0x78, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x6b, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x6b, 0x65, 0x12, 0x40, 0x0a, 0x0b, 0x62, 0x61, 0x6c, 0x6c, 0x6f, 0x74, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73,
	0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x42, 0x61,
	0x6c, 0x6c, 0x6f, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0a, 0x62, 0x61, 0x6c, 0x6c, 0x6f, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x0a, 0x6d, 0x65, 0x72, 0x69, 0x74, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69,
	0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x4d,
	0x65, 0x72, 0x69, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x09, 0x6d, 0x65, 0x72, 0x69, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x22, 0x94, 0x01, 0x0a, 0x0d, 0x44, 0x61, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x3a, 0x0a, 0x09, 0x64, 0x61, 0x6f, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69,
	0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x44,
	0x61, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x08, 0x64, 0x61, 0x6f, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x47, 0x0a, 0x0e, 0x64, 0x61, 0x6f, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x69, 0x6f, 0x2e, 0x62,
	0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e,
	0x44, 0x61, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x61, 0x73, 0x68, 0x52, 0x0c, 0x64, 0x61,
	0x6f, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x61, 0x73, 0x68, 0x22, 0x57, 0x0a, 0x0c, 0x44, 0x61,
	0x6f, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x70, 0x72, 0x65, 0x76, 0x48,
	0x61, 0x73, 0x68, 0x22, 0x81, 0x01, 0x0a, 0x11, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x68, 0x61,
	0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x70, 0x72, 0x65, 0x76, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x23, 0x0a, 0x0d, 0x6e, 0x75, 0x6d, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73,
	0x61, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6e, 0x75, 0x6d, 0x50, 0x72,
	0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x22, 0x85, 0x01, 0x0a, 0x12, 0x42, 0x6c, 0x69, 0x6e,
	0x64, 0x56, 0x6f, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x16,
	0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x72,
	0x65, 0x76, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x70,
	0x72, 0x65, 0x76, 0x48, 0x61, 0x73, 0x68, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x75, 0x6d, 0x5f, 0x62,
	0x6c, 0x69, 0x6e, 0x64, 0x5f, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0d, 0x6e, 0x75, 0x6d, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x22,
	0x60, 0x0a, 0x12, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x45, 0x78, 0x70,
	0x6c, 0x6f, 0x72, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x74, 0x78, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x78, 0x55, 0x72, 0x6c,
	0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x55, 0x72,
	0x6c, 0x22, 0xc2, 0x03, 0x0a, 0x0e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x49, 0x0a, 0x0e, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4d, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0x5a, 0x0a, 0x17, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73,
	0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x15, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x54, 0x72, 0x61, 0x64, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x12, 0x62, 0x0a, 0x17, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52,
	0x15, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x71, 0x0a, 0x0d, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x61, 0x78, 0x5f, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0e, 0x6d, 0x61, 0x78, 0x54, 0x72, 0x61, 0x64, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6d, 0x61, 0x78, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x2f, 0x0a, 0x08, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xdc, 0x01, 0x0a, 0x0d, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4e, 0x0a, 0x0f, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x5f, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x66, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x48, 0x00, 0x52, 0x0e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x12, 0x48, 0x0a, 0x0d, 0x66, 0x69, 0x61, 0x74, 0x5f, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x69, 0x6f,
	0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65,
	0x72, 0x2e, 0x46, 0x69, 0x61, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x48, 0x00,
	0x52, 0x0c, 0x66, 0x69, 0x61, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x09,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x2b, 0x0a, 0x0e, 0x43, 0x72, 0x79,
	0x70, 0x74, 0x6f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x69,
	0x73, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69,
	0x73, 0x41, 0x73, 0x73, 0x65, 0x74, 0x22, 0x49, 0x0a, 0x0c, 0x46, 0x69, 0x61, 0x74, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x39, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69,
	0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x22, 0x66, 0x0a, 0x07, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x22, 0x30, 0x0a, 0x06, 0x52, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x5c, 0x0a, 0x10, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12,
	0x22, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x69, 0x67, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x68, 0x69, 0x67, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6f, 0x77, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6c, 0x6f, 0x77, 0x22, 0xc5, 0x01, 0x0a, 0x11, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12,
	0x4c, 0x0a, 0x0f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69,
	0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0e, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a,
	0x0d, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x62, 0x75, 0x79, 0x5f, 0x6f, 0x66, 0x66,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x42, 0x75, 0x79, 0x4f,
	0x66, 0x66, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x49, 0x64,
	0x73, 0x22, 0x92, 0x01, 0x0a, 0x12, 0x4d, 0x6f, 0x63, 0x6b, 0x4d, 0x61, 0x69, 0x6c, 0x62, 0x6f,
	0x78, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x50, 0x0a, 0x13, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x64,
	0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x52, 0x11, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x22, 0x50, 0x0a, 0x0b, 0x4d, 0x6f, 0x63, 0x6b, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2a, 0x44, 0x0a, 0x0b, 0x53, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x52, 0x42, 0x49, 0x54,
	0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x45, 0x44, 0x49,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x52, 0x41, 0x44, 0x45,
	0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x45, 0x46, 0x55, 0x4e, 0x44, 0x10, 0x03, 0x2a, 0xb7,
	0x02, 0x0a, 0x12, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x42, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x46,
	0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x56, 0x41, 0x49,
	0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x4f, 0x46, 0x46, 0x45, 0x52,
	0x5f, 0x54, 0x41, 0x4b, 0x45, 0x4e, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x52, 0x49, 0x43,
	0x45, 0x5f, 0x4f, 0x55, 0x54, 0x5f, 0x4f, 0x46, 0x5f, 0x54, 0x4f, 0x4c, 0x45, 0x52, 0x41, 0x4e,
	0x43, 0x45, 0x10, 0x04, 0x12, 0x1e, 0x0a, 0x1a, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f, 0x50,
	0x52, 0x49, 0x43, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42,
	0x4c, 0x45, 0x10, 0x05, 0x12, 0x12, 0x0a, 0x0e, 0x4e, 0x4f, 0x5f, 0x41, 0x52, 0x42, 0x49, 0x54,
	0x52, 0x41, 0x54, 0x4f, 0x52, 0x53, 0x10, 0x06, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x4f, 0x5f, 0x4d,
	0x45, 0x44, 0x49, 0x41, 0x54, 0x4f, 0x52, 0x53, 0x10, 0x07, 0x12, 0x10, 0x0a, 0x0c, 0x55, 0x53,
	0x45, 0x52, 0x5f, 0x49, 0x47, 0x4e, 0x4f, 0x52, 0x45, 0x44, 0x10, 0x08, 0x12, 0x20, 0x0a, 0x1c,
	0x4d, 0x49, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x4d, 0x41, 0x4e, 0x44, 0x41, 0x54, 0x4f, 0x52,
	0x59, 0x5f, 0x43, 0x41, 0x50, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x10, 0x09, 0x12, 0x14,
	0x0a, 0x10, 0x4e, 0x4f, 0x5f, 0x52, 0x45, 0x46, 0x55, 0x4e, 0x44, 0x5f, 0x41, 0x47, 0x45, 0x4e,
	0x54, 0x53, 0x10, 0x0a, 0x12, 0x17, 0x0a, 0x13, 0x55, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x5f, 0x54,
	0x58, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x48, 0x49, 0x54, 0x10, 0x0b, 0x12, 0x19, 0x0a,
	0x15, 0x4d, 0x41, 0x4b, 0x45, 0x52, 0x5f, 0x44, 0x45, 0x4e, 0x49, 0x45, 0x44, 0x5f, 0x41, 0x50,
	0x49, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x10, 0x0c, 0x2a, 0xf7, 0x03, 0x0a, 0x14, 0x4d, 0x65, 0x64,
	0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x42, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4d, 0x45,
	0x44, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x10, 0x00,
	0x12, 0x1e, 0x0a, 0x1a, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x5f, 0x4d, 0x45,
	0x44, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x10, 0x01,
	0x12, 0x1d, 0x0a, 0x19, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45,
	0x53, 0x55, 0x4c, 0x54, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12,
	0x1d, 0x0a, 0x19, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x53,
	0x55, 0x4c, 0x54, 0x5f, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x03, 0x12, 0x10,
	0x0a, 0x0c, 0x53, 0x49, 0x47, 0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x53, 0x45, 0x4e, 0x54, 0x10, 0x04,
	0x12, 0x13, 0x0a, 0x0f, 0x53, 0x49, 0x47, 0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x41, 0x52, 0x52, 0x49,
	0x56, 0x45, 0x44, 0x10, 0x05, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x49, 0x47, 0x5f, 0x4d, 0x53, 0x47,
	0x5f, 0x49, 0x4e, 0x5f, 0x4d, 0x41, 0x49, 0x4c, 0x42, 0x4f, 0x58, 0x10, 0x06, 0x12, 0x17, 0x0a,
	0x13, 0x53, 0x49, 0x47, 0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x53, 0x45, 0x4e, 0x44, 0x5f, 0x46, 0x41,
	0x49, 0x4c, 0x45, 0x44, 0x10, 0x07, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x45, 0x43, 0x45, 0x49, 0x56,
	0x45, 0x44, 0x5f, 0x53, 0x49, 0x47, 0x5f, 0x4d, 0x53, 0x47, 0x10, 0x08, 0x12, 0x17, 0x0a, 0x13,
	0x50, 0x41, 0x59, 0x4f, 0x55, 0x54, 0x5f, 0x54, 0x58, 0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x53,
	0x48, 0x45, 0x44, 0x10, 0x09, 0x12, 0x20, 0x0a, 0x1c, 0x50, 0x41, 0x59, 0x4f, 0x55, 0x54, 0x5f,
	0x54, 0x58, 0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x45, 0x44, 0x5f, 0x4d, 0x53, 0x47,
	0x5f, 0x53, 0x45, 0x4e, 0x54, 0x10, 0x0a, 0x12, 0x23, 0x0a, 0x1f, 0x50, 0x41, 0x59, 0x4f, 0x55,
	0x54, 0x5f, 0x54, 0x58, 0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x45, 0x44, 0x5f, 0x4d,
	0x53, 0x47, 0x5f, 0x41, 0x52, 0x52, 0x49, 0x56, 0x45, 0x44, 0x10, 0x0b, 0x12, 0x26, 0x0a, 0x22,
	0x50, 0x41, 0x59, 0x4f, 0x55, 0x54, 0x5f, 0x54, 0x58, 0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x53,
	0x48, 0x45, 0x44, 0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x49, 0x4e, 0x5f, 0x4d, 0x41, 0x49, 0x4c, 0x42,
	0x4f, 0x58, 0x10, 0x0c, 0x12, 0x27, 0x0a, 0x23, 0x50, 0x41, 0x59, 0x4f, 0x55, 0x54, 0x5f, 0x54,
	0x58, 0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x45, 0x44, 0x5f, 0x4d, 0x53, 0x47, 0x5f,
	0x53, 0x45, 0x4e, 0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x0d, 0x12, 0x24, 0x0a,
	0x20, 0x52, 0x45, 0x43, 0x45, 0x49, 0x56, 0x45, 0x44, 0x5f, 0x50, 0x41, 0x59, 0x4f, 0x55, 0x54,
	0x5f, 0x54, 0x58, 0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x45, 0x44, 0x5f, 0x4d, 0x53,
	0x47, 0x10, 0x0e, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x41, 0x59, 0x4f, 0x55, 0x54, 0x5f, 0x54, 0x58,
	0x5f, 0x53, 0x45, 0x45, 0x4e, 0x5f, 0x49, 0x4e, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b,
	0x10, 0x0f, 0x2a, 0x4c, 0x0a, 0x11, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x42, 0x5f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x5f, 0x52, 0x45, 0x46, 0x55, 0x4e, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c,
	0x54, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44,
	0x5f, 0x52, 0x45, 0x46, 0x55, 0x4e, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x10, 0x01,
	0x2a, 0xb9, 0x02, 0x0a, 0x06, 0x54, 0x78, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x50,
	0x42, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x54, 0x58, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10,
	0x00, 0x12, 0x15, 0x0a, 0x11, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x5f, 0x54,
	0x58, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x55, 0x4e, 0x56, 0x45,
	0x52, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x47, 0x45, 0x4e, 0x45, 0x53, 0x49, 0x53,
	0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x42,
	0x53, 0x51, 0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x41, 0x59, 0x5f, 0x54, 0x52, 0x41, 0x44,
	0x45, 0x5f, 0x46, 0x45, 0x45, 0x10, 0x06, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x52, 0x4f, 0x50, 0x4f,
	0x53, 0x41, 0x4c, 0x10, 0x07, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x4f, 0x4d, 0x50, 0x45, 0x4e, 0x53,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x08, 0x12,
	0x19, 0x0a, 0x15, 0x52, 0x45, 0x49, 0x4d, 0x42, 0x55, 0x52, 0x53, 0x45, 0x4d, 0x45, 0x4e, 0x54,
	0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x09, 0x12, 0x0e, 0x0a, 0x0a, 0x42, 0x4c,
	0x49, 0x4e, 0x44, 0x5f, 0x56, 0x4f, 0x54, 0x45, 0x10, 0x0a, 0x12, 0x0f, 0x0a, 0x0b, 0x56, 0x4f,
	0x54, 0x45, 0x5f, 0x52, 0x45, 0x56, 0x45, 0x41, 0x4c, 0x10, 0x0b, 0x12, 0x0a, 0x0a, 0x06, 0x4c,
	0x4f, 0x43, 0x4b, 0x55, 0x50, 0x10, 0x0c, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x4e, 0x4c, 0x4f, 0x43,
	0x4b, 0x10, 0x0d, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x53, 0x53, 0x45, 0x54, 0x5f, 0x4c, 0x49, 0x53,
	0x54, 0x49, 0x4e, 0x47, 0x5f, 0x46, 0x45, 0x45, 0x10, 0x0e, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x52,
	0x4f, 0x4f, 0x46, 0x5f, 0x4f, 0x46, 0x5f, 0x42, 0x55, 0x52, 0x4e, 0x10, 0x0f, 0x12, 0x0d, 0x0a,
	0x09, 0x49, 0x52, 0x52, 0x45, 0x47, 0x55, 0x4c, 0x41, 0x52, 0x10, 0x10, 0x2a, 0xc9, 0x04, 0x0a,
	0x0c, 0x54, 0x78, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a,
	0x17, 0x50, 0x42, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x54, 0x58, 0x5f, 0x4f, 0x55, 0x54,
	0x50, 0x55, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x55, 0x4e,
	0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x5f, 0x4f, 0x55, 0x54, 0x50, 0x55, 0x54, 0x10, 0x01,
	0x12, 0x12, 0x0a, 0x0e, 0x47, 0x45, 0x4e, 0x45, 0x53, 0x49, 0x53, 0x5f, 0x4f, 0x55, 0x54, 0x50,
	0x55, 0x54, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x42, 0x53, 0x51, 0x5f, 0x4f, 0x55, 0x54, 0x50,
	0x55, 0x54, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x42, 0x54, 0x43, 0x5f, 0x4f, 0x55, 0x54, 0x50,
	0x55, 0x54, 0x10, 0x04, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x52, 0x4f, 0x50, 0x4f, 0x53, 0x41, 0x4c,
	0x5f, 0x4f, 0x50, 0x5f, 0x52, 0x45, 0x54, 0x55, 0x52, 0x4e, 0x5f, 0x4f, 0x55, 0x54, 0x50, 0x55,
	0x54, 0x10, 0x05, 0x12, 0x1d, 0x0a, 0x19, 0x43, 0x4f, 0x4d, 0x50, 0x5f, 0x52, 0x45, 0x51, 0x5f,
	0x4f, 0x50, 0x5f, 0x52, 0x45, 0x54, 0x55, 0x52, 0x4e, 0x5f, 0x4f, 0x55, 0x54, 0x50, 0x55, 0x54,
	0x10, 0x06, 0x12, 0x22, 0x0a, 0x1e, 0x52, 0x45, 0x49, 0x4d, 0x42, 0x55, 0x52, 0x53, 0x45, 0x4d,
	0x45, 0x4e, 0x54, 0x5f, 0x4f, 0x50, 0x5f, 0x52, 0x45, 0x54, 0x55, 0x52, 0x4e, 0x5f, 0x4f, 0x55,
	0x54, 0x50, 0x55, 0x54, 0x10, 0x07, 0x12, 0x24, 0x0a, 0x20, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x53,
	0x43, 0x41, 0x54, 0x45, 0x5f, 0x42, 0x4f, 0x4e, 0x44, 0x5f, 0x4f, 0x50, 0x5f, 0x52, 0x45, 0x54,
	0x55, 0x52, 0x4e, 0x5f, 0x4f, 0x55, 0x54, 0x50, 0x55, 0x54, 0x10, 0x08, 0x12, 0x1d, 0x0a, 0x19,
	0x49, 0x53, 0x53, 0x55, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x43, 0x41, 0x4e, 0x44, 0x49, 0x44, 0x41,
	0x54, 0x45, 0x5f, 0x4f, 0x55, 0x54, 0x50, 0x55, 0x54, 0x10, 0x09, 0x12, 0x20, 0x0a, 0x1c, 0x42,
	0x4c, 0x49, 0x4e, 0x44, 0x5f, 0x56, 0x4f, 0x54, 0x45, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x53,
	0x54, 0x41, 0x4b, 0x45, 0x5f, 0x4f, 0x55, 0x54, 0x50, 0x55, 0x54, 0x10, 0x0a, 0x12, 0x1f, 0x0a,
	0x1b, 0x42, 0x4c, 0x49, 0x4e, 0x44, 0x5f, 0x56, 0x4f, 0x54, 0x45, 0x5f, 0x4f, 0x50, 0x5f, 0x52,
	0x45, 0x54, 0x55, 0x52, 0x4e, 0x5f, 0x4f, 0x55, 0x54, 0x50, 0x55, 0x54, 0x10, 0x0b, 0x12, 0x23,
	0x0a, 0x1f, 0x56, 0x4f, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x56, 0x45, 0x41, 0x4c, 0x5f, 0x55, 0x4e,
	0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x4b, 0x45, 0x5f, 0x4f, 0x55, 0x54, 0x50, 0x55,
	0x54, 0x10, 0x0c, 0x12, 0x20, 0x0a, 0x1c, 0x56, 0x4f, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x56, 0x45,
	0x41, 0x4c, 0x5f, 0x4f, 0x50, 0x5f, 0x52, 0x45, 0x54, 0x55, 0x52, 0x4e, 0x5f, 0x4f, 0x55, 0x54,
	0x50, 0x55, 0x54, 0x10, 0x0d, 0x12, 0x26, 0x0a, 0x22, 0x41, 0x53, 0x53, 0x45, 0x54, 0x5f, 0x4c,
	0x49, 0x53, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x46, 0x45, 0x45, 0x5f, 0x4f, 0x50, 0x5f, 0x52, 0x45,
	0x54, 0x55, 0x52, 0x4e, 0x5f, 0x4f, 0x55, 0x54, 0x50, 0x55, 0x54, 0x10, 0x0e, 0x12, 0x22, 0x0a,
	0x1e, 0x50, 0x52, 0x4f, 0x4f, 0x46, 0x5f, 0x4f, 0x46, 0x5f, 0x42, 0x55, 0x52, 0x4e, 0x5f, 0x4f,
	0x50, 0x5f, 0x52, 0x45, 0x54, 0x55, 0x52, 0x4e, 0x5f, 0x4f, 0x55, 0x54, 0x50, 0x55, 0x54, 0x10,
	0x0f, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x4f, 0x43, 0x4b, 0x55, 0x50, 0x5f, 0x4f, 0x55, 0x54, 0x50,
	0x55, 0x54, 0x10, 0x10, 0x12, 0x1b, 0x0a, 0x17, 0x4c, 0x4f, 0x43, 0x4b, 0x55, 0x50, 0x5f, 0x4f,
	0x50, 0x5f, 0x52, 0x45, 0x54, 0x55, 0x52, 0x4e, 0x5f, 0x4f, 0x55, 0x54, 0x50, 0x55, 0x54, 0x10,
	0x11, 0x12, 0x11, 0x0a, 0x0d, 0x55, 0x4e, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x4f, 0x55, 0x54, 0x50,
	0x55, 0x54, 0x10, 0x12, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f,
	0x4f, 0x55, 0x54, 0x50, 0x55, 0x54, 0x10, 0x13, 0x2a, 0xb8, 0x01, 0x0a, 0x0a, 0x53, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x42, 0x5f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x5f, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x53,
	0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x55, 0x42, 0x5f, 0x4b, 0x45, 0x59, 0x10, 0x01, 0x12,
	0x10, 0x0a, 0x0c, 0x50, 0x55, 0x42, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x48, 0x41, 0x53, 0x48, 0x10,
	0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x5f, 0x48, 0x41, 0x53, 0x48,
	0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x53, 0x49, 0x47, 0x10, 0x04,
	0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x55, 0x4c, 0x4c, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x10, 0x05, 0x12,
	0x16, 0x0a, 0x12, 0x57, 0x49, 0x54, 0x4e, 0x45, 0x53, 0x53, 0x5f, 0x56, 0x30, 0x5f, 0x4b, 0x45,
	0x59, 0x48, 0x41, 0x53, 0x48, 0x10, 0x06, 0x12, 0x19, 0x0a, 0x15, 0x57, 0x49, 0x54, 0x4e, 0x45,
	0x53, 0x53, 0x5f, 0x56, 0x30, 0x5f, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x48, 0x41, 0x53, 0x48,
	0x10, 0x07, 0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x4f, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x52,
	0x44, 0x10, 0x08, 0x42, 0x17, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x50,
	0x01, 0x5a, 0x09, 0x2e, 0x3b, 0x62, 0x69, 0x73, 0x71, 0x75, 0x69, 0x74, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pb_proto_rawDescOnce sync.Once
	file_pb_proto_rawDescData = file_pb_proto_rawDesc
)

func file_pb_proto_rawDescGZIP() []byte {
	file_pb_proto_rawDescOnce.Do(func() {
		file_pb_proto_rawDescData = protoimpl.X.CompressGZIP(file_pb_proto_rawDescData)
	})
	return file_pb_proto_rawDescData
}

var file_pb_proto_enumTypes = make([]protoimpl.EnumInfo, 18)
var file_pb_proto_msgTypes = make([]protoimpl.MessageInfo, 251)
var file_pb_proto_goTypes = []interface{}{
	(SupportType)(0),                              // 0: io.bisq.protobuffer.SupportType
	(AvailabilityResult)(0),                       // 1: io.bisq.protobuffer.AvailabilityResult
	(MediationResultState)(0),                     // 2: io.bisq.protobuffer.MediationResultState
	(RefundResultState)(0),                        // 3: io.bisq.protobuffer.RefundResultState
	(TxType)(0),                                   // 4: io.bisq.protobuffer.TxType
	(TxOutputType)(0),                             // 5: io.bisq.protobuffer.TxOutputType
	(ScriptType)(0),                               // 6: io.bisq.protobuffer.ScriptType
	(OfferPayload_Direction)(0),                   // 7: io.bisq.protobuffer.OfferPayload.Direction
	(SignedWitness_VerificationMethod)(0),         // 8: io.bisq.protobuffer.SignedWitness.VerificationMethod
	(DisputeResult_Winner)(0),                     // 9: io.bisq.protobuffer.DisputeResult.Winner
	(DisputeResult_Reason)(0),                     // 10: io.bisq.protobuffer.DisputeResult.Reason
	(AddressEntry_Context)(0),                     // 11: io.bisq.protobuffer.AddressEntry.Context
	(Offer_State)(0),                              // 12: io.bisq.protobuffer.Offer.State
	(OpenOffer_State)(0),                          // 13: io.bisq.protobuffer.OpenOffer.State
	(Trade_State)(0),                              // 14: io.bisq.protobuffer.Trade.State
	(Trade_Phase)(0),                              // 15: io.bisq.protobuffer.Trade.Phase
	(Trade_DisputeState)(0),                       // 16: io.bisq.protobuffer.Trade.DisputeState
	(Trade_TradePeriodState)(0),                   // 17: io.bisq.protobuffer.Trade.TradePeriodState
	(*NetworkEnvelope)(nil),                       // 18: io.bisq.protobuffer.NetworkEnvelope
	(*BundleOfEnvelopes)(nil),                     // 19: io.bisq.protobuffer.BundleOfEnvelopes
	(*PreliminaryGetDataRequest)(nil),             // 20: io.bisq.protobuffer.PreliminaryGetDataRequest
	(*GetDataResponse)(nil),                       // 21: io.bisq.protobuffer.GetDataResponse
	(*GetUpdatedDataRequest)(nil),                 // 22: io.bisq.protobuffer.GetUpdatedDataRequest
	(*GetPeersRequest)(nil),                       // 23: io.bisq.protobuffer.GetPeersRequest
	(*GetPeersResponse)(nil),                      // 24: io.bisq.protobuffer.GetPeersResponse
	(*Ping)(nil),                                  // 25: io.bisq.protobuffer.Ping
	(*Pong)(nil),                                  // 26: io.bisq.protobuffer.Pong
	(*GetInventoryRequest)(nil),                   // 27: io.bisq.protobuffer.GetInventoryRequest
	(*GetInventoryResponse)(nil),                  // 28: io.bisq.protobuffer.GetInventoryResponse
	(*OfferAvailabilityRequest)(nil),              // 29: io.bisq.protobuffer.OfferAvailabilityRequest
	(*OfferAvailabilityResponse)(nil),             // 30: io.bisq.protobuffer.OfferAvailabilityResponse
	(*RefreshOfferMessage)(nil),                   // 31: io.bisq.protobuffer.RefreshOfferMessage
	(*AddDataMessage)(nil),                        // 32: io.bisq.protobuffer.AddDataMessage
	(*RemoveDataMessage)(nil),                     // 33: io.bisq.protobuffer.RemoveDataMessage
	(*RemoveMailboxDataMessage)(nil),              // 34: io.bisq.protobuffer.RemoveMailboxDataMessage
	(*AddPersistableNetworkPayloadMessage)(nil),   // 35: io.bisq.protobuffer.AddPersistableNetworkPayloadMessage
	(*CloseConnectionMessage)(nil),                // 36: io.bisq.protobuffer.CloseConnectionMessage
	(*AckMessage)(nil),                            // 37: io.bisq.protobuffer.AckMessage
	(*PrefixedSealedAndSignedMessage)(nil),        // 38: io.bisq.protobuffer.PrefixedSealedAndSignedMessage
	(*InputsForDepositTxRequest)(nil),             // 39: io.bisq.protobuffer.InputsForDepositTxRequest
	(*InputsForDepositTxResponse)(nil),            // 40: io.bisq.protobuffer.InputsForDepositTxResponse
	(*DelayedPayoutTxSignatureRequest)(nil),       // 41: io.bisq.protobuffer.DelayedPayoutTxSignatureRequest
	(*DelayedPayoutTxSignatureResponse)(nil),      // 42: io.bisq.protobuffer.DelayedPayoutTxSignatureResponse
	(*DepositTxAndDelayedPayoutTxMessage)(nil),    // 43: io.bisq.protobuffer.DepositTxAndDelayedPayoutTxMessage
	(*DepositTxMessage)(nil),                      // 44: io.bisq.protobuffer.DepositTxMessage
	(*PeerPublishedDelayedPayoutTxMessage)(nil),   // 45: io.bisq.protobuffer.PeerPublishedDelayedPayoutTxMessage
	(*CounterCurrencyTransferStartedMessage)(nil), // 46: io.bisq.protobuffer.CounterCurrencyTransferStartedMessage
	(*FinalizePayoutTxRequest)(nil),               // 47: io.bisq.protobuffer.FinalizePayoutTxRequest
	(*PayoutTxPublishedMessage)(nil),              // 48: io.bisq.protobuffer.PayoutTxPublishedMessage
	(*MediatedPayoutTxPublishedMessage)(nil),      // 49: io.bisq.protobuffer.MediatedPayoutTxPublishedMessage
	(*MediatedPayoutTxSignatureMessage)(nil),      // 50: io.bisq.protobuffer.MediatedPayoutTxSignatureMessage
	(*RefreshTradeStateRequest)(nil),              // 51: io.bisq.protobuffer.RefreshTradeStateRequest
	(*TraderSignedWitnessMessage)(nil),            // 52: io.bisq.protobuffer.TraderSignedWitnessMessage
	(*OpenNewDisputeMessage)(nil),                 // 53: io.bisq.protobuffer.OpenNewDisputeMessage
	(*PeerOpenedDisputeMessage)(nil),              // 54: io.bisq.protobuffer.PeerOpenedDisputeMessage
	(*ChatMessage)(nil),                           // 55: io.bisq.protobuffer.ChatMessage
	(*DisputeResultMessage)(nil),                  // 56: io.bisq.protobuffer.DisputeResultMessage
	(*PeerPublishedDisputePayoutTxMessage)(nil),   // 57: io.bisq.protobuffer.PeerPublishedDisputePayoutTxMessage
	(*PrivateNotificationMessage)(nil),            // 58: io.bisq.protobuffer.PrivateNotificationMessage
	(*GetBlocksRequest)(nil),                      // 59: io.bisq.protobuffer.GetBlocksRequest
	(*GetBlocksResponse)(nil),                     // 60: io.bisq.protobuffer.GetBlocksResponse
	(*NewBlockBroadcastMessage)(nil),              // 61: io.bisq.protobuffer.NewBlockBroadcastMessage
	(*RepublishGovernanceDataRequest)(nil),        // 62: io.bisq.protobuffer.RepublishGovernanceDataRequest
	(*NewDaoStateHashMessage)(nil),                // 63: io.bisq.protobuffer.NewDaoStateHashMessage
	(*NewProposalStateHashMessage)(nil),           // 64: io.bisq.protobuffer.NewProposalStateHashMessage
	(*NewBlindVoteStateHashMessage)(nil),          // 65: io.bisq.protobuffer.NewBlindVoteStateHashMessage
	(*GetDaoStateHashesRequest)(nil),              // 66: io.bisq.protobuffer.GetDaoStateHashesRequest
	(*GetProposalStateHashesRequest)(nil),         // 67: io.bisq.protobuffer.GetProposalStateHashesRequest
	(*GetBlindVoteStateHashesRequest)(nil),        // 68: io.bisq.protobuffer.GetBlindVoteStateHashesRequest
	(*GetDaoStateHashesResponse)(nil),             // 69: io.bisq.protobuffer.GetDaoStateHashesResponse
	(*GetProposalStateHashesResponse)(nil),        // 70: io.bisq.protobuffer.GetProposalStateHashesResponse
	(*GetBlindVoteStateHashesResponse)(nil),       // 71: io.bisq.protobuffer.GetBlindVoteStateHashesResponse
	(*NodeAddress)(nil),                           // 72: io.bisq.protobuffer.NodeAddress
	(*Peer)(nil),                                  // 73: io.bisq.protobuffer.Peer
	(*PubKeyRing)(nil),                            // 74: io.bisq.protobuffer.PubKeyRing
	(*SealedAndSigned)(nil),                       // 75: io.bisq.protobuffer.SealedAndSigned
	(*StoragePayload)(nil),                        // 76: io.bisq.protobuffer.StoragePayload
	(*PersistableNetworkPayload)(nil),             // 77: io.bisq.protobuffer.PersistableNetworkPayload
	(*ProtectedStorageEntry)(nil),                 // 78: io.bisq.protobuffer.ProtectedStorageEntry
	(*StorageEntryWrapper)(nil),                   // 79: io.bisq.protobuffer.StorageEntryWrapper
	(*ProtectedMailboxStorageEntry)(nil),          // 80: io.bisq.protobuffer.ProtectedMailboxStorageEntry
	(*DataAndSeqNrPair)(nil),                      // 81: io.bisq.protobuffer.DataAndSeqNrPair
	(*MailboxMessageList)(nil),                    // 82: io.bisq.protobuffer.MailboxMessageList
	(*RemovedPayloadsMap)(nil),                    // 83: io.bisq.protobuffer.RemovedPayloadsMap
	(*IgnoredMailboxMap)(nil),                     // 84: io.bisq.protobuffer.IgnoredMailboxMap
	(*MailboxItem)(nil),                           // 85: io.bisq.protobuffer.MailboxItem
	(*DecryptedMessageWithPubKey)(nil),            // 86: io.bisq.protobuffer.DecryptedMessageWithPubKey
	(*PrivateNotificationPayload)(nil),            // 87: io.bisq.protobuffer.PrivateNotificationPayload
	(*PaymentAccountFilter)(nil),                  // 88: io.bisq.protobuffer.PaymentAccountFilter
	(*Alert)(nil),                                 // 89: io.bisq.protobuffer.Alert
	(*Arbitrator)(nil),                            // 90: io.bisq.protobuffer.Arbitrator
	(*Mediator)(nil),                              // 91: io.bisq.protobuffer.Mediator
	(*RefundAgent)(nil),                           // 92: io.bisq.protobuffer.RefundAgent
	(*Filter)(nil),                                // 93: io.bisq.protobuffer.Filter
	(*TradeStatistics2)(nil),                      // 94: io.bisq.protobuffer.TradeStatistics2
	(*TradeStatistics3)(nil),                      // 95: io.bisq.protobuffer.TradeStatistics3
	(*MailboxStoragePayload)(nil),                 // 96: io.bisq.protobuffer.MailboxStoragePayload
	(*OfferPayload)(nil),                          // 97: io.bisq.protobuffer.OfferPayload
	(*AccountAgeWitness)(nil),                     // 98: io.bisq.protobuffer.AccountAgeWitness
	(*SignedWitness)(nil),                         // 99: io.bisq.protobuffer.SignedWitness
	(*Dispute)(nil),                               // 100: io.bisq.protobuffer.Dispute
	(*Attachment)(nil),                            // 101: io.bisq.protobuffer.Attachment
	(*DisputeResult)(nil),                         // 102: io.bisq.protobuffer.DisputeResult
	(*Contract)(nil),                              // 103: io.bisq.protobuffer.Contract
	(*RawTransactionInput)(nil),                   // 104: io.bisq.protobuffer.RawTransactionInput
	(*PaymentAccountPayload)(nil),                 // 105: io.bisq.protobuffer.PaymentAccountPayload
	(*AliPayAccountPayload)(nil),                  // 106: io.bisq.protobuffer.AliPayAccountPayload
	(*WeChatPayAccountPayload)(nil),               // 107: io.bisq.protobuffer.WeChatPayAccountPayload
	(*ChaseQuickPayAccountPayload)(nil),           // 108: io.bisq.protobuffer.ChaseQuickPayAccountPayload
	(*ClearXchangeAccountPayload)(nil),            // 109: io.bisq.protobuffer.ClearXchangeAccountPayload
	(*CountryBasedPaymentAccountPayload)(nil),     // 110: io.bisq.protobuffer.CountryBasedPaymentAccountPayload
	(*BankAccountPayload)(nil),                    // 111: io.bisq.protobuffer.BankAccountPayload
	(*NationalBankAccountPayload)(nil),            // 112: io.bisq.protobuffer.NationalBankAccountPayload
	(*SameBankAccountPayload)(nil),                // 113: io.bisq.protobuffer.SameBankAccountPayload
	(*JapanBankAccountPayload)(nil),               // 114: io.bisq.protobuffer.JapanBankAccountPayload
	(*AustraliaPayidPayload)(nil),                 // 115: io.bisq.protobuffer.AustraliaPayidPayload
	(*SpecificBanksAccountPayload)(nil),           // 116: io.bisq.protobuffer.SpecificBanksAccountPayload
	(*CashDepositAccountPayload)(nil),             // 117: io.bisq.protobuffer.CashDepositAccountPayload
	(*MoneyGramAccountPayload)(nil),               // 118: io.bisq.protobuffer.MoneyGramAccountPayload
	(*HalCashAccountPayload)(nil),                 // 119: io.bisq.protobuffer.HalCashAccountPayload
	(*WesternUnionAccountPayload)(nil),            // 120: io.bisq.protobuffer.WesternUnionAccountPayload
	(*AmazonGiftCardAccountPayload)(nil),          // 121: io.bisq.protobuffer.AmazonGiftCardAccountPayload
	(*SepaAccountPayload)(nil),                    // 122: io.bisq.protobuffer.SepaAccountPayload
	(*SepaInstantAccountPayload)(nil),             // 123: io.bisq.protobuffer.SepaInstantAccountPayload
	(*CryptoCurrencyAccountPayload)(nil),          // 124: io.bisq.protobuffer.CryptoCurrencyAccountPayload
	(*InstantCryptoCurrencyAccountPayload)(nil),   // 125: io.bisq.protobuffer.InstantCryptoCurrencyAccountPayload
	(*FasterPaymentsAccountPayload)(nil),          // 126: io.bisq.protobuffer.FasterPaymentsAccountPayload
	(*InteracETransferAccountPayload)(nil),        // 127: io.bisq.protobuffer.InteracETransferAccountPayload
	(*OKPayAccountPayload)(nil),                   // 128: io.bisq.protobuffer.OKPayAccountPayload
	(*UpholdAccountPayload)(nil),                  // 129: io.bisq.protobuffer.UpholdAccountPayload
	(*CashAppAccountPayload)(nil),                 // 130: io.bisq.protobuffer.CashAppAccountPayload
	(*MoneyBeamAccountPayload)(nil),               // 131: io.bisq.protobuffer.MoneyBeamAccountPayload
	(*VenmoAccountPayload)(nil),                   // 132: io.bisq.protobuffer.VenmoAccountPayload
	(*PopmoneyAccountPayload)(nil),                // 133: io.bisq.protobuffer.PopmoneyAccountPayload
	(*RevolutAccountPayload)(nil),                 // 134: io.bisq.protobuffer.RevolutAccountPayload
	(*PerfectMoneyAccountPayload)(nil),            // 135: io.bisq.protobuffer.PerfectMoneyAccountPayload
	(*SwishAccountPayload)(nil),                   // 136: io.bisq.protobuffer.SwishAccountPayload
	(*USPostalMoneyOrderAccountPayload)(nil),      // 137: io.bisq.protobuffer.USPostalMoneyOrderAccountPayload
	(*F2FAccountPayload)(nil),                     // 138: io.bisq.protobuffer.F2FAccountPayload
	(*CashByMailAccountPayload)(nil),              // 139: io.bisq.protobuffer.CashByMailAccountPayload
	(*PromptPayAccountPayload)(nil),               // 140: io.bisq.protobuffer.PromptPayAccountPayload
	(*AdvancedCashAccountPayload)(nil),            // 141: io.bisq.protobuffer.AdvancedCashAccountPayload
	(*TransferwiseAccountPayload)(nil),            // 142: io.bisq.protobuffer.TransferwiseAccountPayload
	(*PersistableEnvelope)(nil),                   // 143: io.bisq.protobuffer.PersistableEnvelope
	(*SequenceNumberMap)(nil),                     // 144: io.bisq.protobuffer.SequenceNumberMap
	(*SequenceNumberEntry)(nil),                   // 145: io.bisq.protobuffer.SequenceNumberEntry
	(*ByteArray)(nil),                             // 146: io.bisq.protobuffer.ByteArray
	(*MapValue)(nil),                              // 147: io.bisq.protobuffer.MapValue
	(*PersistedEntryMap)(nil),                     // 148: io.bisq.protobuffer.PersistedEntryMap
	(*AccountAgeWitnessStore)(nil),                // 149: io.bisq.protobuffer.AccountAgeWitnessStore
	(*SignedWitnessStore)(nil),                    // 150: io.bisq.protobuffer.SignedWitnessStore
	(*TradeStatistics2Store)(nil),                 // 151: io.bisq.protobuffer.TradeStatistics2Store
	(*TradeStatistics3Store)(nil),                 // 152: io.bisq.protobuffer.TradeStatistics3Store
	(*PeerList)(nil),                              // 153: io.bisq.protobuffer.PeerList
	(*AddressEntryList)(nil),                      // 154: io.bisq.protobuffer.AddressEntryList
	(*AddressEntry)(nil),                          // 155: io.bisq.protobuffer.AddressEntry
	(*NavigationPath)(nil),                        // 156: io.bisq.protobuffer.NavigationPath
	(*PaymentAccountList)(nil),                    // 157: io.bisq.protobuffer.PaymentAccountList
	(*TradableList)(nil),                          // 158: io.bisq.protobuffer.TradableList
	(*Offer)(nil),                                 // 159: io.bisq.protobuffer.Offer
	(*OpenOffer)(nil),                             // 160: io.bisq.protobuffer.OpenOffer
	(*Tradable)(nil),                              // 161: io.bisq.protobuffer.Tradable
	(*Trade)(nil),                                 // 162: io.bisq.protobuffer.Trade
	(*BuyerAsMakerTrade)(nil),                     // 163: io.bisq.protobuffer.BuyerAsMakerTrade
	(*BuyerAsTakerTrade)(nil),                     // 164: io.bisq.protobuffer.BuyerAsTakerTrade
	(*SellerAsMakerTrade)(nil),                    // 165: io.bisq.protobuffer.SellerAsMakerTrade
	(*SellerAsTakerTrade)(nil),                    // 166: io.bisq.protobuffer.SellerAsTakerTrade
	(*ProcessModel)(nil),                          // 167: io.bisq.protobuffer.ProcessModel
	(*TradingPeer)(nil),                           // 168: io.bisq.protobuffer.TradingPeer
	(*ArbitrationDisputeList)(nil),                // 169: io.bisq.protobuffer.ArbitrationDisputeList
	(*MediationDisputeList)(nil),                  // 170: io.bisq.protobuffer.MediationDisputeList
	(*RefundDisputeList)(nil),                     // 171: io.bisq.protobuffer.RefundDisputeList
	(*PreferencesPayload)(nil),                    // 172: io.bisq.protobuffer.PreferencesPayload
	(*AutoConfirmSettings)(nil),                   // 173: io.bisq.protobuffer.AutoConfirmSettings
	(*UserPayload)(nil),                           // 174: io.bisq.protobuffer.UserPayload
	(*BaseBlock)(nil),                             // 175: io.bisq.protobuffer.BaseBlock
	(*RawBlock)(nil),                              // 176: io.bisq.protobuffer.RawBlock
	(*Block)(nil),                                 // 177: io.bisq.protobuffer.Block
	(*BaseTx)(nil),                                // 178: io.bisq.protobuffer.BaseTx
	(*RawTx)(nil),                                 // 179: io.bisq.protobuffer.RawTx
	(*Tx)(nil),                                    // 180: io.bisq.protobuffer.Tx
	(*TxInput)(nil),                               // 181: io.bisq.protobuffer.TxInput
	(*BaseTxOutput)(nil),                          // 182: io.bisq.protobuffer.BaseTxOutput
	(*UnconfirmedTxOutput)(nil),                   // 183: io.bisq.protobuffer.UnconfirmedTxOutput
	(*RawTxOutput)(nil),                           // 184: io.bisq.protobuffer.RawTxOutput
	(*TxOutput)(nil),                              // 185: io.bisq.protobuffer.TxOutput
	(*SpentInfo)(nil),                             // 186: io.bisq.protobuffer.SpentInfo
	(*PubKeyScript)(nil),                          // 187: io.bisq.protobuffer.PubKeyScript
	(*DaoPhase)(nil),                              // 188: io.bisq.protobuffer.DaoPhase
	(*Cycle)(nil),                                 // 189: io.bisq.protobuffer.Cycle
	(*DaoState)(nil),                              // 190: io.bisq.protobuffer.DaoState
	(*Issuance)(nil),                              // 191: io.bisq.protobuffer.Issuance
	(*Proposal)(nil),                              // 192: io.bisq.protobuffer.Proposal
	(*CompensationProposal)(nil),                  // 193: io.bisq.protobuffer.CompensationProposal
	(*ReimbursementProposal)(nil),                 // 194: io.bisq.protobuffer.ReimbursementProposal
	(*ChangeParamProposal)(nil),                   // 195: io.bisq.protobuffer.ChangeParamProposal
	(*RoleProposal)(nil),                          // 196: io.bisq.protobuffer.RoleProposal
	(*ConfiscateBondProposal)(nil),                // 197: io.bisq.protobuffer.ConfiscateBondProposal
	(*GenericProposal)(nil),                       // 198: io.bisq.protobuffer.GenericProposal
	(*RemoveAssetProposal)(nil),                   // 199: io.bisq.protobuffer.RemoveAssetProposal
	(*Role)(nil),                                  // 200: io.bisq.protobuffer.Role
	(*MyReputation)(nil),                          // 201: io.bisq.protobuffer.MyReputation
	(*MyReputationList)(nil),                      // 202: io.bisq.protobuffer.MyReputationList
	(*MyProofOfBurn)(nil),                         // 203: io.bisq.protobuffer.MyProofOfBurn
	(*MyProofOfBurnList)(nil),                     // 204: io.bisq.protobuffer.MyProofOfBurnList
	(*UnconfirmedBsqChangeOutputList)(nil),        // 205: io.bisq.protobuffer.UnconfirmedBsqChangeOutputList
	(*TempProposalPayload)(nil),                   // 206: io.bisq.protobuffer.TempProposalPayload
	(*ProposalPayload)(nil),                       // 207: io.bisq.protobuffer.ProposalPayload
	(*ProposalStore)(nil),                         // 208: io.bisq.protobuffer.ProposalStore
	(*TempProposalStore)(nil),                     // 209: io.bisq.protobuffer.TempProposalStore
	(*Ballot)(nil),                                // 210: io.bisq.protobuffer.Ballot
	(*MyProposalList)(nil),                        // 211: io.bisq.protobuffer.MyProposalList
	(*BallotList)(nil),                            // 212: io.bisq.protobuffer.BallotList
	(*ParamChange)(nil),                           // 213: io.bisq.protobuffer.ParamChange
	(*ConfiscateBond)(nil),                        // 214: io.bisq.protobuffer.ConfiscateBond
	(*MyVote)(nil),                                // 215: io.bisq.protobuffer.MyVote
	(*MyVoteList)(nil),                            // 216: io.bisq.protobuffer.MyVoteList
	(*VoteWithProposalTxId)(nil),                  // 217: io.bisq.protobuffer.VoteWithProposalTxId
	(*VoteWithProposalTxIdList)(nil),              // 218: io.bisq.protobuffer.VoteWithProposalTxIdList
	(*BlindVote)(nil),                             // 219: io.bisq.protobuffer.BlindVote
	(*MyBlindVoteList)(nil),                       // 220: io.bisq.protobuffer.MyBlindVoteList
	(*BlindVoteStore)(nil),                        // 221: io.bisq.protobuffer.BlindVoteStore
	(*BlindVotePayload)(nil),                      // 222: io.bisq.protobuffer.BlindVotePayload
	(*Vote)(nil),                                  // 223: io.bisq.protobuffer.Vote
	(*Merit)(nil),                                 // 224: io.bisq.protobuffer.Merit
	(*MeritList)(nil),                             // 225: io.bisq.protobuffer.MeritList
	(*ProposalVoteResult)(nil),                    // 226: io.bisq.protobuffer.ProposalVoteResult
	(*EvaluatedProposal)(nil),                     // 227: io.bisq.protobuffer.EvaluatedProposal
	(*DecryptedBallotsWithMerits)(nil),            // 228: io.bisq.protobuffer.DecryptedBallotsWithMerits
	(*DaoStateStore)(nil),                         // 229: io.bisq.protobuffer.DaoStateStore
	(*DaoStateHash)(nil),                          // 230: io.bisq.protobuffer.DaoStateHash
	(*ProposalStateHash)(nil),                     // 231: io.bisq.protobuffer.ProposalStateHash
	(*BlindVoteStateHash)(nil),                    // 232: io.bisq.protobuffer.BlindVoteStateHash
	(*BlockChainExplorer)(nil),                    // 233: io.bisq.protobuffer.BlockChainExplorer
	(*PaymentAccount)(nil),                        // 234: io.bisq.protobuffer.PaymentAccount
	(*PaymentMethod)(nil),                         // 235: io.bisq.protobuffer.PaymentMethod
	(*Currency)(nil),                              // 236: io.bisq.protobuffer.Currency
	(*TradeCurrency)(nil),                         // 237: io.bisq.protobuffer.TradeCurrency
	(*CryptoCurrency)(nil),                        // 238: io.bisq.protobuffer.CryptoCurrency
	(*FiatCurrency)(nil),                          // 239: io.bisq.protobuffer.FiatCurrency
	(*Country)(nil),                               // 240: io.bisq.protobuffer.Country
	(*Region)(nil),                                // 241: io.bisq.protobuffer.Region
	(*PriceAlertFilter)(nil),                      // 242: io.bisq.protobuffer.PriceAlertFilter
	(*MarketAlertFilter)(nil),                     // 243: io.bisq.protobuffer.MarketAlertFilter
	(*MockMailboxPayload)(nil),                    // 244: io.bisq.protobuffer.MockMailboxPayload
	(*MockPayload)(nil),                           // 245: io.bisq.protobuffer.MockPayload
	nil,                                           // 246: io.bisq.protobuffer.GetInventoryResponse.InventoryEntry
	nil,                                           // 247: io.bisq.protobuffer.RemovedPayloadsMap.DateByHashesEntry
	nil,                                           // 248: io.bisq.protobuffer.IgnoredMailboxMap.DataEntry
	nil,                                           // 249: io.bisq.protobuffer.Alert.ExtraDataEntry
	nil,                                           // 250: io.bisq.protobuffer.Arbitrator.ExtraDataEntry
	nil,                                           // 251: io.bisq.protobuffer.Mediator.ExtraDataEntry
	nil,                                           // 252: io.bisq.protobuffer.RefundAgent.ExtraDataEntry
	nil,                                           // 253: io.bisq.protobuffer.Filter.ExtraDataEntry
	nil,                                           // 254: io.bisq.protobuffer.TradeStatistics2.ExtraDataEntry
	nil,                                           // 255: io.bisq.protobuffer.TradeStatistics3.ExtraDataEntry
	nil,                                           // 256: io.bisq.protobuffer.MailboxStoragePayload.ExtraDataEntry
	nil,                                           // 257: io.bisq.protobuffer.OfferPayload.ExtraDataEntry
	nil,                                           // 258: io.bisq.protobuffer.PaymentAccountPayload.ExcludeFromJsonDataEntry
	nil,                                           // 259: io.bisq.protobuffer.PersistedEntryMap.PersistedEntryMapEntry
	nil,                                           // 260: io.bisq.protobuffer.PreferencesPayload.DontShowAgainMapEntry
	nil,                                           // 261: io.bisq.protobuffer.PreferencesPayload.PeerTagMapEntry
	nil,                                           // 262: io.bisq.protobuffer.UserPayload.CookieEntry
	nil,                                           // 263: io.bisq.protobuffer.DaoState.UnspentTxOutputMapEntry
	nil,                                           // 264: io.bisq.protobuffer.DaoState.IssuanceMapEntry
	nil,                                           // 265: io.bisq.protobuffer.DaoState.SpentInfoMapEntry
	nil,                                           // 266: io.bisq.protobuffer.Proposal.ExtraDataEntry
	nil,                                           // 267: io.bisq.protobuffer.TempProposalPayload.ExtraDataEntry
	nil,                                           // 268: io.bisq.protobuffer.BlindVote.ExtraDataEntry
}
var file_pb_proto_depIdxs = []int32{
	20,  // 0: io.bisq.protobuffer.NetworkEnvelope.preliminary_get_data_request:type_name -> io.bisq.protobuffer.PreliminaryGetDataRequest
	21,  // 1: io.bisq.protobuffer.NetworkEnvelope.get_data_response:type_name -> io.bisq.protobuffer.GetDataResponse
	22,  // 2: io.bisq.protobuffer.NetworkEnvelope.get_updated_data_request:type_name -> io.bisq.protobuffer.GetUpdatedDataRequest
	23,  // 3: io.bisq.protobuffer.NetworkEnvelope.get_peers_request:type_name -> io.bisq.protobuffer.GetPeersRequest
	24,  // 4: io.bisq.protobuffer.NetworkEnvelope.get_peers_response:type_name -> io.bisq.protobuffer.GetPeersResponse
	25,  // 5: io.bisq.protobuffer.NetworkEnvelope.ping:type_name -> io.bisq.protobuffer.Ping
	26,  // 6: io.bisq.protobuffer.NetworkEnvelope.pong:type_name -> io.bisq.protobuffer.Pong
	29,  // 7: io.bisq.protobuffer.NetworkEnvelope.offer_availability_request:type_name -> io.bisq.protobuffer.OfferAvailabilityRequest
	30,  // 8: io.bisq.protobuffer.NetworkEnvelope.offer_availability_response:type_name -> io.bisq.protobuffer.OfferAvailabilityResponse
	31,  // 9: io.bisq.protobuffer.NetworkEnvelope.refresh_offer_message:type_name -> io.bisq.protobuffer.RefreshOfferMessage
	32,  // 10: io.bisq.protobuffer.NetworkEnvelope.add_data_message:type_name -> io.bisq.protobuffer.AddDataMessage
	33,  // 11: io.bisq.protobuffer.NetworkEnvelope.remove_data_message:type_name -> io.bisq.protobuffer.RemoveDataMessage
	34,  // 12: io.bisq.protobuffer.NetworkEnvelope.remove_mailbox_data_message:type_name -> io.bisq.protobuffer.RemoveMailboxDataMessage
	36,  // 13: io.bisq.protobuffer.NetworkEnvelope.close_connection_message:type_name -> io.bisq.protobuffer.CloseConnectionMessage
	38,  // 14: io.bisq.protobuffer.NetworkEnvelope.prefixed_sealed_and_signed_message:type_name -> io.bisq.protobuffer.PrefixedSealedAndSignedMessage
	39,  // 15: io.bisq.protobuffer.NetworkEnvelope.inputs_for_deposit_tx_request:type_name -> io.bisq.protobuffer.InputsForDepositTxRequest
	40,  // 16: io.bisq.protobuffer.NetworkEnvelope.inputs_for_deposit_tx_response:type_name -> io.bisq.protobuffer.InputsForDepositTxResponse
	44,  // 17: io.bisq.protobuffer.NetworkEnvelope.deposit_tx_message:type_name -> io.bisq.protobuffer.DepositTxMessage
	46,  // 18: io.bisq.protobuffer.NetworkEnvelope.counter_currency_transfer_started_message:type_name -> io.bisq.protobuffer.CounterCurrencyTransferStartedMessage
	48,  // 19: io.bisq.protobuffer.NetworkEnvelope.payout_tx_published_message:type_name -> io.bisq.protobuffer.PayoutTxPublishedMessage
	53,  // 20: io.bisq.protobuffer.NetworkEnvelope.open_new_dispute_message:type_name -> io.bisq.protobuffer.OpenNewDisputeMessage
	54,  // 21: io.bisq.protobuffer.NetworkEnvelope.peer_opened_dispute_message:type_name -> io.bisq.protobuffer.PeerOpenedDisputeMessage
	55,  // 22: io.bisq.protobuffer.NetworkEnvelope.chat_message:type_name -> io.bisq.protobuffer.ChatMessage
	56,  // 23: io.bisq.protobuffer.NetworkEnvelope.dispute_result_message:type_name -> io.bisq.protobuffer.DisputeResultMessage
	57,  // 24: io.bisq.protobuffer.NetworkEnvelope.peer_published_dispute_payout_tx_message:type_name -> io.bisq.protobuffer.PeerPublishedDisputePayoutTxMessage
	58,  // 25: io.bisq.protobuffer.NetworkEnvelope.private_notification_message:type_name -> io.bisq.protobuffer.PrivateNotificationMessage
	59,  // 26: io.bisq.protobuffer.NetworkEnvelope.get_blocks_request:type_name -> io.bisq.protobuffer.GetBlocksRequest
	60,  // 27: io.bisq.protobuffer.NetworkEnvelope.get_blocks_response:type_name -> io.bisq.protobuffer.GetBlocksResponse
	61,  // 28: io.bisq.protobuffer.NetworkEnvelope.new_block_broadcast_message:type_name -> io.bisq.protobuffer.NewBlockBroadcastMessage
	35,  // 29: io.bisq.protobuffer.NetworkEnvelope.add_persistable_network_payload_message:type_name -> io.bisq.protobuffer.AddPersistableNetworkPayloadMessage
	37,  // 30: io.bisq.protobuffer.NetworkEnvelope.ack_message:type_name -> io.bisq.protobuffer.AckMessage
	62,  // 31: io.bisq.protobuffer.NetworkEnvelope.republish_governance_data_request:type_name -> io.bisq.protobuffer.RepublishGovernanceDataRequest
	63,  // 32: io.bisq.protobuffer.NetworkEnvelope.new_dao_state_hash_message:type_name -> io.bisq.protobuffer.NewDaoStateHashMessage
	66,  // 33: io.bisq.protobuffer.NetworkEnvelope.get_dao_state_hashes_request:type_name -> io.bisq.protobuffer.GetDaoStateHashesRequest
	69,  // 34: io.bisq.protobuffer.NetworkEnvelope.get_dao_state_hashes_response:type_name -> io.bisq.protobuffer.GetDaoStateHashesResponse
	64,  // 35: io.bisq.protobuffer.NetworkEnvelope.new_proposal_state_hash_message:type_name -> io.bisq.protobuffer.NewProposalStateHashMessage
	67,  // 36: io.bisq.protobuffer.NetworkEnvelope.get_proposal_state_hashes_request:type_name -> io.bisq.protobuffer.GetProposalStateHashesRequest
	70,  // 37: io.bisq.protobuffer.NetworkEnvelope.get_proposal_state_hashes_response:type_name -> io.bisq.protobuffer.GetProposalStateHashesResponse
	65,  // 38: io.bisq.protobuffer.NetworkEnvelope.new_blind_vote_state_hash_message:type_name -> io.bisq.protobuffer.NewBlindVoteStateHashMessage
	68,  // 39: io.bisq.protobuffer.NetworkEnvelope.get_blind_vote_state_hashes_request:type_name -> io.bisq.protobuffer.GetBlindVoteStateHashesRequest
	71,  // 40: io.bisq.protobuffer.NetworkEnvelope.get_blind_vote_state_hashes_response:type_name -> io.bisq.protobuffer.GetBlindVoteStateHashesResponse
	19,  // 41: io.bisq.protobuffer.NetworkEnvelope.bundle_of_envelopes:type_name -> io.bisq.protobuffer.BundleOfEnvelopes
	50,  // 42: io.bisq.protobuffer.NetworkEnvelope.mediated_payout_tx_signature_message:type_name -> io.bisq.protobuffer.MediatedPayoutTxSignatureMessage
	49,  // 43: io.bisq.protobuffer.NetworkEnvelope.mediated_payout_tx_published_message:type_name -> io.bisq.protobuffer.MediatedPayoutTxPublishedMessage
	41,  // 44: io.bisq.protobuffer.NetworkEnvelope.delayed_payout_tx_signature_request:type_name -> io.bisq.protobuffer.DelayedPayoutTxSignatureRequest
	42,  // 45: io.bisq.protobuffer.NetworkEnvelope.delayed_payout_tx_signature_response:type_name -> io.bisq.protobuffer.DelayedPayoutTxSignatureResponse
	43,  // 46: io.bisq.protobuffer.NetworkEnvelope.deposit_tx_and_delayed_payout_tx_message:type_name -> io.bisq.protobuffer.DepositTxAndDelayedPayoutTxMessage
	45,  // 47: io.bisq.protobuffer.NetworkEnvelope.peer_published_delayed_payout_tx_message:type_name -> io.bisq.protobuffer.PeerPublishedDelayedPayoutTxMessage
	51,  // 48: io.bisq.protobuffer.NetworkEnvelope.refresh_trade_state_request:type_name -> io.bisq.protobuffer.RefreshTradeStateRequest
	52,  // 49: io.bisq.protobuffer.NetworkEnvelope.trader_signed_witness_message:type_name -> io.bisq.protobuffer.TraderSignedWitnessMessage
	27,  // 50: io.bisq.protobuffer.NetworkEnvelope.get_inventory_request:type_name -> io.bisq.protobuffer.GetInventoryRequest
	28,  // 51: io.bisq.protobuffer.NetworkEnvelope.get_inventory_response:type_name -> io.bisq.protobuffer.GetInventoryResponse
	18,  // 52: io.bisq.protobuffer.BundleOfEnvelopes.envelopes:type_name -> io.bisq.protobuffer.NetworkEnvelope
	79,  // 53: io.bisq.protobuffer.GetDataResponse.data_set:type_name -> io.bisq.protobuffer.StorageEntryWrapper
	77,  // 54: io.bisq.protobuffer.GetDataResponse.persistable_network_payload_items:type_name -> io.bisq.protobuffer.PersistableNetworkPayload
	72,  // 55: io.bisq.protobuffer.GetUpdatedDataRequest.sender_node_address:type_name -> io.bisq.protobuffer.NodeAddress
	72,  // 56: io.bisq.protobuffer.GetPeersRequest.sender_node_address:type_name -> io.bisq.protobuffer.NodeAddress
	73,  // 57: io.bisq.protobuffer.GetPeersRequest.reported_peers:type_name -> io.bisq.protobuffer.Peer
	73,  // 58: io.bisq.protobuffer.GetPeersResponse.reported_peers:type_name -> io.bisq.protobuffer.Peer
	246, // 59: io.bisq.protobuffer.GetInventoryResponse.inventory:type_name -> io.bisq.protobuffer.GetInventoryResponse.InventoryEntry
	74,  // 60: io.bisq.protobuffer.OfferAvailabilityRequest.pub_key_ring:type_name -> io.bisq.protobuffer.PubKeyRing
	1,   // 61: io.bisq.protobuffer.OfferAvailabilityResponse.availability_result:type_name -> io.bisq.protobuffer.AvailabilityResult
	72,  // 62: io.bisq.protobuffer.OfferAvailabilityResponse.arbitrator:type_name -> io.bisq.protobuffer.NodeAddress
	72,  // 63: io.bisq.protobuffer.OfferAvailabilityResponse.mediator:type_name -> io.bisq.protobuffer.NodeAddress
	72,  // 64: io.bisq.protobuffer.OfferAvailabilityResponse.refund_agent:type_name -> io.bisq.protobuffer.NodeAddress
	79,  // 65: io.bisq.protobuffer.AddDataMessage.entry:type_name -> io.bisq.protobuffer.StorageEntryWrapper
	78,  // 66: io.bisq.protobuffer.RemoveDataMessage.protected_storage_entry:type_name -> io.bisq.protobuffer.ProtectedStorageEntry
	80,  // 67: io.bisq.protobuffer.RemoveMailboxDataMessage.protected_storage_entry:type_name -> io.bisq.protobuffer.ProtectedMailboxStorageEntry
	77,  // 68: io.bisq.protobuffer.AddPersistableNetworkPayloadMessage.payload:type_name -> io.bisq.protobuffer.PersistableNetworkPayload
	72,  // 69: io.bisq.protobuffer.AckMessage.sender_node_address:type_name -> io.bisq.protobuffer.NodeAddress
	72,  // 70: io.bisq.protobuffer.PrefixedSealedAndSignedMessage.node_address:type_name -> io.bisq.protobuffer.NodeAddress
	75,  // 71: io.bisq.protobuffer.PrefixedSealedAndSignedMessage.sealed_and_signed:type_name -> io.bisq.protobuffer.SealedAndSigned
	72,  // 72: io.bisq.protobuffer.InputsForDepositTxRequest.sender_node_address:type_name -> io.bisq.protobuffer.NodeAddress
	104, // 73: io.bisq.protobuffer.InputsForDepositTxRequest.raw_transaction_inputs:type_name -> io.bisq.protobuffer.RawTransactionInput
	74,  // 74: io.bisq.protobuffer.InputsForDepositTxRequest.taker_pub_key_ring:type_name -> io.bisq.protobuffer.PubKeyRing
	105, // 75: io.bisq.protobuffer.InputsForDepositTxRequest.taker_payment_account_payload:type_name -> io.bisq.protobuffer.PaymentAccountPayload
	72,  // 76: io.bisq.protobuffer.InputsForDepositTxRequest.accepted_arbitrator_node_addresses:type_name -> io.bisq.protobuffer.NodeAddress
	72,  // 77: io.bisq.protobuffer.InputsForDepositTxRequest.accepted_mediator_node_addresses:type_name -> io.bisq.protobuffer.NodeAddress
	72,  // 78: io.bisq.protobuffer.InputsForDepositTxRequest.arbitrator_node_address:type_name -> io.bisq.protobuffer.NodeAddress
	72,  // 79: io.bisq.protobuffer.InputsForDepositTxRequest.mediator_node_address:type_name -> io.bisq.protobuffer.NodeAddress
	72,  // 80: io.bisq.protobuffer.InputsForDepositTxRequest.accepted_refund_agent_node_addresses:type_name -> io.bisq.protobuffer.NodeAddress
	72,  // 81: io.bisq.protobuffer.InputsForDepositTxRequest.refund_agent_node_address:type_name -> io.bisq.protobuffer.NodeAddress
	105, // 82: io.bisq.protobuffer.InputsForDepositTxResponse.maker_payment_account_payload:type_name -> io.bisq.protobuffer.PaymentAccountPayload
	104, // 83: io.bisq.protobuffer.InputsForDepositTxResponse.maker_inputs:type_name -> io.bisq.protobuffer.RawTransactionInput
	72,  // 84: io.bisq.protobuffer.InputsForDepositTxResponse.sender_node_address:type_name -> io.bisq.protobuffer.NodeAddress
	72,  // 85: io.bisq.protobuffer.DelayedPayoutTxSignatureRequest.sender_node_address:type_name -> io.bisq.protobuffer.NodeAddress
	72,  // 86: io.bisq.protobuffer.DelayedPayoutTxSignatureResponse.sender_node_address:type_name -> io.bisq.protobuffer.NodeAddress
	72,  // 87: io.bisq.protobuffer.DepositTxAndDelayedPayoutTxMessage.sender_node_address:type_name -> io.bisq.protobuffer.NodeAddress
	72,  // 88: io.bisq.protobuffer.DepositTxMessage.sender_node_address:type_name -> io.bisq.protobuffer.NodeAddress
	72,  // 89: io.bisq.protobuffer.PeerPublishedDelayedPayoutTxMessage.sender_node_address:type_name -> io.bisq.protobuffer.NodeAddress
	72,  // 90: io.bisq.protobuffer.CounterCurrencyTransferStartedMessage.sender_node_address:type_name -> io.bisq.protobuffer.NodeAddress
	72,  // 91: io.bisq.protobuffer.FinalizePayoutTxRequest.sender_node_address:type_name -> io.bisq.protobuffer.NodeAddress
	72,  // 92: io.bisq.protobuffer.PayoutTxPublishedMessage.sender_node_address:type_name -> io.bisq.protobuffer.NodeAddress
	99,  // 93: io.bisq.protobuffer.PayoutTxPublishedMessage.signed_witness:type_name -> io.bisq.protobuffer.SignedWitness
	72,  // 94: io.bisq.protobuffer.MediatedPayoutTxPublishedMessage.sender_node_address:type_name -> io.bisq.protobuffer.NodeAddress
	72,  // 95: io.bisq.protobuffer.MediatedPayoutTxSignatureMessage.sender_node_address:type_name -> io.bisq.protobuffer.NodeAddress
	72,  // 96: io.bisq.protobuffer.RefreshTradeStateRequest.sender_node_address:type_name -> io.bisq.protobuffer.NodeAddress
	72,  // 97: io.bisq.protobuffer.TraderSignedWitnessMessage.sender_node_address:type_name -> io.bisq.protobuffer.NodeAddress
	99,  // 98: io.bisq.protobuffer.TraderSignedWitnessMessage.signed_witness:type_name -> io.bisq.protobuffer.SignedWitness
	100, // 99: io.bisq.protobuffer.OpenNewDisputeMessage.dispute:type_name -> io.bisq.protobuffer.Dispute
	72,  // 100: io.bisq.protobuffer.OpenNewDisputeMessage.sender_node_address:type_name -> io.bisq.protobuffer.NodeAddress
	0,   // 101: io.bisq.protobuffer.OpenNewDisputeMessage.type:type_name -> io.bisq.protobuffer.SupportType
	100, // 102: io.bisq.protobuffer.PeerOpenedDisputeMessage.dispute:type_name -> io.bisq.protobuffer.Dispute
	72,  // 103: io.bisq.protobuffer.PeerOpenedDisputeMessage.sender_node_address:type_name -> io.bisq.protobuffer.NodeAddress
	0,   // 104: io.bisq.protobuffer.PeerOpenedDisputeMessage.type:type_name -> io.bisq.protobuffer.SupportType
	101, // 105: io.bisq.protobuffer.ChatMessage.attachments:type_name -> io.bisq.protobuffer.Attachment
	72,  // 106: io.bisq.protobuffer.ChatMessage.sender_node_address:type_name -> io.bisq.protobuffer.NodeAddress
	0,   // 107: io.bisq.protobuffer.ChatMessage.type:type_name -> io.bisq.protobuffer.SupportType
	102, // 108: io.bisq.protobuffer.DisputeResultMessage.dispute_result:type_name -> io.bisq.protobuffer.DisputeResult
	72,  // 109: io.bisq.protobuffer.DisputeResultMessage.sender_node_address:type_name -> io.bisq.protobuffer.NodeAddress
	0,   // 110: io.bisq.protobuffer.DisputeResultMessage.type:type_name -> io.bisq.protobuffer.SupportType
	72,  // 111: io.bisq.protobuffer.PeerPublishedDisputePayoutTxMessage.sender_node_address:type_name -> io.bisq.protobuffer.NodeAddress
	0,   // 112: io.bisq.protobuffer.PeerPublishedDisputePayoutTxMessage.type:type_name -> io.bisq.protobuffer.SupportType
	72,  // 113: io.bisq.protobuffer.PrivateNotificationMessage.sender_node_address:type_name -> io.bisq.protobuffer.NodeAddress
	87,  // 114: io.bisq.protobuffer.PrivateNotificationMessage.private_notification_payload:type_name -> io.bisq.protobuffer.PrivateNotificationPayload
	72,  // 115: io.bisq.protobuffer.GetBlocksRequest.sender_node_address:type_name -> io.bisq.protobuffer.NodeAddress
	175, // 116: io.bisq.protobuffer.GetBlocksResponse.raw_blocks:type_name -> io.bisq.protobuffer.BaseBlock
	175, // 117: io.bisq.protobuffer.NewBlockBroadcastMessage.raw_block:type_name -> io.bisq.protobuffer.BaseBlock
	230, // 118: io.bisq.protobuffer.NewDaoStateHashMessage.state_hash:type_name -> io.bisq.protobuffer.DaoStateHash
	231, // 119: io.bisq.protobuffer.NewProposalStateHashMessage.state_hash:type_name -> io.bisq.protobuffer.ProposalStateHash
	232, // 120: io.bisq.protobuffer.NewBlindVoteStateHashMessage.state_hash:type_name -> io.bisq.protobuffer.BlindVoteStateHash
	230, // 121: io.bisq.protobuffer.GetDaoStateHashesResponse.state_hashes:type_name -> io.bisq.protobuffer.DaoStateHash
	231, // 122: io.bisq.protobuffer.GetProposalStateHashesResponse.state_hashes:type_name -> io.bisq.protobuffer.ProposalStateHash
	232, // 123: io.bisq.protobuffer.GetBlindVoteStateHashesResponse.state_hashes:type_name -> io.bisq.protobuffer.BlindVoteStateHash
	72,  // 124: io.bisq.protobuffer.Peer.node_address:type_name -> io.bisq.protobuffer.NodeAddress
	89,  // 125: io.bisq.protobuffer.StoragePayload.alert:type_name -> io.bisq.protobuffer.Alert
	90,  // 126: io.bisq.protobuffer.StoragePayload.arbitrator:type_name -> io.bisq.protobuffer.Arbitrator
	91,  // 127: io.bisq.protobuffer.StoragePayload.mediator:type_name -> io.bisq.protobuffer.Mediator
	93,  // 128: io.bisq.protobuffer.StoragePayload.filter:type_name -> io.bisq.protobuffer.Filter
	96,  // 129: io.bisq.protobuffer.StoragePayload.mailbox_storage_payload:type_name -> io.bisq.protobuffer.MailboxStoragePayload
	97,  // 130: io.bisq.protobuffer.StoragePayload.offer_payload:type_name -> io.bisq.protobuffer.OfferPayload
	206, // 131: io.bisq.protobuffer.StoragePayload.temp_proposal_payload:type_name -> io.bisq.protobuffer.TempProposalPayload
	92,  // 132: io.bisq.protobuffer.StoragePayload.refund_agent:type_name -> io.bisq.protobuffer.RefundAgent
	98,  // 133: io.bisq.protobuffer.PersistableNetworkPayload.account_age_witness:type_name -> io.bisq.protobuffer.AccountAgeWitness
	94,  // 134: io.bisq.protobuffer.PersistableNetworkPayload.trade_statistics2:type_name -> io.bisq.protobuffer.TradeStatistics2
	207, // 135: io.bisq.protobuffer.PersistableNetworkPayload.proposal_payload:type_name -> io.bisq.protobuffer.ProposalPayload
	222, // 136: io.bisq.protobuffer.PersistableNetworkPayload.blind_vote_payload:type_name -> io.bisq.protobuffer.BlindVotePayload
	99,  // 137: io.bisq.protobuffer.PersistableNetworkPayload.signed_witness:type_name -> io.bisq.protobuffer.SignedWitness
	95,  // 138: io.bisq.protobuffer.PersistableNetworkPayload.trade_statistics3:type_name -> io.bisq.protobuffer.TradeStatistics3
	76,  // 139: io.bisq.protobuffer.ProtectedStorageEntry.storagePayload:type_name -> io.bisq.protobuffer.StoragePayload
	78,  // 140: io.bisq.protobuffer.StorageEntryWrapper.protected_storage_entry:type_name -> io.bisq.protobuffer.ProtectedStorageEntry
	80,  // 141: io.bisq.protobuffer.StorageEntryWrapper.protected_mailbox_storage_entry:type_name -> io.bisq.protobuffer.ProtectedMailboxStorageEntry
	78,  // 142: io.bisq.protobuffer.ProtectedMailboxStorageEntry.entry:type_name -> io.bisq.protobuffer.ProtectedStorageEntry
	76,  // 143: io.bisq.protobuffer.DataAndSeqNrPair.payload:type_name -> io.bisq.protobuffer.StoragePayload
	85,  // 144: io.bisq.protobuffer.MailboxMessageList.mailbox_item:type_name -> io.bisq.protobuffer.MailboxItem
	247, // 145: io.bisq.protobuffer.RemovedPayloadsMap.date_by_hashes:type_name -> io.bisq.protobuffer.RemovedPayloadsMap.DateByHashesEntry
	248, // 146: io.bisq.protobuffer.IgnoredMailboxMap.data:type_name -> io.bisq.protobuffer.IgnoredMailboxMap.DataEntry
	80,  // 147: io.bisq.protobuffer.MailboxItem.protected_mailbox_storage_entry:type_name -> io.bisq.protobuffer.ProtectedMailboxStorageEntry
	86,  // 148: io.bisq.protobuffer.MailboxItem.decrypted_message_with_pub_key:type_name -> io.bisq.protobuffer.DecryptedMessageWithPubKey
	18,  // 149: io.bisq.protobuffer.DecryptedMessageWithPubKey.network_envelope:type_name -> io.bisq.protobuffer.NetworkEnvelope
	249, // 150: io.bisq.protobuffer.Alert.extra_data:type_name -> io.bisq.protobuffer.Alert.ExtraDataEntry
	72,  // 151: io.bisq.protobuffer.Arbitrator.node_address:type_name -> io.bisq.protobuffer.NodeAddress
	74,  // 152: io.bisq.protobuffer.Arbitrator.pub_key_ring:type_name -> io.bisq.protobuffer.PubKeyRing
	250, // 153: io.bisq.protobuffer.Arbitrator.extra_data:type_name -> io.bisq.protobuffer.Arbitrator.ExtraDataEntry
	72,  // 154: io.bisq.protobuffer.Mediator.node_address:type_name -> io.bisq.protobuffer.NodeAddress
	74,  // 155: io.bisq.protobuffer.Mediator.pub_key_ring:type_name -> io.bisq.protobuffer.PubKeyRing
	251, // 156: io.bisq.protobuffer.Mediator.extra_data:type_name -> io.bisq.protobuffer.Mediator.ExtraDataEntry
	72,  // 157: io.bisq.protobuffer.RefundAgent.node_address:type_name -> io.bisq.protobuffer.NodeAddress
	74,  // 158: io.bisq.protobuffer.RefundAgent.pub_key_ring:type_name -> io.bisq.protobuffer.PubKeyRing
	252, // 159: io.bisq.protobuffer.RefundAgent.extra_data:type_name -> io.bisq.protobuffer.RefundAgent.ExtraDataEntry
	88,  // 160: io.bisq.protobuffer.Filter.banned_payment_accounts:type_name -> io.bisq.protobuffer.PaymentAccountFilter
	253, // 161: io.bisq.protobuffer.Filter.extra_data:type_name -> io.bisq.protobuffer.Filter.ExtraDataEntry
	7,   // 162: io.bisq.protobuffer.TradeStatistics2.direction:type_name -> io.bisq.protobuffer.OfferPayload.Direction
	254, // 163: io.bisq.protobuffer.TradeStatistics2.extra_data:type_name -> io.bisq.protobuffer.TradeStatistics2.ExtraDataEntry
	255, // 164: io.bisq.protobuffer.TradeStatistics3.extra_data:type_name -> io.bisq.protobuffer.TradeStatistics3.ExtraDataEntry
	38,  // 165: io.bisq.protobuffer.MailboxStoragePayload.prefixed_sealed_and_signed_message:type_name -> io.bisq.protobuffer.PrefixedSealedAndSignedMessage
	256, // 166: io.bisq.protobuffer.MailboxStoragePayload.extra_data:type_name -> io.bisq.protobuffer.MailboxStoragePayload.ExtraDataEntry
	72,  // 167: io.bisq.protobuffer.OfferPayload.owner_node_address:type_name -> io.bisq.protobuffer.NodeAddress
	74,  // 168: io.bisq.protobuffer.OfferPayload.pub_key_ring:type_name -> io.bisq.protobuffer.PubKeyRing
	7,   // 169: io.bisq.protobuffer.OfferPayload.direction:type_name -> io.bisq.protobuffer.OfferPayload.Direction
	72,  // 170: io.bisq.protobuffer.OfferPayload.arbitrator_node_addresses:type_name -> io.bisq.protobuffer.NodeAddress
	72,  // 171: io.bisq.protobuffer.OfferPayload.mediator_node_addresses:type_name -> io.bisq.protobuffer.NodeAddress
	257, // 172: io.bisq.protobuffer.OfferPayload.extra_data:type_name -> io.bisq.protobuffer.OfferPayload.ExtraDataEntry
	8,   // 173: io.bisq.protobuffer.SignedWitness.verification_method:type_name -> io.bisq.protobuffer.SignedWitness.VerificationMethod
	74,  // 174: io.bisq.protobuffer.Dispute.trader_pub_key_ring:type_name -> io.bisq.protobuffer.PubKeyRing
	103, // 175: io.bisq.protobuffer.Dispute.contract:type_name -> io.bisq.protobuffer.Contract
	74,  // 176: io.bisq.protobuffer.Dispute.agent_pub_key_ring:type_name -> io.bisq.protobuffer.PubKeyRing
	55,  // 177: io.bisq.protobuffer.Dispute.chat_message:type_name -> io.bisq.protobuffer.ChatMessage
	102, // 178: io.bisq.protobuffer.Dispute.dispute_result:type_name -> io.bisq.protobuffer.DisputeResult
	0,   // 179: io.bisq.protobuffer.Dispute.support_type:type_name -> io.bisq.protobuffer.SupportType
	9,   // 180: io.bisq.protobuffer.DisputeResult.winner:type_name -> io.bisq.protobuffer.DisputeResult.Winner
	55,  // 181: io.bisq.protobuffer.DisputeResult.chat_message:type_name -> io.bisq.protobuffer.ChatMessage
	97,  // 182: io.bisq.protobuffer.Contract.offer_payload:type_name -> io.bisq.protobuffer.OfferPayload
	105, // 183: io.bisq.protobuffer.Contract.maker_payment_account_payload:type_name -> io.bisq.protobuffer.PaymentAccountPayload
	105, // 184: io.bisq.protobuffer.Contract.taker_payment_account_payload:type_name -> io.bisq.protobuffer.PaymentAccountPayload
	74,  // 185: io.bisq.protobuffer.Contract.maker_pub_key_ring:type_name -> io.bisq.protobuffer.PubKeyRing
	74,  // 186: io.bisq.protobuffer.Contract.taker_pub_key_ring:type_name -> io.bisq.protobuffer.PubKeyRing
	72,  // 187: io.bisq.protobuffer.Contract.buyer_node_address:type_name -> io.bisq.protobuffer.NodeAddress
	72,  // 188: io.bisq.protobuffer.Contract.seller_node_address:type_name -> io.bisq.protobuffer.NodeAddress
	72,  // 189: io.bisq.protobuffer.Contract.mediator_node_address:type_name -> io.bisq.protobuffer.NodeAddress
	72,  // 190: io.bisq.protobuffer.Contract.refund_agent_node_address:type_name -> io.bisq.protobuffer.NodeAddress
	106, // 191: io.bisq.protobuffer.PaymentAccountPayload.ali_pay_account_payload:type_name -> io.bisq.protobuffer.AliPayAccountPayload
	108, // 192: io.bisq.protobuffer.PaymentAccountPayload.chase_quick_pay_account_payload:type_name -> io.bisq.protobuffer.ChaseQuickPayAccountPayload
	109, // 193: io.bisq.protobuffer.PaymentAccountPayload.clear_xchange_account_payload:type_name -> io.bisq.protobuffer.ClearXchangeAccountPayload
	110, // 194: io.bisq.protobuffer.PaymentAccountPayload.country_based_payment_account_payload:type_name -> io.bisq.protobuffer.CountryBasedPaymentAccountPayload
	124, // 195: io.bisq.protobuffer.PaymentAccountPayload.crypto_currency_account_payload:type_name -> io.bisq.protobuffer.CryptoCurrencyAccountPayload
	126, // 196: io.bisq.protobuffer.PaymentAccountPayload.faster_payments_account_payload:type_name -> io.bisq.protobuffer.FasterPaymentsAccountPayload
	127, // 197: io.bisq.protobuffer.PaymentAccountPayload.interac_e_transfer_account_payload:type_name -> io.bisq.protobuffer.InteracETransferAccountPayload
	128, // 198: io.bisq.protobuffer.PaymentAccountPayload.o_k_pay_account_payload:type_name -> io.bisq.protobuffer.OKPayAccountPayload
	135, // 199: io.bisq.protobuffer.PaymentAccountPayload.perfect_money_account_payload:type_name -> io.bisq.protobuffer.PerfectMoneyAccountPayload
	136, // 200: io.bisq.protobuffer.PaymentAccountPayload.swish_account_payload:type_name -> io.bisq.protobuffer.SwishAccountPayload
	137, // 201: io.bisq.protobuffer.PaymentAccountPayload.u_s_postal_money_order_account_payload:type_name -> io.bisq.protobuffer.USPostalMoneyOrderAccountPayload
	129, // 202: io.bisq.protobuffer.PaymentAccountPayload.uphold_account_payload:type_name -> io.bisq.protobuffer.UpholdAccountPayload
	130, // 203: io.bisq.protobuffer.PaymentAccountPayload.cash_app_account_payload:type_name -> io.bisq.protobuffer.CashAppAccountPayload
	131, // 204: io.bisq.protobuffer.PaymentAccountPayload.money_beam_account_payload:type_name -> io.bisq.protobuffer.MoneyBeamAccountPayload
	132, // 205: io.bisq.protobuffer.PaymentAccountPayload.venmo_account_payload:type_name -> io.bisq.protobuffer.VenmoAccountPayload
	133, // 206: io.bisq.protobuffer.PaymentAccountPayload.popmoney_account_payload:type_name -> io.bisq.protobuffer.PopmoneyAccountPayload
	134, // 207: io.bisq.protobuffer.PaymentAccountPayload.revolut_account_payload:type_name -> io.bisq.protobuffer.RevolutAccountPayload
	107, // 208: io.bisq.protobuffer.PaymentAccountPayload.we_chat_pay_account_payload:type_name -> io.bisq.protobuffer.WeChatPayAccountPayload
	118, // 209: io.bisq.protobuffer.PaymentAccountPayload.money_gram_account_payload:type_name -> io.bisq.protobuffer.MoneyGramAccountPayload
	119, // 210: io.bisq.protobuffer.PaymentAccountPayload.hal_cash_account_payload:type_name -> io.bisq.protobuffer.HalCashAccountPayload
	140, // 211: io.bisq.protobuffer.PaymentAccountPayload.prompt_pay_account_payload:type_name -> io.bisq.protobuffer.PromptPayAccountPayload
	141, // 212: io.bisq.protobuffer.PaymentAccountPayload.advanced_cash_account_payload:type_name -> io.bisq.protobuffer.AdvancedCashAccountPayload
	125, // 213: io.bisq.protobuffer.PaymentAccountPayload.instant_crypto_currency_account_payload:type_name -> io.bisq.protobuffer.InstantCryptoCurrencyAccountPayload
	114, // 214: io.bisq.protobuffer.PaymentAccountPayload.japan_bank_account_payload:type_name -> io.bisq.protobuffer.JapanBankAccountPayload
	142, // 215: io.bisq.protobuffer.PaymentAccountPayload.Transferwise_account_payload:type_name -> io.bisq.protobuffer.TransferwiseAccountPayload
	115, // 216: io.bisq.protobuffer.PaymentAccountPayload.australia_payid_payload:type_name -> io.bisq.protobuffer.AustraliaPayidPayload
	121, // 217: io.bisq.protobuffer.PaymentAccountPayload.amazon_gift_card_account_payload:type_name -> io.bisq.protobuffer.AmazonGiftCardAccountPayload
	139, // 218: io.bisq.protobuffer.PaymentAccountPayload.cash_by_mail_account_payload:type_name -> io.bisq.protobuffer.CashByMailAccountPayload
	258, // 219: io.bisq.protobuffer.PaymentAccountPayload.exclude_from_json_data:type_name -> io.bisq.protobuffer.PaymentAccountPayload.ExcludeFromJsonDataEntry
	111, // 220: io.bisq.protobuffer.CountryBasedPaymentAccountPayload.bank_account_payload:type_name -> io.bisq.protobuffer.BankAccountPayload
	117, // 221: io.bisq.protobuffer.CountryBasedPaymentAccountPayload.cash_deposit_account_payload:type_name -> io.bisq.protobuffer.CashDepositAccountPayload
	122, // 222: io.bisq.protobuffer.CountryBasedPaymentAccountPayload.sepa_account_payload:type_name -> io.bisq.protobuffer.SepaAccountPayload
	120, // 223: io.bisq.protobuffer.CountryBasedPaymentAccountPayload.western_union_account_payload:type_name -> io.bisq.protobuffer.WesternUnionAccountPayload
	123, // 224: io.bisq.protobuffer.CountryBasedPaymentAccountPayload.sepa_instant_account_payload:type_name -> io.bisq.protobuffer.SepaInstantAccountPayload
	138, // 225: io.bisq.protobuffer.CountryBasedPaymentAccountPayload.f2f_account_payload:type_name -> io.bisq.protobuffer.F2FAccountPayload
	112, // 226: io.bisq.protobuffer.BankAccountPayload.national_bank_account_payload:type_name -> io.bisq.protobuffer.NationalBankAccountPayload
	113, // 227: io.bisq.protobuffer.BankAccountPayload.same_bank_accont_payload:type_name -> io.bisq.protobuffer.SameBankAccountPayload
	116, // 228: io.bisq.protobuffer.BankAccountPayload.specific_banks_account_payload:type_name -> io.bisq.protobuffer.SpecificBanksAccountPayload
	144, // 229: io.bisq.protobuffer.PersistableEnvelope.sequence_number_map:type_name -> io.bisq.protobuffer.SequenceNumberMap
	148, // 230: io.bisq.protobuffer.PersistableEnvelope.persisted_entry_map:type_name -> io.bisq.protobuffer.PersistedEntryMap
	153, // 231: io.bisq.protobuffer.PersistableEnvelope.peer_list:type_name -> io.bisq.protobuffer.PeerList
	154, // 232: io.bisq.protobuffer.PersistableEnvelope.address_entry_list:type_name -> io.bisq.protobuffer.AddressEntryList
	156, // 233: io.bisq.protobuffer.PersistableEnvelope.navigation_path:type_name -> io.bisq.protobuffer.NavigationPath
	158, // 234: io.bisq.protobuffer.PersistableEnvelope.tradable_list:type_name -> io.bisq.protobuffer.TradableList
	169, // 235: io.bisq.protobuffer.PersistableEnvelope.arbitration_dispute_list:type_name -> io.bisq.protobuffer.ArbitrationDisputeList
	172, // 236: io.bisq.protobuffer.PersistableEnvelope.preferences_payload:type_name -> io.bisq.protobuffer.PreferencesPayload
	174, // 237: io.bisq.protobuffer.PersistableEnvelope.user_payload:type_name -> io.bisq.protobuffer.UserPayload
	157, // 238: io.bisq.protobuffer.PersistableEnvelope.payment_account_list:type_name -> io.bisq.protobuffer.PaymentAccountList
	149, // 239: io.bisq.protobuffer.PersistableEnvelope.account_age_witness_store:type_name -> io.bisq.protobuffer.AccountAgeWitnessStore
	151, // 240: io.bisq.protobuffer.PersistableEnvelope.trade_statistics2_store:type_name -> io.bisq.protobuffer.TradeStatistics2Store
	208, // 241: io.bisq.protobuffer.PersistableEnvelope.proposal_store:type_name -> io.bisq.protobuffer.ProposalStore
	209, // 242: io.bisq.protobuffer.PersistableEnvelope.temp_proposal_store:type_name -> io.bisq.protobuffer.TempProposalStore
	221, // 243: io.bisq.protobuffer.PersistableEnvelope.blind_vote_store:type_name -> io.bisq.protobuffer.BlindVoteStore
	211, // 244: io.bisq.protobuffer.PersistableEnvelope.my_proposal_list:type_name -> io.bisq.protobuffer.MyProposalList
	212, // 245: io.bisq.protobuffer.PersistableEnvelope.ballot_list:type_name -> io.bisq.protobuffer.BallotList
	216, // 246: io.bisq.protobuffer.PersistableEnvelope.my_vote_list:type_name -> io.bisq.protobuffer.MyVoteList
	220, // 247: io.bisq.protobuffer.PersistableEnvelope.my_blind_vote_list:type_name -> io.bisq.protobuffer.MyBlindVoteList
	229, // 248: io.bisq.protobuffer.PersistableEnvelope.dao_state_store:type_name -> io.bisq.protobuffer.DaoStateStore
	202, // 249: io.bisq.protobuffer.PersistableEnvelope.my_reputation_list:type_name -> io.bisq.protobuffer.MyReputationList
	204, // 250: io.bisq.protobuffer.PersistableEnvelope.my_proof_of_burn_list:type_name -> io.bisq.protobuffer.MyProofOfBurnList
	205, // 251: io.bisq.protobuffer.PersistableEnvelope.unconfirmed_bsq_change_output_list:type_name -> io.bisq.protobuffer.UnconfirmedBsqChangeOutputList
	150, // 252: io.bisq.protobuffer.PersistableEnvelope.signed_witness_store:type_name -> io.bisq.protobuffer.SignedWitnessStore
	170, // 253: io.bisq.protobuffer.PersistableEnvelope.mediation_dispute_list:type_name -> io.bisq.protobuffer.MediationDisputeList
	171, // 254: io.bisq.protobuffer.PersistableEnvelope.refund_dispute_list:type_name -> io.bisq.protobuffer.RefundDisputeList
	152, // 255: io.bisq.protobuffer.PersistableEnvelope.trade_statistics3_store:type_name -> io.bisq.protobuffer.TradeStatistics3Store
	82,  // 256: io.bisq.protobuffer.PersistableEnvelope.mailbox_message_list:type_name -> io.bisq.protobuffer.MailboxMessageList
	84,  // 257: io.bisq.protobuffer.PersistableEnvelope.ignored_mailbox_map:type_name -> io.bisq.protobuffer.IgnoredMailboxMap
	83,  // 258: io.bisq.protobuffer.PersistableEnvelope.removed_payloads_map:type_name -> io.bisq.protobuffer.RemovedPayloadsMap
	145, // 259: io.bisq.protobuffer.SequenceNumberMap.sequence_number_entries:type_name -> io.bisq.protobuffer.SequenceNumberEntry
	146, // 260: io.bisq.protobuffer.SequenceNumberEntry.bytes:type_name -> io.bisq.protobuffer.ByteArray
	147, // 261: io.bisq.protobuffer.SequenceNumberEntry.map_value:type_name -> io.bisq.protobuffer.MapValue
	259, // 262: io.bisq.protobuffer.PersistedEntryMap.persisted_entry_map:type_name -> io.bisq.protobuffer.PersistedEntryMap.PersistedEntryMapEntry
	98,  // 263: io.bisq.protobuffer.AccountAgeWitnessStore.items:type_name -> io.bisq.protobuffer.AccountAgeWitness
	99,  // 264: io.bisq.protobuffer.SignedWitnessStore.items:type_name -> io.bisq.protobuffer.SignedWitness
	94,  // 265: io.bisq.protobuffer.TradeStatistics2Store.items:type_name -> io.bisq.protobuffer.TradeStatistics2
	95,  // 266: io.bisq.protobuffer.TradeStatistics3Store.items:type_name -> io.bisq.protobuffer.TradeStatistics3
	73,  // 267: io.bisq.protobuffer.PeerList.peer:type_name -> io.bisq.protobuffer.Peer
	155, // 268: io.bisq.protobuffer.AddressEntryList.address_entry:type_name -> io.bisq.protobuffer.AddressEntry
	11,  // 269: io.bisq.protobuffer.AddressEntry.context:type_name -> io.bisq.protobuffer.AddressEntry.Context
	234, // 270: io.bisq.protobuffer.PaymentAccountList.payment_account:type_name -> io.bisq.protobuffer.PaymentAccount
	161, // 271: io.bisq.protobuffer.TradableList.tradable:type_name -> io.bisq.protobuffer.Tradable
	97,  // 272: io.bisq.protobuffer.Offer.offer_payload:type_name -> io.bisq.protobuffer.OfferPayload
	159, // 273: io.bisq.protobuffer.OpenOffer.offer:type_name -> io.bisq.protobuffer.Offer
	13,  // 274: io.bisq.protobuffer.OpenOffer.state:type_name -> io.bisq.protobuffer.OpenOffer.State
	72,  // 275: io.bisq.protobuffer.OpenOffer.arbitrator_node_address:type_name -> io.bisq.protobuffer.NodeAddress
	72,  // 276: io.bisq.protobuffer.OpenOffer.mediator_node_address:type_name -> io.bisq.protobuffer.NodeAddress
	72,  // 277: io.bisq.protobuffer.OpenOffer.refund_agent_node_address:type_name -> io.bisq.protobuffer.NodeAddress
	160, // 278: io.bisq.protobuffer.Tradable.open_offer:type_name -> io.bisq.protobuffer.OpenOffer
	163, // 279: io.bisq.protobuffer.Tradable.buyer_as_maker_trade:type_name -> io.bisq.protobuffer.BuyerAsMakerTrade
	164, // 280: io.bisq.protobuffer.Tradable.buyer_as_taker_trade:type_name -> io.bisq.protobuffer.BuyerAsTakerTrade
	165, // 281: io.bisq.protobuffer.Tradable.seller_as_maker_trade:type_name -> io.bisq.protobuffer.SellerAsMakerTrade
	166, // 282: io.bisq.protobuffer.Tradable.seller_as_taker_trade:type_name -> io.bisq.protobuffer.SellerAsTakerTrade
	159, // 283: io.bisq.protobuffer.Trade.offer:type_name -> io.bisq.protobuffer.Offer
	167, // 284: io.bisq.protobuffer.Trade.process_model:type_name -> io.bisq.protobuffer.ProcessModel
	72,  // 285: io.bisq.protobuffer.Trade.trading_peer_node_address:type_name -> io.bisq.protobuffer.NodeAddress
	14,  // 286: io.bisq.protobuffer.Trade.state:type_name -> io.bisq.protobuffer.Trade.State
	16,  // 287: io.bisq.protobuffer.Trade.dispute_state:type_name -> io.bisq.protobuffer.Trade.DisputeState
	17,  // 288: io.bisq.protobuffer.Trade.trade_period_state:type_name -> io.bisq.protobuffer.Trade.TradePeriodState
	103, // 289: io.bisq.protobuffer.Trade.contract:type_name -> io.bisq.protobuffer.Contract
	72,  // 290: io.bisq.protobuffer.Trade.arbitrator_node_address:type_name -> io.bisq.protobuffer.NodeAddress
	72,  // 291: io.bisq.protobuffer.Trade.mediator_node_address:type_name -> io.bisq.protobuffer.NodeAddress
	74,  // 292: io.bisq.protobuffer.Trade.arbitrator_pub_key_ring:type_name -> io.bisq.protobuffer.PubKeyRing
	74,  // 293: io.bisq.protobuffer.Trade.mediator_pub_key_ring:type_name -> io.bisq.protobuffer.PubKeyRing
	55,  // 294: io.bisq.protobuffer.Trade.chat_message:type_name -> io.bisq.protobuffer.ChatMessage
	2,   // 295: io.bisq.protobuffer.Trade.mediation_result_state:type_name -> io.bisq.protobuffer.MediationResultState
	72,  // 296: io.bisq.protobuffer.Trade.refund_agent_node_address:type_name -> io.bisq.protobuffer.NodeAddress
	74,  // 297: io.bisq.protobuffer.Trade.refund_agent_pub_key_ring:type_name -> io.bisq.protobuffer.PubKeyRing
	3,   // 298: io.bisq.protobuffer.Trade.refund_result_state:type_name -> io.bisq.protobuffer.RefundResultState
	162, // 299: io.bisq.protobuffer.BuyerAsMakerTrade.trade:type_name -> io.bisq.protobuffer.Trade
	162, // 300: io.bisq.protobuffer.BuyerAsTakerTrade.trade:type_name -> io.bisq.protobuffer.Trade
	162, // 301: io.bisq.protobuffer.SellerAsMakerTrade.trade:type_name -> io.bisq.protobuffer.Trade
	162, // 302: io.bisq.protobuffer.SellerAsTakerTrade.trade:type_name -> io.bisq.protobuffer.Trade
	168, // 303: io.bisq.protobuffer.ProcessModel.trading_peer:type_name -> io.bisq.protobuffer.TradingPeer
	74,  // 304: io.bisq.protobuffer.ProcessModel.pub_key_ring:type_name -> io.bisq.protobuffer.PubKeyRing
	104, // 305: io.bisq.protobuffer.ProcessModel.raw_transaction_inputs:type_name -> io.bisq.protobuffer.RawTransactionInput
	72,  // 306: io.bisq.protobuffer.ProcessModel.temp_trading_peer_node_address:type_name -> io.bisq.protobuffer.NodeAddress
	105, // 307: io.bisq.protobuffer.TradingPeer.payment_account_payload:type_name -> io.bisq.protobuffer.PaymentAccountPayload
	74,  // 308: io.bisq.protobuffer.TradingPeer.pub_key_ring:type_name -> io.bisq.protobuffer.PubKeyRing
	104, // 309: io.bisq.protobuffer.TradingPeer.raw_transaction_inputs:type_name -> io.bisq.protobuffer.RawTransactionInput
	100, // 310: io.bisq.protobuffer.ArbitrationDisputeList.dispute:type_name -> io.bisq.protobuffer.Dispute
	100, // 311: io.bisq.protobuffer.MediationDisputeList.dispute:type_name -> io.bisq.protobuffer.Dispute
	100, // 312: io.bisq.protobuffer.RefundDisputeList.dispute:type_name -> io.bisq.protobuffer.Dispute
	240, // 313: io.bisq.protobuffer.PreferencesPayload.user_country:type_name -> io.bisq.protobuffer.Country
	237, // 314: io.bisq.protobuffer.PreferencesPayload.fiat_currencies:type_name -> io.bisq.protobuffer.TradeCurrency
	237, // 315: io.bisq.protobuffer.PreferencesPayload.crypto_currencies:type_name -> io.bisq.protobuffer.TradeCurrency
	233, // 316: io.bisq.protobuffer.PreferencesPayload.block_chain_explorer_main_net:type_name -> io.bisq.protobuffer.BlockChainExplorer
	233, // 317: io.bisq.protobuffer.PreferencesPayload.block_chain_explorer_test_net:type_name -> io.bisq.protobuffer.BlockChainExplorer
	233, // 318: io.bisq.protobuffer.PreferencesPayload.bsq_block_chain_explorer:type_name -> io.bisq.protobuffer.BlockChainExplorer
	260, // 319: io.bisq.protobuffer.PreferencesPayload.dont_show_again_map:type_name -> io.bisq.protobuffer.PreferencesPayload.DontShowAgainMapEntry
	237, // 320: io.bisq.protobuffer.PreferencesPayload.preferred_trade_currency:type_name -> io.bisq.protobuffer.TradeCurrency
	261, // 321: io.bisq.protobuffer.PreferencesPayload.peer_tag_map:type_name -> io.bisq.protobuffer.PreferencesPayload.PeerTagMapEntry
	234, // 322: io.bisq.protobuffer.PreferencesPayload.selectedPayment_account_for_createOffer:type_name -> io.bisq.protobuffer.PaymentAccount
	173, // 323: io.bisq.protobuffer.PreferencesPayload.auto_confirm_settings:type_name -> io.bisq.protobuffer.AutoConfirmSettings
	234, // 324: io.bisq.protobuffer.UserPayload.payment_accounts:type_name -> io.bisq.protobuffer.PaymentAccount
	234, // 325: io.bisq.protobuffer.UserPayload.current_payment_account:type_name -> io.bisq.protobuffer.PaymentAccount
	89,  // 326: io.bisq.protobuffer.UserPayload.developers_alert:type_name -> io.bisq.protobuffer.Alert
	89,  // 327: io.bisq.protobuffer.UserPayload.displayed_alert:type_name -> io.bisq.protobuffer.Alert
	93,  // 328: io.bisq.protobuffer.UserPayload.developers_filter:type_name -> io.bisq.protobuffer.Filter
	90,  // 329: io.bisq.protobuffer.UserPayload.accepted_arbitrators:type_name -> io.bisq.protobuffer.Arbitrator
	91,  // 330: io.bisq.protobuffer.UserPayload.accepted_mediators:type_name -> io.bisq.protobuffer.Mediator
	90,  // 331: io.bisq.protobuffer.UserPayload.registered_arbitrator:type_name -> io.bisq.protobuffer.Arbitrator
	91,  // 332: io.bisq.protobuffer.UserPayload.registered_mediator:type_name -> io.bisq.protobuffer.Mediator
	242, // 333: io.bisq.protobuffer.UserPayload.price_alert_filter:type_name -> io.bisq.protobuffer.PriceAlertFilter
	243, // 334: io.bisq.protobuffer.UserPayload.market_alert_filters:type_name -> io.bisq.protobuffer.MarketAlertFilter
	92,  // 335: io.bisq.protobuffer.UserPayload.accepted_refund_agents:type_name -> io.bisq.protobuffer.RefundAgent
	92,  // 336: io.bisq.protobuffer.UserPayload.registered_refund_agent:type_name -> io.bisq.protobuffer.RefundAgent
	262, // 337: io.bisq.protobuffer.UserPayload.cookie:type_name -> io.bisq.protobuffer.UserPayload.CookieEntry
	176, // 338: io.bisq.protobuffer.BaseBlock.raw_block:type_name -> io.bisq.protobuffer.RawBlock
	177, // 339: io.bisq.protobuffer.BaseBlock.block:type_name -> io.bisq.protobuffer.Block
	178, // 340: io.bisq.protobuffer.RawBlock.raw_txs:type_name -> io.bisq.protobuffer.BaseTx
	178, // 341: io.bisq.protobuffer.Block.txs:type_name -> io.bisq.protobuffer.BaseTx
	181, // 342: io.bisq.protobuffer.BaseTx.tx_inputs:type_name -> io.bisq.protobuffer.TxInput
	179, // 343: io.bisq.protobuffer.BaseTx.raw_tx:type_name -> io.bisq.protobuffer.RawTx
	180, // 344: io.bisq.protobuffer.BaseTx.tx:type_name -> io.bisq.protobuffer.Tx
	182, // 345: io.bisq.protobuffer.RawTx.raw_tx_outputs:type_name -> io.bisq.protobuffer.BaseTxOutput
	182, // 346: io.bisq.protobuffer.Tx.tx_outputs:type_name -> io.bisq.protobuffer.BaseTxOutput
	4,   // 347: io.bisq.protobuffer.Tx.txType:type_name -> io.bisq.protobuffer.TxType
	187, // 348: io.bisq.protobuffer.BaseTxOutput.pub_key_script:type_name -> io.bisq.protobuffer.PubKeyScript
	184, // 349: io.bisq.protobuffer.BaseTxOutput.raw_tx_output:type_name -> io.bisq.protobuffer.RawTxOutput
	185, // 350: io.bisq.protobuffer.BaseTxOutput.tx_output:type_name -> io.bisq.protobuffer.TxOutput
	5,   // 351: io.bisq.protobuffer.TxOutput.tx_output_type:type_name -> io.bisq.protobuffer.TxOutputType
	6,   // 352: io.bisq.protobuffer.PubKeyScript.script_type:type_name -> io.bisq.protobuffer.ScriptType
	188, // 353: io.bisq.protobuffer.Cycle.dao_phase:type_name -> io.bisq.protobuffer.DaoPhase
	175, // 354: io.bisq.protobuffer.DaoState.blocks:type_name -> io.bisq.protobuffer.BaseBlock
	189, // 355: io.bisq.protobuffer.DaoState.cycles:type_name -> io.bisq.protobuffer.Cycle
	263, // 356: io.bisq.protobuffer.DaoState.unspent_tx_output_map:type_name -> io.bisq.protobuffer.DaoState.UnspentTxOutputMapEntry
	264, // 357: io.bisq.protobuffer.DaoState.issuance_map:type_name -> io.bisq.protobuffer.DaoState.IssuanceMapEntry
	265, // 358: io.bisq.protobuffer.DaoState.spent_info_map:type_name -> io.bisq.protobuffer.DaoState.SpentInfoMapEntry
	213, // 359: io.bisq.protobuffer.DaoState.param_change_list:type_name -> io.bisq.protobuffer.ParamChange
	227, // 360: io.bisq.protobuffer.DaoState.evaluated_proposal_list:type_name -> io.bisq.protobuffer.EvaluatedProposal
	228, // 361: io.bisq.protobuffer.DaoState.decrypted_ballots_with_merits_list:type_name -> io.bisq.protobuffer.DecryptedBallotsWithMerits
	193, // 362: io.bisq.protobuffer.Proposal.compensation_proposal:type_name -> io.bisq.protobuffer.CompensationProposal
	194, // 363: io.bisq.protobuffer.Proposal.reimbursement_proposal:type_name -> io.bisq.protobuffer.ReimbursementProposal
	195, // 364: io.bisq.protobuffer.Proposal.change_param_proposal:type_name -> io.bisq.protobuffer.ChangeParamProposal
	196, // 365: io.bisq.protobuffer.Proposal.role_proposal:type_name -> io.bisq.protobuffer.RoleProposal
	197, // 366: io.bisq.protobuffer.Proposal.confiscate_bond_proposal:type_name -> io.bisq.protobuffer.ConfiscateBondProposal
	198, // 367: io.bisq.protobuffer.Proposal.generic_proposal:type_name -> io.bisq.protobuffer.GenericProposal
	199, // 368: io.bisq.protobuffer.Proposal.remove_asset_proposal:type_name -> io.bisq.protobuffer.RemoveAssetProposal
	266, // 369: io.bisq.protobuffer.Proposal.extra_data:type_name -> io.bisq.protobuffer.Proposal.ExtraDataEntry
	200, // 370: io.bisq.protobuffer.RoleProposal.role:type_name -> io.bisq.protobuffer.Role
	201, // 371: io.bisq.protobuffer.MyReputationList.my_reputation:type_name -> io.bisq.protobuffer.MyReputation
	203, // 372: io.bisq.protobuffer.MyProofOfBurnList.my_proof_of_burn:type_name -> io.bisq.protobuffer.MyProofOfBurn
	183, // 373: io.bisq.protobuffer.UnconfirmedBsqChangeOutputList.unconfirmed_tx_output:type_name -> io.bisq.protobuffer.UnconfirmedTxOutput
	192, // 374: io.bisq.protobuffer.TempProposalPayload.proposal:type_name -> io.bisq.protobuffer.Proposal
	267, // 375: io.bisq.protobuffer.TempProposalPayload.extra_data:type_name -> io.bisq.protobuffer.TempProposalPayload.ExtraDataEntry
	192, // 376: io.bisq.protobuffer.ProposalPayload.proposal:type_name -> io.bisq.protobuffer.Proposal
	207, // 377: io.bisq.protobuffer.ProposalStore.items:type_name -> io.bisq.protobuffer.ProposalPayload
	78,  // 378: io.bisq.protobuffer.TempProposalStore.items:type_name -> io.bisq.protobuffer.ProtectedStorageEntry
	192, // 379: io.bisq.protobuffer.Ballot.proposal:type_name -> io.bisq.protobuffer.Proposal
	223, // 380: io.bisq.protobuffer.Ballot.vote:type_name -> io.bisq.protobuffer.Vote
	192, // 381: io.bisq.protobuffer.MyProposalList.proposal:type_name -> io.bisq.protobuffer.Proposal
	210, // 382: io.bisq.protobuffer.BallotList.ballot:type_name -> io.bisq.protobuffer.Ballot
	212, // 383: io.bisq.protobuffer.MyVote.ballot_list:type_name -> io.bisq.protobuffer.BallotList
	219, // 384: io.bisq.protobuffer.MyVote.blind_vote:type_name -> io.bisq.protobuffer.BlindVote
	215, // 385: io.bisq.protobuffer.MyVoteList.my_vote:type_name -> io.bisq.protobuffer.MyVote
	223, // 386: io.bisq.protobuffer.VoteWithProposalTxId.vote:type_name -> io.bisq.protobuffer.Vote
	217, // 387: io.bisq.protobuffer.VoteWithProposalTxIdList.item:type_name -> io.bisq.protobuffer.VoteWithProposalTxId
	268, // 388: io.bisq.protobuffer.BlindVote.extra_data:type_name -> io.bisq.protobuffer.BlindVote.ExtraDataEntry
	219, // 389: io.bisq.protobuffer.MyBlindVoteList.blind_vote:type_name -> io.bisq.protobuffer.BlindVote
	222, // 390: io.bisq.protobuffer.BlindVoteStore.items:type_name -> io.bisq.protobuffer.BlindVotePayload
	219, // 391: io.bisq.protobuffer.BlindVotePayload.blind_vote:type_name -> io.bisq.protobuffer.BlindVote
	191, // 392: io.bisq.protobuffer.Merit.issuance:type_name -> io.bisq.protobuffer.Issuance
	224, // 393: io.bisq.protobuffer.MeritList.merit:type_name -> io.bisq.protobuffer.Merit
	192, // 394: io.bisq.protobuffer.ProposalVoteResult.proposal:type_name -> io.bisq.protobuffer.Proposal
	226, // 395: io.bisq.protobuffer.EvaluatedProposal.proposal_vote_result:type_name -> io.bisq.protobuffer.ProposalVoteResult
	212, // 396: io.bisq.protobuffer.DecryptedBallotsWithMerits.ballot_list:type_name -> io.bisq.protobuffer.BallotList
	225, // 397: io.bisq.protobuffer.DecryptedBallotsWithMerits.merit_list:type_name -> io.bisq.protobuffer.MeritList
	190, // 398: io.bisq.protobuffer.DaoStateStore.dao_state:type_name -> io.bisq.protobuffer.DaoState
	230, // 399: io.bisq.protobuffer.DaoStateStore.dao_state_hash:type_name -> io.bisq.protobuffer.DaoStateHash
	235, // 400: io.bisq.protobuffer.PaymentAccount.payment_method:type_name -> io.bisq.protobuffer.PaymentMethod
	237, // 401: io.bisq.protobuffer.PaymentAccount.trade_currencies:type_name -> io.bisq.protobuffer.TradeCurrency
	237, // 402: io.bisq.protobuffer.PaymentAccount.selected_trade_currency:type_name -> io.bisq.protobuffer.TradeCurrency
	105, // 403: io.bisq.protobuffer.PaymentAccount.payment_account_payload:type_name -> io.bisq.protobuffer.PaymentAccountPayload
	238, // 404: io.bisq.protobuffer.TradeCurrency.crypto_currency:type_name -> io.bisq.protobuffer.CryptoCurrency
	239, // 405: io.bisq.protobuffer.TradeCurrency.fiat_currency:type_name -> io.bisq.protobuffer.FiatCurrency
	236, // 406: io.bisq.protobuffer.FiatCurrency.currency:type_name -> io.bisq.protobuffer.Currency
	241, // 407: io.bisq.protobuffer.Country.region:type_name -> io.bisq.protobuffer.Region
	234, // 408: io.bisq.protobuffer.MarketAlertFilter.payment_account:type_name -> io.bisq.protobuffer.PaymentAccount
	72,  // 409: io.bisq.protobuffer.MockMailboxPayload.sender_node_address:type_name -> io.bisq.protobuffer.NodeAddress
	78,  // 410: io.bisq.protobuffer.PersistedEntryMap.PersistedEntryMapEntry.value:type_name -> io.bisq.protobuffer.ProtectedStorageEntry
	182, // 411: io.bisq.protobuffer.DaoState.UnspentTxOutputMapEntry.value:type_name -> io.bisq.protobuffer.BaseTxOutput
	191, // 412: io.bisq.protobuffer.DaoState.IssuanceMapEntry.value:type_name -> io.bisq.protobuffer.Issuance
	186, // 413: io.bisq.protobuffer.DaoState.SpentInfoMapEntry.value:type_name -> io.bisq.protobuffer.SpentInfo
	414, // [414:414] is the sub-list for method output_type
	414, // [414:414] is the sub-list for method input_type
	414, // [414:414] is the sub-list for extension type_name
	414, // [414:414] is the sub-list for extension extendee
	0,   // [0:414] is the sub-list for field type_name
}

func init() { file_pb_proto_init() }
func file_pb_proto_init() {
	if File_pb_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pb_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkEnvelope); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BundleOfEnvelopes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PreliminaryGetDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUpdatedDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPeersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPeersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pong); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInventoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInventoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OfferAvailabilityRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OfferAvailabilityResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefreshOfferMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddDataMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveDataMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveMailboxDataMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddPersistableNetworkPayloadMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloseConnectionMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AckMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrefixedSealedAndSignedMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InputsForDepositTxRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InputsForDepositTxResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelayedPayoutTxSignatureRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelayedPayoutTxSignatureResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DepositTxAndDelayedPayoutTxMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DepositTxMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeerPublishedDelayedPayoutTxMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CounterCurrencyTransferStartedMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinalizePayoutTxRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PayoutTxPublishedMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MediatedPayoutTxPublishedMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MediatedPayoutTxSignatureMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefreshTradeStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TraderSignedWitnessMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenNewDisputeMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeerOpenedDisputeMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisputeResultMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeerPublishedDisputePayoutTxMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrivateNotificationMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBlocksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBlocksResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewBlockBroadcastMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepublishGovernanceDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewDaoStateHashMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewProposalStateHashMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewBlindVoteStateHashMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDaoStateHashesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProposalStateHashesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBlindVoteStateHashesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDaoStateHashesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProposalStateHashesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBlindVoteStateHashesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Peer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PubKeyRing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SealedAndSigned); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoragePayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PersistableNetworkPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtectedStorageEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StorageEntryWrapper); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtectedMailboxStorageEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataAndSeqNrPair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MailboxMessageList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemovedPayloadsMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IgnoredMailboxMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MailboxItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DecryptedMessageWithPubKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrivateNotificationPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentAccountFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Alert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Arbitrator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Mediator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefundAgent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Filter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradeStatistics2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradeStatistics3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MailboxStoragePayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OfferPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountAgeWitness); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignedWitness); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Dispute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Attachment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisputeResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Contract); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RawTransactionInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentAccountPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AliPayAccountPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WeChatPayAccountPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChaseQuickPayAccountPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClearXchangeAccountPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountryBasedPaymentAccountPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BankAccountPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NationalBankAccountPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SameBankAccountPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JapanBankAccountPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AustraliaPayidPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpecificBanksAccountPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CashDepositAccountPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoneyGramAccountPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HalCashAccountPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WesternUnionAccountPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AmazonGiftCardAccountPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SepaAccountPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SepaInstantAccountPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CryptoCurrencyAccountPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstantCryptoCurrencyAccountPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FasterPaymentsAccountPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InteracETransferAccountPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OKPayAccountPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpholdAccountPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CashAppAccountPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoneyBeamAccountPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VenmoAccountPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PopmoneyAccountPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RevolutAccountPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PerfectMoneyAccountPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwishAccountPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USPostalMoneyOrderAccountPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*F2FAccountPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CashByMailAccountPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PromptPayAccountPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdvancedCashAccountPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferwiseAccountPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PersistableEnvelope); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SequenceNumberMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SequenceNumberEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ByteArray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PersistedEntryMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountAgeWitnessStore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignedWitnessStore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[133].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradeStatistics2Store); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[134].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradeStatistics3Store); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[135].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeerList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[136].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddressEntryList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[137].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddressEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[138].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NavigationPath); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[139].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentAccountList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[140].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradableList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[141].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Offer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[142].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenOffer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[143].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tradable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[144].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trade); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[145].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuyerAsMakerTrade); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[146].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuyerAsTakerTrade); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[147].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SellerAsMakerTrade); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[148].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SellerAsTakerTrade); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[149].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessModel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[150].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradingPeer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[151].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArbitrationDisputeList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[152].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MediationDisputeList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[153].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefundDisputeList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[154].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PreferencesPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[155].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutoConfirmSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[156].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[157].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BaseBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[158].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RawBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[159].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Block); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[160].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BaseTx); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[161].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RawTx); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[162].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tx); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[163].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[164].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BaseTxOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[165].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnconfirmedTxOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[166].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RawTxOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[167].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[168].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpentInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[169].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PubKeyScript); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[170].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DaoPhase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[171].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cycle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[172].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DaoState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[173].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Issuance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[174].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Proposal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[175].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompensationProposal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[176].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReimbursementProposal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[177].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeParamProposal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[178].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoleProposal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[179].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfiscateBondProposal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[180].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenericProposal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[181].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveAssetProposal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[182].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Role); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[183].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MyReputation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[184].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MyReputationList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[185].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MyProofOfBurn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[186].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MyProofOfBurnList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[187].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnconfirmedBsqChangeOutputList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[188].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TempProposalPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[189].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProposalPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[190].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProposalStore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[191].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TempProposalStore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[192].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ballot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[193].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MyProposalList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[194].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BallotList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[195].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParamChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[196].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfiscateBond); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[197].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MyVote); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[198].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MyVoteList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[199].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VoteWithProposalTxId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[200].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VoteWithProposalTxIdList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[201].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlindVote); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[202].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MyBlindVoteList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[203].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlindVoteStore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[204].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlindVotePayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[205].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Vote); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[206].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Merit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[207].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MeritList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[208].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProposalVoteResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[209].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvaluatedProposal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[210].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DecryptedBallotsWithMerits); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[211].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DaoStateStore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[212].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DaoStateHash); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[213].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProposalStateHash); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[214].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlindVoteStateHash); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[215].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockChainExplorer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[216].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentAccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[217].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentMethod); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[218].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Currency); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[219].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradeCurrency); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[220].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CryptoCurrency); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[221].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FiatCurrency); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[222].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Country); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[223].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Region); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[224].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PriceAlertFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[225].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketAlertFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[226].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MockMailboxPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[227].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MockPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_pb_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*NetworkEnvelope_PreliminaryGetDataRequest)(nil),
		(*NetworkEnvelope_GetDataResponse)(nil),
		(*NetworkEnvelope_GetUpdatedDataRequest)(nil),
		(*NetworkEnvelope_GetPeersRequest)(nil),
		(*NetworkEnvelope_GetPeersResponse)(nil),
		(*NetworkEnvelope_Ping)(nil),
		(*NetworkEnvelope_Pong)(nil),
		(*NetworkEnvelope_OfferAvailabilityRequest)(nil),
		(*NetworkEnvelope_OfferAvailabilityResponse)(nil),
		(*NetworkEnvelope_RefreshOfferMessage)(nil),
		(*NetworkEnvelope_AddDataMessage)(nil),
		(*NetworkEnvelope_RemoveDataMessage)(nil),
		(*NetworkEnvelope_RemoveMailboxDataMessage)(nil),
		(*NetworkEnvelope_CloseConnectionMessage)(nil),
		(*NetworkEnvelope_PrefixedSealedAndSignedMessage)(nil),
		(*NetworkEnvelope_InputsForDepositTxRequest)(nil),
		(*NetworkEnvelope_InputsForDepositTxResponse)(nil),
		(*NetworkEnvelope_DepositTxMessage)(nil),
		(*NetworkEnvelope_CounterCurrencyTransferStartedMessage)(nil),
		(*NetworkEnvelope_PayoutTxPublishedMessage)(nil),
		(*NetworkEnvelope_OpenNewDisputeMessage)(nil),
		(*NetworkEnvelope_PeerOpenedDisputeMessage)(nil),
		(*NetworkEnvelope_ChatMessage)(nil),
		(*NetworkEnvelope_DisputeResultMessage)(nil),
		(*NetworkEnvelope_PeerPublishedDisputePayoutTxMessage)(nil),
		(*NetworkEnvelope_PrivateNotificationMessage)(nil),
		(*NetworkEnvelope_GetBlocksRequest)(nil),
		(*NetworkEnvelope_GetBlocksResponse)(nil),
		(*NetworkEnvelope_NewBlockBroadcastMessage)(nil),
		(*NetworkEnvelope_AddPersistableNetworkPayloadMessage)(nil),
		(*NetworkEnvelope_AckMessage)(nil),
		(*NetworkEnvelope_RepublishGovernanceDataRequest)(nil),
		(*NetworkEnvelope_NewDaoStateHashMessage)(nil),
		(*NetworkEnvelope_GetDaoStateHashesRequest)(nil),
		(*NetworkEnvelope_GetDaoStateHashesResponse)(nil),
		(*NetworkEnvelope_NewProposalStateHashMessage)(nil),
		(*NetworkEnvelope_GetProposalStateHashesRequest)(nil),
		(*NetworkEnvelope_GetProposalStateHashesResponse)(nil),
		(*NetworkEnvelope_NewBlindVoteStateHashMessage)(nil),
		(*NetworkEnvelope_GetBlindVoteStateHashesRequest)(nil),
		(*NetworkEnvelope_GetBlindVoteStateHashesResponse)(nil),
		(*NetworkEnvelope_BundleOfEnvelopes)(nil),
		(*NetworkEnvelope_MediatedPayoutTxSignatureMessage)(nil),
		(*NetworkEnvelope_MediatedPayoutTxPublishedMessage)(nil),
		(*NetworkEnvelope_DelayedPayoutTxSignatureRequest)(nil),
		(*NetworkEnvelope_DelayedPayoutTxSignatureResponse)(nil),
		(*NetworkEnvelope_DepositTxAndDelayedPayoutTxMessage)(nil),
		(*NetworkEnvelope_PeerPublishedDelayedPayoutTxMessage)(nil),
		(*NetworkEnvelope_RefreshTradeStateRequest)(nil),
		(*NetworkEnvelope_TraderSignedWitnessMessage)(nil),
		(*NetworkEnvelope_GetInventoryRequest)(nil),
		(*NetworkEnvelope_GetInventoryResponse)(nil),
	}
	file_pb_proto_msgTypes[58].OneofWrappers = []interface{}{
		(*StoragePayload_Alert)(nil),
		(*StoragePayload_Arbitrator)(nil),
		(*StoragePayload_Mediator)(nil),
		(*StoragePayload_Filter)(nil),
		(*StoragePayload_MailboxStoragePayload)(nil),
		(*StoragePayload_OfferPayload)(nil),
		(*StoragePayload_TempProposalPayload)(nil),
		(*StoragePayload_RefundAgent)(nil),
	}
	file_pb_proto_msgTypes[59].OneofWrappers = []interface{}{
		(*PersistableNetworkPayload_AccountAgeWitness)(nil),
		(*PersistableNetworkPayload_TradeStatistics2)(nil),
		(*PersistableNetworkPayload_ProposalPayload)(nil),
		(*PersistableNetworkPayload_BlindVotePayload)(nil),
		(*PersistableNetworkPayload_SignedWitness)(nil),
		(*PersistableNetworkPayload_TradeStatistics3)(nil),
	}
	file_pb_proto_msgTypes[61].OneofWrappers = []interface{}{
		(*StorageEntryWrapper_ProtectedStorageEntry)(nil),
		(*StorageEntryWrapper_ProtectedMailboxStorageEntry)(nil),
	}
	file_pb_proto_msgTypes[87].OneofWrappers = []interface{}{
		(*PaymentAccountPayload_AliPayAccountPayload)(nil),
		(*PaymentAccountPayload_ChaseQuickPayAccountPayload)(nil),
		(*PaymentAccountPayload_ClearXchangeAccountPayload)(nil),
		(*PaymentAccountPayload_CountryBasedPaymentAccountPayload)(nil),
		(*PaymentAccountPayload_CryptoCurrencyAccountPayload)(nil),
		(*PaymentAccountPayload_FasterPaymentsAccountPayload)(nil),
		(*PaymentAccountPayload_InteracETransferAccountPayload)(nil),
		(*PaymentAccountPayload_OKPayAccountPayload)(nil),
		(*PaymentAccountPayload_PerfectMoneyAccountPayload)(nil),
		(*PaymentAccountPayload_SwishAccountPayload)(nil),
		(*PaymentAccountPayload_USPostalMoneyOrderAccountPayload)(nil),
		(*PaymentAccountPayload_UpholdAccountPayload)(nil),
		(*PaymentAccountPayload_CashAppAccountPayload)(nil),
		(*PaymentAccountPayload_MoneyBeamAccountPayload)(nil),
		(*PaymentAccountPayload_VenmoAccountPayload)(nil),
		(*PaymentAccountPayload_PopmoneyAccountPayload)(nil),
		(*PaymentAccountPayload_RevolutAccountPayload)(nil),
		(*PaymentAccountPayload_WeChatPayAccountPayload)(nil),
		(*PaymentAccountPayload_MoneyGramAccountPayload)(nil),
		(*PaymentAccountPayload_HalCashAccountPayload)(nil),
		(*PaymentAccountPayload_PromptPayAccountPayload)(nil),
		(*PaymentAccountPayload_AdvancedCashAccountPayload)(nil),
		(*PaymentAccountPayload_InstantCryptoCurrencyAccountPayload)(nil),
		(*PaymentAccountPayload_JapanBankAccountPayload)(nil),
		(*PaymentAccountPayload_TransferwiseAccountPayload)(nil),
		(*PaymentAccountPayload_AustraliaPayidPayload)(nil),
		(*PaymentAccountPayload_AmazonGiftCardAccountPayload)(nil),
		(*PaymentAccountPayload_CashByMailAccountPayload)(nil),
	}
	file_pb_proto_msgTypes[92].OneofWrappers = []interface{}{
		(*CountryBasedPaymentAccountPayload_BankAccountPayload)(nil),
		(*CountryBasedPaymentAccountPayload_CashDepositAccountPayload)(nil),
		(*CountryBasedPaymentAccountPayload_SepaAccountPayload)(nil),
		(*CountryBasedPaymentAccountPayload_WesternUnionAccountPayload)(nil),
		(*CountryBasedPaymentAccountPayload_SepaInstantAccountPayload)(nil),
		(*CountryBasedPaymentAccountPayload_F2FAccountPayload)(nil),
	}
	file_pb_proto_msgTypes[93].OneofWrappers = []interface{}{
		(*BankAccountPayload_NationalBankAccountPayload)(nil),
		(*BankAccountPayload_SameBankAccontPayload)(nil),
		(*BankAccountPayload_SpecificBanksAccountPayload)(nil),
	}
	file_pb_proto_msgTypes[125].OneofWrappers = []interface{}{
		(*PersistableEnvelope_SequenceNumberMap)(nil),
		(*PersistableEnvelope_PersistedEntryMap)(nil),
		(*PersistableEnvelope_PeerList)(nil),
		(*PersistableEnvelope_AddressEntryList)(nil),
		(*PersistableEnvelope_NavigationPath)(nil),
		(*PersistableEnvelope_TradableList)(nil),
		(*PersistableEnvelope_ArbitrationDisputeList)(nil),
		(*PersistableEnvelope_PreferencesPayload)(nil),
		(*PersistableEnvelope_UserPayload)(nil),
		(*PersistableEnvelope_PaymentAccountList)(nil),
		(*PersistableEnvelope_AccountAgeWitnessStore)(nil),
		(*PersistableEnvelope_TradeStatistics2Store)(nil),
		(*PersistableEnvelope_ProposalStore)(nil),
		(*PersistableEnvelope_TempProposalStore)(nil),
		(*PersistableEnvelope_BlindVoteStore)(nil),
		(*PersistableEnvelope_MyProposalList)(nil),
		(*PersistableEnvelope_BallotList)(nil),
		(*PersistableEnvelope_MyVoteList)(nil),
		(*PersistableEnvelope_MyBlindVoteList)(nil),
		(*PersistableEnvelope_DaoStateStore)(nil),
		(*PersistableEnvelope_MyReputationList)(nil),
		(*PersistableEnvelope_MyProofOfBurnList)(nil),
		(*PersistableEnvelope_UnconfirmedBsqChangeOutputList)(nil),
		(*PersistableEnvelope_SignedWitnessStore)(nil),
		(*PersistableEnvelope_MediationDisputeList)(nil),
		(*PersistableEnvelope_RefundDisputeList)(nil),
		(*PersistableEnvelope_TradeStatistics3Store)(nil),
		(*PersistableEnvelope_MailboxMessageList)(nil),
		(*PersistableEnvelope_IgnoredMailboxMap)(nil),
		(*PersistableEnvelope_RemovedPayloadsMap)(nil),
	}
	file_pb_proto_msgTypes[143].OneofWrappers = []interface{}{
		(*Tradable_OpenOffer)(nil),
		(*Tradable_BuyerAsMakerTrade)(nil),
		(*Tradable_BuyerAsTakerTrade)(nil),
		(*Tradable_SellerAsMakerTrade)(nil),
		(*Tradable_SellerAsTakerTrade)(nil),
	}
	file_pb_proto_msgTypes[157].OneofWrappers = []interface{}{
		(*BaseBlock_RawBlock)(nil),
		(*BaseBlock_Block)(nil),
	}
	file_pb_proto_msgTypes[160].OneofWrappers = []interface{}{
		(*BaseTx_RawTx)(nil),
		(*BaseTx_Tx)(nil),
	}
	file_pb_proto_msgTypes[164].OneofWrappers = []interface{}{
		(*BaseTxOutput_RawTxOutput)(nil),
		(*BaseTxOutput_TxOutput)(nil),
	}
	file_pb_proto_msgTypes[174].OneofWrappers = []interface{}{
		(*Proposal_CompensationProposal)(nil),
		(*Proposal_ReimbursementProposal)(nil),
		(*Proposal_ChangeParamProposal)(nil),
		(*Proposal_RoleProposal)(nil),
		(*Proposal_ConfiscateBondProposal)(nil),
		(*Proposal_GenericProposal)(nil),
		(*Proposal_RemoveAssetProposal)(nil),
	}
	file_pb_proto_msgTypes[219].OneofWrappers = []interface{}{
		(*TradeCurrency_CryptoCurrency)(nil),
		(*TradeCurrency_FiatCurrency)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pb_proto_rawDesc,
			NumEnums:      18,
			NumMessages:   251,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pb_proto_goTypes,
		DependencyIndexes: file_pb_proto_depIdxs,
		EnumInfos:         file_pb_proto_enumTypes,
		MessageInfos:      file_pb_proto_msgTypes,
	}.Build()
	File_pb_proto = out.File
	file_pb_proto_rawDesc = nil
	file_pb_proto_goTypes = nil
	file_pb_proto_depIdxs = nil
}
