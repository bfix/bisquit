//
// This file is part of Bisq.
//
// Bisq is free software: you can redistribute it and/or modify it
// under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or (at
// your option) any later version.
//
// Bisq is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public
// License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with Bisq. If not, see <http://www.gnu.org/licenses/>.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.12.4
// source: grpc.proto

package bisquit

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetOfferCategoryReply_OfferCategory int32

const (
	GetOfferCategoryReply_UNKNOWN  GetOfferCategoryReply_OfferCategory = 0 // An invalid offer category probably indicates a software bug.
	GetOfferCategoryReply_FIAT     GetOfferCategoryReply_OfferCategory = 1 // Indicates offer is to BUY or SELL BTC with a fiat currency.
	GetOfferCategoryReply_ALTCOIN  GetOfferCategoryReply_OfferCategory = 2 // Indicates offer is to BUY or SELL BTC with an altcoin.
	GetOfferCategoryReply_BSQ_SWAP GetOfferCategoryReply_OfferCategory = 3 // Indicates offer is to swap BTC for BSQ.
)

// Enum value maps for GetOfferCategoryReply_OfferCategory.
var (
	GetOfferCategoryReply_OfferCategory_name = map[int32]string{
		0: "UNKNOWN",
		1: "FIAT",
		2: "ALTCOIN",
		3: "BSQ_SWAP",
	}
	GetOfferCategoryReply_OfferCategory_value = map[string]int32{
		"UNKNOWN":  0,
		"FIAT":     1,
		"ALTCOIN":  2,
		"BSQ_SWAP": 3,
	}
)

func (x GetOfferCategoryReply_OfferCategory) Enum() *GetOfferCategoryReply_OfferCategory {
	p := new(GetOfferCategoryReply_OfferCategory)
	*p = x
	return p
}

func (x GetOfferCategoryReply_OfferCategory) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetOfferCategoryReply_OfferCategory) Descriptor() protoreflect.EnumDescriptor {
	return file_grpc_proto_enumTypes[0].Descriptor()
}

func (GetOfferCategoryReply_OfferCategory) Type() protoreflect.EnumType {
	return &file_grpc_proto_enumTypes[0]
}

func (x GetOfferCategoryReply_OfferCategory) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetOfferCategoryReply_OfferCategory.Descriptor instead.
func (GetOfferCategoryReply_OfferCategory) EnumDescriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{5, 0}
}

// The EditType determines and constricts what offer details can be modified by the request, simplifying param
// validation.  (The CLI need to infer this detail from 'editoffer' command options, other clients do not.)
type EditOfferRequest_EditType int32

const (
	// Edit only the offer's activation state (enabled or disabled).
	EditOfferRequest_ACTIVATION_STATE_ONLY EditOfferRequest_EditType = 0
	// Edit only the offer's fixed price.
	EditOfferRequest_FIXED_PRICE_ONLY EditOfferRequest_EditType = 1
	// Edit only the offer's fixed price and activation state.
	EditOfferRequest_FIXED_PRICE_AND_ACTIVATION_STATE EditOfferRequest_EditType = 2
	// Edit only the offer's market price margin.
	EditOfferRequest_MKT_PRICE_MARGIN_ONLY EditOfferRequest_EditType = 3
	// Edit only the offer's market price margin and activation state.
	EditOfferRequest_MKT_PRICE_MARGIN_AND_ACTIVATION_STATE EditOfferRequest_EditType = 4
	// Edit only the market price margin based offer's trigger price.
	EditOfferRequest_TRIGGER_PRICE_ONLY EditOfferRequest_EditType = 5
	// Edit only the market price margin based offer's trigger price and activation state.
	EditOfferRequest_TRIGGER_PRICE_AND_ACTIVATION_STATE EditOfferRequest_EditType = 6
	// Edit only the offer's market price margin and trigger price.
	EditOfferRequest_MKT_PRICE_MARGIN_AND_TRIGGER_PRICE EditOfferRequest_EditType = 7
	// Edit only the offer's market price margin, trigger price, and activation state.
	EditOfferRequest_MKT_PRICE_MARGIN_AND_TRIGGER_PRICE_AND_ACTIVATION_STATE EditOfferRequest_EditType = 8
)

// Enum value maps for EditOfferRequest_EditType.
var (
	EditOfferRequest_EditType_name = map[int32]string{
		0: "ACTIVATION_STATE_ONLY",
		1: "FIXED_PRICE_ONLY",
		2: "FIXED_PRICE_AND_ACTIVATION_STATE",
		3: "MKT_PRICE_MARGIN_ONLY",
		4: "MKT_PRICE_MARGIN_AND_ACTIVATION_STATE",
		5: "TRIGGER_PRICE_ONLY",
		6: "TRIGGER_PRICE_AND_ACTIVATION_STATE",
		7: "MKT_PRICE_MARGIN_AND_TRIGGER_PRICE",
		8: "MKT_PRICE_MARGIN_AND_TRIGGER_PRICE_AND_ACTIVATION_STATE",
	}
	EditOfferRequest_EditType_value = map[string]int32{
		"ACTIVATION_STATE_ONLY":                                   0,
		"FIXED_PRICE_ONLY":                                        1,
		"FIXED_PRICE_AND_ACTIVATION_STATE":                        2,
		"MKT_PRICE_MARGIN_ONLY":                                   3,
		"MKT_PRICE_MARGIN_AND_ACTIVATION_STATE":                   4,
		"TRIGGER_PRICE_ONLY":                                      5,
		"TRIGGER_PRICE_AND_ACTIVATION_STATE":                      6,
		"MKT_PRICE_MARGIN_AND_TRIGGER_PRICE":                      7,
		"MKT_PRICE_MARGIN_AND_TRIGGER_PRICE_AND_ACTIVATION_STATE": 8,
	}
)

func (x EditOfferRequest_EditType) Enum() *EditOfferRequest_EditType {
	p := new(EditOfferRequest_EditType)
	*p = x
	return p
}

func (x EditOfferRequest_EditType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EditOfferRequest_EditType) Descriptor() protoreflect.EnumDescriptor {
	return file_grpc_proto_enumTypes[1].Descriptor()
}

func (EditOfferRequest_EditType) Type() protoreflect.EnumType {
	return &file_grpc_proto_enumTypes[1]
}

func (x EditOfferRequest_EditType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EditOfferRequest_EditType.Descriptor instead.
func (EditOfferRequest_EditType) EnumDescriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{23, 0}
}

// Rpc method GetTrades parameter determining what category of trade list is is being requested.
type GetTradesRequest_Category int32

const (
	GetTradesRequest_OPEN   GetTradesRequest_Category = 0 // Get all currently open trades.
	GetTradesRequest_CLOSED GetTradesRequest_Category = 1 // Get all completed trades.
	GetTradesRequest_FAILED GetTradesRequest_Category = 2 // Get all failed trades.
)

// Enum value maps for GetTradesRequest_Category.
var (
	GetTradesRequest_Category_name = map[int32]string{
		0: "OPEN",
		1: "CLOSED",
		2: "FAILED",
	}
	GetTradesRequest_Category_value = map[string]int32{
		"OPEN":   0,
		"CLOSED": 1,
		"FAILED": 2,
	}
)

func (x GetTradesRequest_Category) Enum() *GetTradesRequest_Category {
	p := new(GetTradesRequest_Category)
	*p = x
	return p
}

func (x GetTradesRequest_Category) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetTradesRequest_Category) Descriptor() protoreflect.EnumDescriptor {
	return file_grpc_proto_enumTypes[2].Descriptor()
}

func (GetTradesRequest_Category) Type() protoreflect.EnumType {
	return &file_grpc_proto_enumTypes[2]
}

func (x GetTradesRequest_Category) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetTradesRequest_Category.Descriptor instead.
func (GetTradesRequest_Category) EnumDescriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{53, 0}
}

type RegisterDisputeAgentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// One of "mediator" or "refundagent".  Development / test arbitrators can only be registered in the UI.
	DisputeAgentType string `protobuf:"bytes,1,opt,name=dispute_agent_type,json=disputeAgentType,proto3" json:"dispute_agent_type,omitempty"`
	// Private developer (only) registration key.
	RegistrationKey string `protobuf:"bytes,2,opt,name=registration_key,json=registrationKey,proto3" json:"registration_key,omitempty"`
}

func (x *RegisterDisputeAgentRequest) Reset() {
	*x = RegisterDisputeAgentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterDisputeAgentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterDisputeAgentRequest) ProtoMessage() {}

func (x *RegisterDisputeAgentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterDisputeAgentRequest.ProtoReflect.Descriptor instead.
func (*RegisterDisputeAgentRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{0}
}

func (x *RegisterDisputeAgentRequest) GetDisputeAgentType() string {
	if x != nil {
		return x.DisputeAgentType
	}
	return ""
}

func (x *RegisterDisputeAgentRequest) GetRegistrationKey() string {
	if x != nil {
		return x.RegistrationKey
	}
	return ""
}

type RegisterDisputeAgentReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RegisterDisputeAgentReply) Reset() {
	*x = RegisterDisputeAgentReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterDisputeAgentReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterDisputeAgentReply) ProtoMessage() {}

func (x *RegisterDisputeAgentReply) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterDisputeAgentReply.ProtoReflect.Descriptor instead.
func (*RegisterDisputeAgentReply) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{1}
}

type GetMethodHelpRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MethodName string `protobuf:"bytes,1,opt,name=method_name,json=methodName,proto3" json:"method_name,omitempty"` // The CLI command name.
}

func (x *GetMethodHelpRequest) Reset() {
	*x = GetMethodHelpRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMethodHelpRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMethodHelpRequest) ProtoMessage() {}

func (x *GetMethodHelpRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMethodHelpRequest.ProtoReflect.Descriptor instead.
func (*GetMethodHelpRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{2}
}

func (x *GetMethodHelpRequest) GetMethodName() string {
	if x != nil {
		return x.MethodName
	}
	return ""
}

type GetMethodHelpReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MethodHelp string `protobuf:"bytes,1,opt,name=method_help,json=methodHelp,proto3" json:"method_help,omitempty"` // The man page for the CLI command.
}

func (x *GetMethodHelpReply) Reset() {
	*x = GetMethodHelpReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMethodHelpReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMethodHelpReply) ProtoMessage() {}

func (x *GetMethodHelpReply) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMethodHelpReply.ProtoReflect.Descriptor instead.
func (*GetMethodHelpReply) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{3}
}

func (x *GetMethodHelpReply) GetMethodHelp() string {
	if x != nil {
		return x.MethodHelp
	}
	return ""
}

type GetOfferCategoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                   // The offer's unique identifier.
	IsMyOffer bool   `protobuf:"varint,2,opt,name=is_my_offer,json=isMyOffer,proto3" json:"is_my_offer,omitempty"` // Whether the offer was created by the user or not.
}

func (x *GetOfferCategoryRequest) Reset() {
	*x = GetOfferCategoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOfferCategoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOfferCategoryRequest) ProtoMessage() {}

func (x *GetOfferCategoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOfferCategoryRequest.ProtoReflect.Descriptor instead.
func (*GetOfferCategoryRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{4}
}

func (x *GetOfferCategoryRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetOfferCategoryRequest) GetIsMyOffer() bool {
	if x != nil {
		return x.IsMyOffer
	}
	return false
}

type GetOfferCategoryReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OfferCategory GetOfferCategoryReply_OfferCategory `protobuf:"varint,1,opt,name=offer_category,json=offerCategory,proto3,enum=io.bisq.protobuffer.GetOfferCategoryReply_OfferCategory" json:"offer_category,omitempty"`
}

func (x *GetOfferCategoryReply) Reset() {
	*x = GetOfferCategoryReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOfferCategoryReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOfferCategoryReply) ProtoMessage() {}

func (x *GetOfferCategoryReply) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOfferCategoryReply.ProtoReflect.Descriptor instead.
func (*GetOfferCategoryReply) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{5}
}

func (x *GetOfferCategoryReply) GetOfferCategory() GetOfferCategoryReply_OfferCategory {
	if x != nil {
		return x.OfferCategory
	}
	return GetOfferCategoryReply_UNKNOWN
}

type GetBsqSwapOfferReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BsqSwapOffer *OfferInfo `protobuf:"bytes,1,opt,name=bsq_swap_offer,json=bsqSwapOffer,proto3" json:"bsq_swap_offer,omitempty"` // The returned BSQ swap offer.
}

func (x *GetBsqSwapOfferReply) Reset() {
	*x = GetBsqSwapOfferReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBsqSwapOfferReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBsqSwapOfferReply) ProtoMessage() {}

func (x *GetBsqSwapOfferReply) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBsqSwapOfferReply.ProtoReflect.Descriptor instead.
func (*GetBsqSwapOfferReply) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{6}
}

func (x *GetBsqSwapOfferReply) GetBsqSwapOffer() *OfferInfo {
	if x != nil {
		return x.BsqSwapOffer
	}
	return nil
}

type GetOfferRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` // The offer's unique identifier.
}

func (x *GetOfferRequest) Reset() {
	*x = GetOfferRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOfferRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOfferRequest) ProtoMessage() {}

func (x *GetOfferRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOfferRequest.ProtoReflect.Descriptor instead.
func (*GetOfferRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{7}
}

func (x *GetOfferRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetOfferReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Offer *OfferInfo `protobuf:"bytes,1,opt,name=offer,proto3" json:"offer,omitempty"` // The returned v1 protocol offer.
}

func (x *GetOfferReply) Reset() {
	*x = GetOfferReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOfferReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOfferReply) ProtoMessage() {}

func (x *GetOfferReply) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOfferReply.ProtoReflect.Descriptor instead.
func (*GetOfferReply) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{8}
}

func (x *GetOfferReply) GetOffer() *OfferInfo {
	if x != nil {
		return x.Offer
	}
	return nil
}

type GetMyBsqSwapOfferReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BsqSwapOffer *OfferInfo `protobuf:"bytes,1,opt,name=bsq_swap_offer,json=bsqSwapOffer,proto3" json:"bsq_swap_offer,omitempty"` // The returned BSQ swap offer.
}

func (x *GetMyBsqSwapOfferReply) Reset() {
	*x = GetMyBsqSwapOfferReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMyBsqSwapOfferReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMyBsqSwapOfferReply) ProtoMessage() {}

func (x *GetMyBsqSwapOfferReply) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMyBsqSwapOfferReply.ProtoReflect.Descriptor instead.
func (*GetMyBsqSwapOfferReply) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{9}
}

func (x *GetMyBsqSwapOfferReply) GetBsqSwapOffer() *OfferInfo {
	if x != nil {
		return x.BsqSwapOffer
	}
	return nil
}

// Deprecated with rpc method GetMyOffer since 27-Dec-2021 (v1.8.0).
type GetMyOfferRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` // The offer's unique identifier.
}

func (x *GetMyOfferRequest) Reset() {
	*x = GetMyOfferRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMyOfferRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMyOfferRequest) ProtoMessage() {}

func (x *GetMyOfferRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMyOfferRequest.ProtoReflect.Descriptor instead.
func (*GetMyOfferRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{10}
}

func (x *GetMyOfferRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Deprecated with rpc method GetMyOffer since 27-Dec-2021 (v1.8.0).
type GetMyOfferReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Offer *OfferInfo `protobuf:"bytes,1,opt,name=offer,proto3" json:"offer,omitempty"` // The returned v1 protocol offer.
}

func (x *GetMyOfferReply) Reset() {
	*x = GetMyOfferReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMyOfferReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMyOfferReply) ProtoMessage() {}

func (x *GetMyOfferReply) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMyOfferReply.ProtoReflect.Descriptor instead.
func (*GetMyOfferReply) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{11}
}

func (x *GetMyOfferReply) GetOffer() *OfferInfo {
	if x != nil {
		return x.Offer
	}
	return nil
}

type GetOffersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Direction    string `protobuf:"bytes,1,opt,name=direction,proto3" json:"direction,omitempty"`                           // The offer's BUY (BTC) or SELL (BTC) direction.
	CurrencyCode string `protobuf:"bytes,2,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"` // The offer's fiat or altcoin currency code.
}

func (x *GetOffersRequest) Reset() {
	*x = GetOffersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOffersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOffersRequest) ProtoMessage() {}

func (x *GetOffersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOffersRequest.ProtoReflect.Descriptor instead.
func (*GetOffersRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{12}
}

func (x *GetOffersRequest) GetDirection() string {
	if x != nil {
		return x.Direction
	}
	return ""
}

func (x *GetOffersRequest) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

type GetOffersReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Offers []*OfferInfo `protobuf:"bytes,1,rep,name=offers,proto3" json:"offers,omitempty"` // The returned list of available offers.
}

func (x *GetOffersReply) Reset() {
	*x = GetOffersReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOffersReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOffersReply) ProtoMessage() {}

func (x *GetOffersReply) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOffersReply.ProtoReflect.Descriptor instead.
func (*GetOffersReply) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{13}
}

func (x *GetOffersReply) GetOffers() []*OfferInfo {
	if x != nil {
		return x.Offers
	}
	return nil
}

type GetBsqSwapOffersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Direction string `protobuf:"bytes,1,opt,name=direction,proto3" json:"direction,omitempty"` // The BSQ swap offer's BUY (BTC) or SELL (BTC) direction.
}

func (x *GetBsqSwapOffersRequest) Reset() {
	*x = GetBsqSwapOffersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBsqSwapOffersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBsqSwapOffersRequest) ProtoMessage() {}

func (x *GetBsqSwapOffersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBsqSwapOffersRequest.ProtoReflect.Descriptor instead.
func (*GetBsqSwapOffersRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{14}
}

func (x *GetBsqSwapOffersRequest) GetDirection() string {
	if x != nil {
		return x.Direction
	}
	return ""
}

type GetBsqSwapOffersReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BsqSwapOffers []*OfferInfo `protobuf:"bytes,1,rep,name=bsq_swap_offers,json=bsqSwapOffers,proto3" json:"bsq_swap_offers,omitempty"` // The returned list of available BSQ swap offers.
}

func (x *GetBsqSwapOffersReply) Reset() {
	*x = GetBsqSwapOffersReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBsqSwapOffersReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBsqSwapOffersReply) ProtoMessage() {}

func (x *GetBsqSwapOffersReply) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBsqSwapOffersReply.ProtoReflect.Descriptor instead.
func (*GetBsqSwapOffersReply) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{15}
}

func (x *GetBsqSwapOffersReply) GetBsqSwapOffers() []*OfferInfo {
	if x != nil {
		return x.BsqSwapOffers
	}
	return nil
}

type GetMyOffersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Direction    string `protobuf:"bytes,1,opt,name=direction,proto3" json:"direction,omitempty"`                           // The offers' BUY (BTC) or SELL (BTC) direction.
	CurrencyCode string `protobuf:"bytes,2,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"` // The offer's fiat or altcoin currency code.
}

func (x *GetMyOffersRequest) Reset() {
	*x = GetMyOffersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMyOffersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMyOffersRequest) ProtoMessage() {}

func (x *GetMyOffersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMyOffersRequest.ProtoReflect.Descriptor instead.
func (*GetMyOffersRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{16}
}

func (x *GetMyOffersRequest) GetDirection() string {
	if x != nil {
		return x.Direction
	}
	return ""
}

func (x *GetMyOffersRequest) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

type GetMyOffersReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Offers []*OfferInfo `protobuf:"bytes,1,rep,name=offers,proto3" json:"offers,omitempty"` // The returned list of user's open offers.
}

func (x *GetMyOffersReply) Reset() {
	*x = GetMyOffersReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMyOffersReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMyOffersReply) ProtoMessage() {}

func (x *GetMyOffersReply) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMyOffersReply.ProtoReflect.Descriptor instead.
func (*GetMyOffersReply) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{17}
}

func (x *GetMyOffersReply) GetOffers() []*OfferInfo {
	if x != nil {
		return x.Offers
	}
	return nil
}

type GetMyBsqSwapOffersReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BsqSwapOffers []*OfferInfo `protobuf:"bytes,1,rep,name=bsq_swap_offers,json=bsqSwapOffers,proto3" json:"bsq_swap_offers,omitempty"` // The returned list of user's open BSQ swap offers.
}

func (x *GetMyBsqSwapOffersReply) Reset() {
	*x = GetMyBsqSwapOffersReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMyBsqSwapOffersReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMyBsqSwapOffersReply) ProtoMessage() {}

func (x *GetMyBsqSwapOffersReply) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMyBsqSwapOffersReply.ProtoReflect.Descriptor instead.
func (*GetMyBsqSwapOffersReply) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{18}
}

func (x *GetMyBsqSwapOffersReply) GetBsqSwapOffers() []*OfferInfo {
	if x != nil {
		return x.BsqSwapOffers
	}
	return nil
}

type CreateBsqSwapOfferRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The new BSQ swap offer's BUY (BTC) or SELL (BTC) direction.
	Direction string `protobuf:"bytes,1,opt,name=direction,proto3" json:"direction,omitempty"`
	// The amount of BTC to be traded as a long representing satoshi units.
	Amount uint64 `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
	// The minimum amount of BTC to be traded as a long representing satoshi units.
	MinAmount uint64 `protobuf:"varint,3,opt,name=min_amount,json=minAmount,proto3" json:"min_amount,omitempty"`
	// The fixed price of the offer as a string representing BTC units, e.g., "0.00005" or "0.00005000".
	Price string `protobuf:"bytes,4,opt,name=price,proto3" json:"price,omitempty"`
}

func (x *CreateBsqSwapOfferRequest) Reset() {
	*x = CreateBsqSwapOfferRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBsqSwapOfferRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBsqSwapOfferRequest) ProtoMessage() {}

func (x *CreateBsqSwapOfferRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBsqSwapOfferRequest.ProtoReflect.Descriptor instead.
func (*CreateBsqSwapOfferRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{19}
}

func (x *CreateBsqSwapOfferRequest) GetDirection() string {
	if x != nil {
		return x.Direction
	}
	return ""
}

func (x *CreateBsqSwapOfferRequest) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *CreateBsqSwapOfferRequest) GetMinAmount() uint64 {
	if x != nil {
		return x.MinAmount
	}
	return 0
}

func (x *CreateBsqSwapOfferRequest) GetPrice() string {
	if x != nil {
		return x.Price
	}
	return ""
}

type CreateBsqSwapOfferReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BsqSwapOffer *OfferInfo `protobuf:"bytes,1,opt,name=bsq_swap_offer,json=bsqSwapOffer,proto3" json:"bsq_swap_offer,omitempty"` // The newly created BSQ swap offer.
}

func (x *CreateBsqSwapOfferReply) Reset() {
	*x = CreateBsqSwapOfferReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBsqSwapOfferReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBsqSwapOfferReply) ProtoMessage() {}

func (x *CreateBsqSwapOfferReply) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBsqSwapOfferReply.ProtoReflect.Descriptor instead.
func (*CreateBsqSwapOfferReply) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{20}
}

func (x *CreateBsqSwapOfferReply) GetBsqSwapOffer() *OfferInfo {
	if x != nil {
		return x.BsqSwapOffer
	}
	return nil
}

type CreateOfferRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The new offer's fiat or altcoin currency code.
	CurrencyCode string `protobuf:"bytes,1,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"`
	// The new v1 protocol offer's BUY (BTC) or SELL (BTC) direction.
	Direction string `protobuf:"bytes,2,opt,name=direction,proto3" json:"direction,omitempty"`
	// For fiat offers:  a string representing the rounded, fixed fiat price of the offer, e.g., "45000", not "45000".
	// For altcoin offers:  a string representing the fixed BTC price of the offer, e.g., "0.00005".
	Price string `protobuf:"bytes,3,opt,name=price,proto3" json:"price,omitempty"`
	// Whether the offer price is fixed, or market price margin based.
	UseMarketBasedPrice bool `protobuf:"varint,4,opt,name=use_market_based_price,json=useMarketBasedPrice,proto3" json:"use_market_based_price,omitempty"`
	// The offer's market price margin as a percentage above or below the current market BTC price, e.g., 2.50 represents 2.5%.
	MarketPriceMarginPct float64 `protobuf:"fixed64,5,opt,name=market_price_margin_pct,json=marketPriceMarginPct,proto3" json:"market_price_margin_pct,omitempty"`
	// The amount of BTC to be traded, in satoshis.
	Amount uint64 `protobuf:"varint,6,opt,name=amount,proto3" json:"amount,omitempty"`
	// The minimum amount of BTC to be traded, in satoshis.
	MinAmount uint64 `protobuf:"varint,7,opt,name=min_amount,json=minAmount,proto3" json:"min_amount,omitempty"`
	// A BUY BTC offer maker's security deposit as a percentage of the BTC amount to be traded, e.g., 15.00 represents 15%.
	BuyerSecurityDepositPct float64 `protobuf:"fixed64,8,opt,name=buyer_security_deposit_pct,json=buyerSecurityDepositPct,proto3" json:"buyer_security_deposit_pct,omitempty"`
	// A market price margin based offer's trigger price is the market BTC price at which the offer is automatically disabled.
	// Disabled offers are never automatically enabled, they must be manually re-enabled.
	// A zero value indicates trigger price is not set.  Trigger price does not apply to fixed price offers.
	TriggerPrice string `protobuf:"bytes,9,opt,name=trigger_price,json=triggerPrice,proto3" json:"trigger_price,omitempty"`
	// The unique identifier of the payment account used to create the new offer, and send or receive trade payment.
	PaymentAccountId string `protobuf:"bytes,10,opt,name=payment_account_id,json=paymentAccountId,proto3" json:"payment_account_id,omitempty"`
	// The offer maker's trade fee currency:  BTC or BSQ.
	MakerFeeCurrencyCode string `protobuf:"bytes,11,opt,name=maker_fee_currency_code,json=makerFeeCurrencyCode,proto3" json:"maker_fee_currency_code,omitempty"`
}

func (x *CreateOfferRequest) Reset() {
	*x = CreateOfferRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOfferRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOfferRequest) ProtoMessage() {}

func (x *CreateOfferRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOfferRequest.ProtoReflect.Descriptor instead.
func (*CreateOfferRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{21}
}

func (x *CreateOfferRequest) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *CreateOfferRequest) GetDirection() string {
	if x != nil {
		return x.Direction
	}
	return ""
}

func (x *CreateOfferRequest) GetPrice() string {
	if x != nil {
		return x.Price
	}
	return ""
}

func (x *CreateOfferRequest) GetUseMarketBasedPrice() bool {
	if x != nil {
		return x.UseMarketBasedPrice
	}
	return false
}

func (x *CreateOfferRequest) GetMarketPriceMarginPct() float64 {
	if x != nil {
		return x.MarketPriceMarginPct
	}
	return 0
}

func (x *CreateOfferRequest) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *CreateOfferRequest) GetMinAmount() uint64 {
	if x != nil {
		return x.MinAmount
	}
	return 0
}

func (x *CreateOfferRequest) GetBuyerSecurityDepositPct() float64 {
	if x != nil {
		return x.BuyerSecurityDepositPct
	}
	return 0
}

func (x *CreateOfferRequest) GetTriggerPrice() string {
	if x != nil {
		return x.TriggerPrice
	}
	return ""
}

func (x *CreateOfferRequest) GetPaymentAccountId() string {
	if x != nil {
		return x.PaymentAccountId
	}
	return ""
}

func (x *CreateOfferRequest) GetMakerFeeCurrencyCode() string {
	if x != nil {
		return x.MakerFeeCurrencyCode
	}
	return ""
}

type CreateOfferReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Offer *OfferInfo `protobuf:"bytes,1,opt,name=offer,proto3" json:"offer,omitempty"` // The newly created v1 protocol offer.
}

func (x *CreateOfferReply) Reset() {
	*x = CreateOfferReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOfferReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOfferReply) ProtoMessage() {}

func (x *CreateOfferReply) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOfferReply.ProtoReflect.Descriptor instead.
func (*CreateOfferReply) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{22}
}

func (x *CreateOfferReply) GetOffer() *OfferInfo {
	if x != nil {
		return x.Offer
	}
	return nil
}

type EditOfferRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The edited offer's unique identifier.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// For fiat offers:  a string representing the new rounded, fixed fiat price of the offer, e.g., "45000", not "45000".
	// For altcoin offers:  a string representing the new fixed BTC price of the offer, e.g., "0.00005".
	Price string `protobuf:"bytes,2,opt,name=price,proto3" json:"price,omitempty"`
	// Whether the offer price is fixed, or market price margin based.
	UseMarketBasedPrice bool `protobuf:"varint,3,opt,name=use_market_based_price,json=useMarketBasedPrice,proto3" json:"use_market_based_price,omitempty"`
	// An offer's new market price margin as a percentage above or below the current market BTC price.
	MarketPriceMarginPct float64 `protobuf:"fixed64,4,opt,name=market_price_margin_pct,json=marketPriceMarginPct,proto3" json:"market_price_margin_pct,omitempty"`
	// A market price margin based offer's trigger price is the market BTC price at which the offer is automatically disabled.
	// Disabled offers are never automatically enabled, they must be manually re-enabled.
	// A zero value indicates trigger price is not set.  Trigger price does not apply to fixed price offers.
	TriggerPrice string `protobuf:"bytes,5,opt,name=trigger_price,json=triggerPrice,proto3" json:"trigger_price,omitempty"`
	// Whether the offer's activation state should be changed (disable or enable), or left alone.
	// Send a signed int, not a bool (with default=false).
	//      -1 = do not change activation state
	//      0 = disable
	//      1 = enable
	Enable int32 `protobuf:"zigzag32,6,opt,name=enable,proto3" json:"enable,omitempty"`
	// Tell the daemon precisely what is being edited.
	EditType EditOfferRequest_EditType `protobuf:"varint,7,opt,name=edit_type,json=editType,proto3,enum=io.bisq.protobuffer.EditOfferRequest_EditType" json:"edit_type,omitempty"`
}

func (x *EditOfferRequest) Reset() {
	*x = EditOfferRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EditOfferRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EditOfferRequest) ProtoMessage() {}

func (x *EditOfferRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EditOfferRequest.ProtoReflect.Descriptor instead.
func (*EditOfferRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{23}
}

func (x *EditOfferRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EditOfferRequest) GetPrice() string {
	if x != nil {
		return x.Price
	}
	return ""
}

func (x *EditOfferRequest) GetUseMarketBasedPrice() bool {
	if x != nil {
		return x.UseMarketBasedPrice
	}
	return false
}

func (x *EditOfferRequest) GetMarketPriceMarginPct() float64 {
	if x != nil {
		return x.MarketPriceMarginPct
	}
	return 0
}

func (x *EditOfferRequest) GetTriggerPrice() string {
	if x != nil {
		return x.TriggerPrice
	}
	return ""
}

func (x *EditOfferRequest) GetEnable() int32 {
	if x != nil {
		return x.Enable
	}
	return 0
}

func (x *EditOfferRequest) GetEditType() EditOfferRequest_EditType {
	if x != nil {
		return x.EditType
	}
	return EditOfferRequest_ACTIVATION_STATE_ONLY
}

type EditOfferReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EditOfferReply) Reset() {
	*x = EditOfferReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EditOfferReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EditOfferReply) ProtoMessage() {}

func (x *EditOfferReply) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EditOfferReply.ProtoReflect.Descriptor instead.
func (*EditOfferReply) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{24}
}

type CancelOfferRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` // The canceled offer's unique identifier.
}

func (x *CancelOfferRequest) Reset() {
	*x = CancelOfferRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelOfferRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelOfferRequest) ProtoMessage() {}

func (x *CancelOfferRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelOfferRequest.ProtoReflect.Descriptor instead.
func (*CancelOfferRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{25}
}

func (x *CancelOfferRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type CancelOfferReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CancelOfferReply) Reset() {
	*x = CancelOfferReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelOfferReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelOfferReply) ProtoMessage() {}

func (x *CancelOfferReply) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelOfferReply.ProtoReflect.Descriptor instead.
func (*CancelOfferReply) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{26}
}

// OfferInfo describes an offer to a client.  It is derived from the heavier
// Offer object in the daemon, which holds too much state to be sent to clients.
type OfferInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The offer's unique identifier.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The offer's BUY (BTC) or SELL (BTC) direction.
	Direction string `protobuf:"bytes,2,opt,name=direction,proto3" json:"direction,omitempty"`
	// For fiat offers:  the fiat price for 1 BTC to 4 decimal places, e.g., 45000 EUR is "45000.0000".
	// For altcoin offers:  the altcoin price for 1 BTC to 8 decimal places, e.g., 0.00005 BTC is "0.00005000".
	Price string `protobuf:"bytes,3,opt,name=price,proto3" json:"price,omitempty"`
	// Whether the offer price is fixed, or market price margin based.
	UseMarketBasedPrice bool `protobuf:"varint,4,opt,name=use_market_based_price,json=useMarketBasedPrice,proto3" json:"use_market_based_price,omitempty"`
	// The offer's market price margin above or below the current market BTC price, e.g., 5.00 represents 5%.
	MarketPriceMarginPct float64 `protobuf:"fixed64,5,opt,name=market_price_margin_pct,json=marketPriceMarginPct,proto3" json:"market_price_margin_pct,omitempty"`
	// The offer's BTC amount in satoshis.  Ten million satoshis is represented as 10000000.
	Amount uint64 `protobuf:"varint,6,opt,name=amount,proto3" json:"amount,omitempty"`
	// The offer's minimum BTC amount in satoshis.  One million satoshis is represented as 1000000.
	MinAmount uint64 `protobuf:"varint,7,opt,name=min_amount,json=minAmount,proto3" json:"min_amount,omitempty"`
	// The rounded volume of currency to be traded for BTC.
	// Fiat volume is rounded to whole currency units (no cents).  Altcoin volume is rounded to 2 decimal places.
	Volume string `protobuf:"bytes,8,opt,name=volume,proto3" json:"volume,omitempty"`
	// The rounded, minimum volume of currency to be traded for BTC.
	// Fiat volume is rounded to whole currency units (no cents).  Altcoin volume is rounded to 2 decimal places.
	MinVolume string `protobuf:"bytes,9,opt,name=min_volume,json=minVolume,proto3" json:"min_volume,omitempty"`
	// A long representing the BTC buyer's security deposit in satoshis.
	BuyerSecurityDeposit uint64 `protobuf:"varint,10,opt,name=buyer_security_deposit,json=buyerSecurityDeposit,proto3" json:"buyer_security_deposit,omitempty"`
	// A market price margin based offer's trigger price is the market BTC price at which the offer is automatically disabled.
	// Disabled offers are never automatically enabled, they must be manually re-enabled.
	// A zero value indicates trigger price is not set.  Trigger price does not apply to fixed price offers.
	TriggerPrice string `protobuf:"bytes,11,opt,name=trigger_price,json=triggerPrice,proto3" json:"trigger_price,omitempty"`
	// Whether the offer maker paid the trading fee in BTC or not (BSQ).
	IsCurrencyForMakerFeeBtc bool `protobuf:"varint,12,opt,name=is_currency_for_maker_fee_btc,json=isCurrencyForMakerFeeBtc,proto3" json:"is_currency_for_maker_fee_btc,omitempty"`
	// The unique identifier of the payment account used to create the offer.
	PaymentAccountId string `protobuf:"bytes,13,opt,name=payment_account_id,json=paymentAccountId,proto3" json:"payment_account_id,omitempty"`
	// The unique identifier of the payment method used to create the offer.
	PaymentMethodId string `protobuf:"bytes,14,opt,name=payment_method_id,json=paymentMethodId,proto3" json:"payment_method_id,omitempty"`
	// The short description of the payment method used to create the offer.
	PaymentMethodShortName string `protobuf:"bytes,15,opt,name=payment_method_short_name,json=paymentMethodShortName,proto3" json:"payment_method_short_name,omitempty"`
	// For fiat offers, the baseCurrencyCode is BTC, and the counter_currency_code is the fiat currency code.
	// For altcoin offers it is the opposite, the baseCurrencyCode is the altcoin code and the counter_currency_code is BTC.
	BaseCurrencyCode string `protobuf:"bytes,16,opt,name=base_currency_code,json=baseCurrencyCode,proto3" json:"base_currency_code,omitempty"`
	// For fiat offers, the base_currency_code is BTC, and the counter_currency_code is the fiat currency code.
	// For altcoin offers it is the opposite, the base_currency_code is the altcoin code and the counter_currency_code is BTC.
	CounterCurrencyCode string `protobuf:"bytes,17,opt,name=counter_currency_code,json=counterCurrencyCode,proto3" json:"counter_currency_code,omitempty"`
	// The creation date of the offer as a long: the number of milliseconds that have elapsed since January 1, 1970.
	Date uint64 `protobuf:"varint,18,opt,name=date,proto3" json:"date,omitempty"`
	// The internal state of the offer, e.g., AVAILABLE, NOT_AVAILABLE, REMOVED, etc.
	State string `protobuf:"bytes,19,opt,name=state,proto3" json:"state,omitempty"`
	// A long representing the BTC seller's security deposit in satoshis.
	SellerSecurityDeposit uint64 `protobuf:"varint,20,opt,name=seller_security_deposit,json=sellerSecurityDeposit,proto3" json:"seller_security_deposit,omitempty"`
	// The bitcoin transaction id of the offer maker's fee payment.
	OfferFeePaymentTxId string `protobuf:"bytes,21,opt,name=offer_fee_payment_tx_id,json=offerFeePaymentTxId,proto3" json:"offer_fee_payment_tx_id,omitempty"`
	// The bitcoin transaction fee (amount) for the offer maker's fee payment transaction, in satoshis.
	TxFee uint64 `protobuf:"varint,22,opt,name=tx_fee,json=txFee,proto3" json:"tx_fee,omitempty"`
	// The offer maker's Bisq trade fee amount in satoshis.
	MakerFee uint64 `protobuf:"varint,23,opt,name=maker_fee,json=makerFee,proto3" json:"maker_fee,omitempty"`
	// Whether the offer is currently enabled or not.
	IsActivated bool `protobuf:"varint,24,opt,name=is_activated,json=isActivated,proto3" json:"is_activated,omitempty"`
	// Whether the offer was created by the user or not.
	IsMyOffer bool `protobuf:"varint,25,opt,name=is_my_offer,json=isMyOffer,proto3" json:"is_my_offer,omitempty"`
	// Whether the newly created offer was created by the user or not.
	IsMyPendingOffer bool `protobuf:"varint,26,opt,name=is_my_pending_offer,json=isMyPendingOffer,proto3" json:"is_my_pending_offer,omitempty"`
	// Whether the offer is a BSQ swap offer or not (v1 protocol offer).
	IsBsqSwapOffer bool `protobuf:"varint,27,opt,name=is_bsq_swap_offer,json=isBsqSwapOffer,proto3" json:"is_bsq_swap_offer,omitempty"`
	// The offer creator's Tor onion address.
	OwnerNodeAddress string `protobuf:"bytes,28,opt,name=owner_node_address,json=ownerNodeAddress,proto3" json:"owner_node_address,omitempty"`
	// The offer creator's public key ring as a string.
	PubKeyRing string `protobuf:"bytes,29,opt,name=pub_key_ring,json=pubKeyRing,proto3" json:"pub_key_ring,omitempty"`
	// The Bisq software version used to create the offer.
	VersionNr string `protobuf:"bytes,30,opt,name=version_nr,json=versionNr,proto3" json:"version_nr,omitempty"`
	// The bitcoin protocol version used to create the offer.
	ProtocolVersion int32 `protobuf:"varint,31,opt,name=protocol_version,json=protocolVersion,proto3" json:"protocol_version,omitempty"`
}

func (x *OfferInfo) Reset() {
	*x = OfferInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OfferInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OfferInfo) ProtoMessage() {}

func (x *OfferInfo) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OfferInfo.ProtoReflect.Descriptor instead.
func (*OfferInfo) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{27}
}

func (x *OfferInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *OfferInfo) GetDirection() string {
	if x != nil {
		return x.Direction
	}
	return ""
}

func (x *OfferInfo) GetPrice() string {
	if x != nil {
		return x.Price
	}
	return ""
}

func (x *OfferInfo) GetUseMarketBasedPrice() bool {
	if x != nil {
		return x.UseMarketBasedPrice
	}
	return false
}

func (x *OfferInfo) GetMarketPriceMarginPct() float64 {
	if x != nil {
		return x.MarketPriceMarginPct
	}
	return 0
}

func (x *OfferInfo) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *OfferInfo) GetMinAmount() uint64 {
	if x != nil {
		return x.MinAmount
	}
	return 0
}

func (x *OfferInfo) GetVolume() string {
	if x != nil {
		return x.Volume
	}
	return ""
}

func (x *OfferInfo) GetMinVolume() string {
	if x != nil {
		return x.MinVolume
	}
	return ""
}

func (x *OfferInfo) GetBuyerSecurityDeposit() uint64 {
	if x != nil {
		return x.BuyerSecurityDeposit
	}
	return 0
}

func (x *OfferInfo) GetTriggerPrice() string {
	if x != nil {
		return x.TriggerPrice
	}
	return ""
}

func (x *OfferInfo) GetIsCurrencyForMakerFeeBtc() bool {
	if x != nil {
		return x.IsCurrencyForMakerFeeBtc
	}
	return false
}

func (x *OfferInfo) GetPaymentAccountId() string {
	if x != nil {
		return x.PaymentAccountId
	}
	return ""
}

func (x *OfferInfo) GetPaymentMethodId() string {
	if x != nil {
		return x.PaymentMethodId
	}
	return ""
}

func (x *OfferInfo) GetPaymentMethodShortName() string {
	if x != nil {
		return x.PaymentMethodShortName
	}
	return ""
}

func (x *OfferInfo) GetBaseCurrencyCode() string {
	if x != nil {
		return x.BaseCurrencyCode
	}
	return ""
}

func (x *OfferInfo) GetCounterCurrencyCode() string {
	if x != nil {
		return x.CounterCurrencyCode
	}
	return ""
}

func (x *OfferInfo) GetDate() uint64 {
	if x != nil {
		return x.Date
	}
	return 0
}

func (x *OfferInfo) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *OfferInfo) GetSellerSecurityDeposit() uint64 {
	if x != nil {
		return x.SellerSecurityDeposit
	}
	return 0
}

func (x *OfferInfo) GetOfferFeePaymentTxId() string {
	if x != nil {
		return x.OfferFeePaymentTxId
	}
	return ""
}

func (x *OfferInfo) GetTxFee() uint64 {
	if x != nil {
		return x.TxFee
	}
	return 0
}

func (x *OfferInfo) GetMakerFee() uint64 {
	if x != nil {
		return x.MakerFee
	}
	return 0
}

func (x *OfferInfo) GetIsActivated() bool {
	if x != nil {
		return x.IsActivated
	}
	return false
}

func (x *OfferInfo) GetIsMyOffer() bool {
	if x != nil {
		return x.IsMyOffer
	}
	return false
}

func (x *OfferInfo) GetIsMyPendingOffer() bool {
	if x != nil {
		return x.IsMyPendingOffer
	}
	return false
}

func (x *OfferInfo) GetIsBsqSwapOffer() bool {
	if x != nil {
		return x.IsBsqSwapOffer
	}
	return false
}

func (x *OfferInfo) GetOwnerNodeAddress() string {
	if x != nil {
		return x.OwnerNodeAddress
	}
	return ""
}

func (x *OfferInfo) GetPubKeyRing() string {
	if x != nil {
		return x.PubKeyRing
	}
	return ""
}

func (x *OfferInfo) GetVersionNr() string {
	if x != nil {
		return x.VersionNr
	}
	return ""
}

func (x *OfferInfo) GetProtocolVersion() int32 {
	if x != nil {
		return x.ProtocolVersion
	}
	return 0
}

// An offer's current availability status.
type AvailabilityResultWithDescription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// An offer's current status as an eum.
	AvailabilityResult AvailabilityResult `protobuf:"varint,1,opt,name=availability_result,json=availabilityResult,proto3,enum=io.bisq.protobuffer.AvailabilityResult" json:"availability_result,omitempty"`
	// A user friendly description of an offer's current availability status.
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *AvailabilityResultWithDescription) Reset() {
	*x = AvailabilityResultWithDescription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AvailabilityResultWithDescription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvailabilityResultWithDescription) ProtoMessage() {}

func (x *AvailabilityResultWithDescription) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvailabilityResultWithDescription.ProtoReflect.Descriptor instead.
func (*AvailabilityResultWithDescription) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{28}
}

func (x *AvailabilityResultWithDescription) GetAvailabilityResult() AvailabilityResult {
	if x != nil {
		return x.AvailabilityResult
	}
	return AvailabilityResult_PB_ERROR
}

func (x *AvailabilityResultWithDescription) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type CreatePaymentAccountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PaymentAccountForm string `protobuf:"bytes,1,opt,name=payment_account_form,json=paymentAccountForm,proto3" json:"payment_account_form,omitempty"` // File path of filled json payment account form.
}

func (x *CreatePaymentAccountRequest) Reset() {
	*x = CreatePaymentAccountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePaymentAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePaymentAccountRequest) ProtoMessage() {}

func (x *CreatePaymentAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePaymentAccountRequest.ProtoReflect.Descriptor instead.
func (*CreatePaymentAccountRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{29}
}

func (x *CreatePaymentAccountRequest) GetPaymentAccountForm() string {
	if x != nil {
		return x.PaymentAccountForm
	}
	return ""
}

type CreatePaymentAccountReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PaymentAccount *PaymentAccount `protobuf:"bytes,1,opt,name=payment_account,json=paymentAccount,proto3" json:"payment_account,omitempty"` // The new payment account.
}

func (x *CreatePaymentAccountReply) Reset() {
	*x = CreatePaymentAccountReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePaymentAccountReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePaymentAccountReply) ProtoMessage() {}

func (x *CreatePaymentAccountReply) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePaymentAccountReply.ProtoReflect.Descriptor instead.
func (*CreatePaymentAccountReply) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{30}
}

func (x *CreatePaymentAccountReply) GetPaymentAccount() *PaymentAccount {
	if x != nil {
		return x.PaymentAccount
	}
	return nil
}

type GetPaymentAccountsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetPaymentAccountsRequest) Reset() {
	*x = GetPaymentAccountsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPaymentAccountsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPaymentAccountsRequest) ProtoMessage() {}

func (x *GetPaymentAccountsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPaymentAccountsRequest.ProtoReflect.Descriptor instead.
func (*GetPaymentAccountsRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{31}
}

type GetPaymentAccountsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PaymentAccounts []*PaymentAccount `protobuf:"bytes,1,rep,name=payment_accounts,json=paymentAccounts,proto3" json:"payment_accounts,omitempty"` // All user's saved payment accounts.
}

func (x *GetPaymentAccountsReply) Reset() {
	*x = GetPaymentAccountsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPaymentAccountsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPaymentAccountsReply) ProtoMessage() {}

func (x *GetPaymentAccountsReply) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPaymentAccountsReply.ProtoReflect.Descriptor instead.
func (*GetPaymentAccountsReply) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{32}
}

func (x *GetPaymentAccountsReply) GetPaymentAccounts() []*PaymentAccount {
	if x != nil {
		return x.PaymentAccounts
	}
	return nil
}

type GetPaymentMethodsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetPaymentMethodsRequest) Reset() {
	*x = GetPaymentMethodsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPaymentMethodsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPaymentMethodsRequest) ProtoMessage() {}

func (x *GetPaymentMethodsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPaymentMethodsRequest.ProtoReflect.Descriptor instead.
func (*GetPaymentMethodsRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{33}
}

type GetPaymentMethodsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PaymentMethods []*PaymentMethod `protobuf:"bytes,1,rep,name=payment_methods,json=paymentMethods,proto3" json:"payment_methods,omitempty"` // Ids of all supported Bisq fiat payment methods.
}

func (x *GetPaymentMethodsReply) Reset() {
	*x = GetPaymentMethodsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPaymentMethodsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPaymentMethodsReply) ProtoMessage() {}

func (x *GetPaymentMethodsReply) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPaymentMethodsReply.ProtoReflect.Descriptor instead.
func (*GetPaymentMethodsReply) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{34}
}

func (x *GetPaymentMethodsReply) GetPaymentMethods() []*PaymentMethod {
	if x != nil {
		return x.PaymentMethods
	}
	return nil
}

type GetPaymentAccountFormRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PaymentMethodId string `protobuf:"bytes,1,opt,name=payment_method_id,json=paymentMethodId,proto3" json:"payment_method_id,omitempty"` // Payment method id determining content of the requested payment account form.
}

func (x *GetPaymentAccountFormRequest) Reset() {
	*x = GetPaymentAccountFormRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPaymentAccountFormRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPaymentAccountFormRequest) ProtoMessage() {}

func (x *GetPaymentAccountFormRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPaymentAccountFormRequest.ProtoReflect.Descriptor instead.
func (*GetPaymentAccountFormRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{35}
}

func (x *GetPaymentAccountFormRequest) GetPaymentMethodId() string {
	if x != nil {
		return x.PaymentMethodId
	}
	return ""
}

type GetPaymentAccountFormReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// An empty payment account json form to be filled out and passed to rpc method CreatePaymentAccount.
	PaymentAccountFormJson string `protobuf:"bytes,1,opt,name=payment_account_form_json,json=paymentAccountFormJson,proto3" json:"payment_account_form_json,omitempty"`
}

func (x *GetPaymentAccountFormReply) Reset() {
	*x = GetPaymentAccountFormReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPaymentAccountFormReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPaymentAccountFormReply) ProtoMessage() {}

func (x *GetPaymentAccountFormReply) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPaymentAccountFormReply.ProtoReflect.Descriptor instead.
func (*GetPaymentAccountFormReply) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{36}
}

func (x *GetPaymentAccountFormReply) GetPaymentAccountFormJson() string {
	if x != nil {
		return x.PaymentAccountFormJson
	}
	return ""
}

type CreateCryptoCurrencyPaymentAccountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountName  string `protobuf:"bytes,1,opt,name=account_name,json=accountName,proto3" json:"account_name,omitempty"`     // The name of the altcoin payment account.  Uniqueness is not enforced.
	CurrencyCode string `protobuf:"bytes,2,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"`  // The altcoin currency code.
	Address      string `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`                                // The altcoin receiving address.
	TradeInstant bool   `protobuf:"varint,4,opt,name=trade_instant,json=tradeInstant,proto3" json:"trade_instant,omitempty"` // Whether the altcoin payment account is an instant account or not.
}

func (x *CreateCryptoCurrencyPaymentAccountRequest) Reset() {
	*x = CreateCryptoCurrencyPaymentAccountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCryptoCurrencyPaymentAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCryptoCurrencyPaymentAccountRequest) ProtoMessage() {}

func (x *CreateCryptoCurrencyPaymentAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCryptoCurrencyPaymentAccountRequest.ProtoReflect.Descriptor instead.
func (*CreateCryptoCurrencyPaymentAccountRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{37}
}

func (x *CreateCryptoCurrencyPaymentAccountRequest) GetAccountName() string {
	if x != nil {
		return x.AccountName
	}
	return ""
}

func (x *CreateCryptoCurrencyPaymentAccountRequest) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *CreateCryptoCurrencyPaymentAccountRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *CreateCryptoCurrencyPaymentAccountRequest) GetTradeInstant() bool {
	if x != nil {
		return x.TradeInstant
	}
	return false
}

type CreateCryptoCurrencyPaymentAccountReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PaymentAccount *PaymentAccount `protobuf:"bytes,1,opt,name=payment_account,json=paymentAccount,proto3" json:"payment_account,omitempty"` // The new altcoin payment account.
}

func (x *CreateCryptoCurrencyPaymentAccountReply) Reset() {
	*x = CreateCryptoCurrencyPaymentAccountReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCryptoCurrencyPaymentAccountReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCryptoCurrencyPaymentAccountReply) ProtoMessage() {}

func (x *CreateCryptoCurrencyPaymentAccountReply) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCryptoCurrencyPaymentAccountReply.ProtoReflect.Descriptor instead.
func (*CreateCryptoCurrencyPaymentAccountReply) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{38}
}

func (x *CreateCryptoCurrencyPaymentAccountReply) GetPaymentAccount() *PaymentAccount {
	if x != nil {
		return x.PaymentAccount
	}
	return nil
}

type GetCryptoCurrencyPaymentMethodsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetCryptoCurrencyPaymentMethodsRequest) Reset() {
	*x = GetCryptoCurrencyPaymentMethodsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCryptoCurrencyPaymentMethodsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCryptoCurrencyPaymentMethodsRequest) ProtoMessage() {}

func (x *GetCryptoCurrencyPaymentMethodsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCryptoCurrencyPaymentMethodsRequest.ProtoReflect.Descriptor instead.
func (*GetCryptoCurrencyPaymentMethodsRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{39}
}

type GetCryptoCurrencyPaymentMethodsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PaymentMethods []*PaymentMethod `protobuf:"bytes,1,rep,name=payment_methods,json=paymentMethods,proto3" json:"payment_methods,omitempty"` // Ids of all supported Bisq altcoin payment methods.
}

func (x *GetCryptoCurrencyPaymentMethodsReply) Reset() {
	*x = GetCryptoCurrencyPaymentMethodsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCryptoCurrencyPaymentMethodsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCryptoCurrencyPaymentMethodsReply) ProtoMessage() {}

func (x *GetCryptoCurrencyPaymentMethodsReply) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCryptoCurrencyPaymentMethodsReply.ProtoReflect.Descriptor instead.
func (*GetCryptoCurrencyPaymentMethodsReply) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{40}
}

func (x *GetCryptoCurrencyPaymentMethodsReply) GetPaymentMethods() []*PaymentMethod {
	if x != nil {
		return x.PaymentMethods
	}
	return nil
}

type MarketPriceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrencyCode string `protobuf:"bytes,1,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"` // The three letter currency code.
}

func (x *MarketPriceRequest) Reset() {
	*x = MarketPriceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketPriceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketPriceRequest) ProtoMessage() {}

func (x *MarketPriceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketPriceRequest.ProtoReflect.Descriptor instead.
func (*MarketPriceRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{41}
}

func (x *MarketPriceRequest) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

type MarketPriceReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Price float64 `protobuf:"fixed64,1,opt,name=price,proto3" json:"price,omitempty"` // The most recently available market price.
}

func (x *MarketPriceReply) Reset() {
	*x = MarketPriceReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketPriceReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketPriceReply) ProtoMessage() {}

func (x *MarketPriceReply) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketPriceReply.ProtoReflect.Descriptor instead.
func (*MarketPriceReply) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{42}
}

func (x *MarketPriceReply) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

type StopRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StopRequest) Reset() {
	*x = StopRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopRequest) ProtoMessage() {}

func (x *StopRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopRequest.ProtoReflect.Descriptor instead.
func (*StopRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{43}
}

type StopReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StopReply) Reset() {
	*x = StopReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopReply) ProtoMessage() {}

func (x *StopReply) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopReply.ProtoReflect.Descriptor instead.
func (*StopReply) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{44}
}

type TakeOfferRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OfferId              string `protobuf:"bytes,1,opt,name=offer_id,json=offerId,proto3" json:"offer_id,omitempty"`                                            // The unique identifier of the offer being taken.
	PaymentAccountId     string `protobuf:"bytes,2,opt,name=payment_account_id,json=paymentAccountId,proto3" json:"payment_account_id,omitempty"`               // The unique identifier of the payment account used to take offer..
	TakerFeeCurrencyCode string `protobuf:"bytes,3,opt,name=taker_fee_currency_code,json=takerFeeCurrencyCode,proto3" json:"taker_fee_currency_code,omitempty"` // The code of the currency (BSQ or BTC) used to pay the taker's Bisq trade fee.
}

func (x *TakeOfferRequest) Reset() {
	*x = TakeOfferRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TakeOfferRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TakeOfferRequest) ProtoMessage() {}

func (x *TakeOfferRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TakeOfferRequest.ProtoReflect.Descriptor instead.
func (*TakeOfferRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{45}
}

func (x *TakeOfferRequest) GetOfferId() string {
	if x != nil {
		return x.OfferId
	}
	return ""
}

func (x *TakeOfferRequest) GetPaymentAccountId() string {
	if x != nil {
		return x.PaymentAccountId
	}
	return ""
}

func (x *TakeOfferRequest) GetTakerFeeCurrencyCode() string {
	if x != nil {
		return x.TakerFeeCurrencyCode
	}
	return ""
}

type TakeOfferReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Trade         *TradeInfo                         `protobuf:"bytes,1,opt,name=trade,proto3" json:"trade,omitempty"`                                      // The new trade.
	FailureReason *AvailabilityResultWithDescription `protobuf:"bytes,2,opt,name=failure_reason,json=failureReason,proto3" json:"failure_reason,omitempty"` // The reason the offer could not be taken.
}

func (x *TakeOfferReply) Reset() {
	*x = TakeOfferReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TakeOfferReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TakeOfferReply) ProtoMessage() {}

func (x *TakeOfferReply) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TakeOfferReply.ProtoReflect.Descriptor instead.
func (*TakeOfferReply) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{46}
}

func (x *TakeOfferReply) GetTrade() *TradeInfo {
	if x != nil {
		return x.Trade
	}
	return nil
}

func (x *TakeOfferReply) GetFailureReason() *AvailabilityResultWithDescription {
	if x != nil {
		return x.FailureReason
	}
	return nil
}

type ConfirmPaymentStartedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeId string `protobuf:"bytes,1,opt,name=trade_id,json=tradeId,proto3" json:"trade_id,omitempty"` // The unique identifier of the open trade.
}

func (x *ConfirmPaymentStartedRequest) Reset() {
	*x = ConfirmPaymentStartedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfirmPaymentStartedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfirmPaymentStartedRequest) ProtoMessage() {}

func (x *ConfirmPaymentStartedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfirmPaymentStartedRequest.ProtoReflect.Descriptor instead.
func (*ConfirmPaymentStartedRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{47}
}

func (x *ConfirmPaymentStartedRequest) GetTradeId() string {
	if x != nil {
		return x.TradeId
	}
	return ""
}

type ConfirmPaymentStartedReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ConfirmPaymentStartedReply) Reset() {
	*x = ConfirmPaymentStartedReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfirmPaymentStartedReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfirmPaymentStartedReply) ProtoMessage() {}

func (x *ConfirmPaymentStartedReply) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfirmPaymentStartedReply.ProtoReflect.Descriptor instead.
func (*ConfirmPaymentStartedReply) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{48}
}

type ConfirmPaymentReceivedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeId string `protobuf:"bytes,1,opt,name=trade_id,json=tradeId,proto3" json:"trade_id,omitempty"` // The unique identifier of the open trade.
}

func (x *ConfirmPaymentReceivedRequest) Reset() {
	*x = ConfirmPaymentReceivedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfirmPaymentReceivedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfirmPaymentReceivedRequest) ProtoMessage() {}

func (x *ConfirmPaymentReceivedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfirmPaymentReceivedRequest.ProtoReflect.Descriptor instead.
func (*ConfirmPaymentReceivedRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{49}
}

func (x *ConfirmPaymentReceivedRequest) GetTradeId() string {
	if x != nil {
		return x.TradeId
	}
	return ""
}

type ConfirmPaymentReceivedReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ConfirmPaymentReceivedReply) Reset() {
	*x = ConfirmPaymentReceivedReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfirmPaymentReceivedReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfirmPaymentReceivedReply) ProtoMessage() {}

func (x *ConfirmPaymentReceivedReply) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfirmPaymentReceivedReply.ProtoReflect.Descriptor instead.
func (*ConfirmPaymentReceivedReply) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{50}
}

type GetTradeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeId string `protobuf:"bytes,1,opt,name=trade_id,json=tradeId,proto3" json:"trade_id,omitempty"` // The unique identifier of the trade.
}

func (x *GetTradeRequest) Reset() {
	*x = GetTradeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTradeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTradeRequest) ProtoMessage() {}

func (x *GetTradeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTradeRequest.ProtoReflect.Descriptor instead.
func (*GetTradeRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{51}
}

func (x *GetTradeRequest) GetTradeId() string {
	if x != nil {
		return x.TradeId
	}
	return ""
}

type GetTradeReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Trade *TradeInfo `protobuf:"bytes,1,opt,name=trade,proto3" json:"trade,omitempty"` // The unique identifier of the trade.
}

func (x *GetTradeReply) Reset() {
	*x = GetTradeReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTradeReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTradeReply) ProtoMessage() {}

func (x *GetTradeReply) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTradeReply.ProtoReflect.Descriptor instead.
func (*GetTradeReply) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{52}
}

func (x *GetTradeReply) GetTrade() *TradeInfo {
	if x != nil {
		return x.Trade
	}
	return nil
}

type GetTradesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Category GetTradesRequest_Category `protobuf:"varint,1,opt,name=category,proto3,enum=io.bisq.protobuffer.GetTradesRequest_Category" json:"category,omitempty"`
}

func (x *GetTradesRequest) Reset() {
	*x = GetTradesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTradesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTradesRequest) ProtoMessage() {}

func (x *GetTradesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTradesRequest.ProtoReflect.Descriptor instead.
func (*GetTradesRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{53}
}

func (x *GetTradesRequest) GetCategory() GetTradesRequest_Category {
	if x != nil {
		return x.Category
	}
	return GetTradesRequest_OPEN
}

type GetTradesReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Trades []*TradeInfo `protobuf:"bytes,1,rep,name=trades,proto3" json:"trades,omitempty"` // All trades for GetTradesRequest.Category.
}

func (x *GetTradesReply) Reset() {
	*x = GetTradesReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTradesReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTradesReply) ProtoMessage() {}

func (x *GetTradesReply) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTradesReply.ProtoReflect.Descriptor instead.
func (*GetTradesReply) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{54}
}

func (x *GetTradesReply) GetTrades() []*TradeInfo {
	if x != nil {
		return x.Trades
	}
	return nil
}

type CloseTradeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeId string `protobuf:"bytes,1,opt,name=trade_id,json=tradeId,proto3" json:"trade_id,omitempty"` // The unique identifier of the trade.
}

func (x *CloseTradeRequest) Reset() {
	*x = CloseTradeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloseTradeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloseTradeRequest) ProtoMessage() {}

func (x *CloseTradeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloseTradeRequest.ProtoReflect.Descriptor instead.
func (*CloseTradeRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{55}
}

func (x *CloseTradeRequest) GetTradeId() string {
	if x != nil {
		return x.TradeId
	}
	return ""
}

type CloseTradeReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CloseTradeReply) Reset() {
	*x = CloseTradeReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloseTradeReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloseTradeReply) ProtoMessage() {}

func (x *CloseTradeReply) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloseTradeReply.ProtoReflect.Descriptor instead.
func (*CloseTradeReply) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{56}
}

type FailTradeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeId string `protobuf:"bytes,1,opt,name=trade_id,json=tradeId,proto3" json:"trade_id,omitempty"` // The unique identifier of the trade.
}

func (x *FailTradeRequest) Reset() {
	*x = FailTradeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FailTradeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FailTradeRequest) ProtoMessage() {}

func (x *FailTradeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FailTradeRequest.ProtoReflect.Descriptor instead.
func (*FailTradeRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{57}
}

func (x *FailTradeRequest) GetTradeId() string {
	if x != nil {
		return x.TradeId
	}
	return ""
}

type FailTradeReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FailTradeReply) Reset() {
	*x = FailTradeReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FailTradeReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FailTradeReply) ProtoMessage() {}

func (x *FailTradeReply) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FailTradeReply.ProtoReflect.Descriptor instead.
func (*FailTradeReply) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{58}
}

type UnFailTradeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeId string `protobuf:"bytes,1,opt,name=trade_id,json=tradeId,proto3" json:"trade_id,omitempty"` // The unique identifier of the trade.
}

func (x *UnFailTradeRequest) Reset() {
	*x = UnFailTradeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnFailTradeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnFailTradeRequest) ProtoMessage() {}

func (x *UnFailTradeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnFailTradeRequest.ProtoReflect.Descriptor instead.
func (*UnFailTradeRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{59}
}

func (x *UnFailTradeRequest) GetTradeId() string {
	if x != nil {
		return x.TradeId
	}
	return ""
}

type UnFailTradeReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UnFailTradeReply) Reset() {
	*x = UnFailTradeReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnFailTradeReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnFailTradeReply) ProtoMessage() {}

func (x *UnFailTradeReply) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnFailTradeReply.ProtoReflect.Descriptor instead.
func (*UnFailTradeReply) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{60}
}

type WithdrawFundsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeId string `protobuf:"bytes,1,opt,name=trade_id,json=tradeId,proto3" json:"trade_id,omitempty"` // The unique identifier of the trade.
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`                // The receiver's bitcoin wallet address.
	Memo    string `protobuf:"bytes,3,opt,name=memo,proto3" json:"memo,omitempty"`                      // An optional memo saved with the sent btc transaction.
}

func (x *WithdrawFundsRequest) Reset() {
	*x = WithdrawFundsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WithdrawFundsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithdrawFundsRequest) ProtoMessage() {}

func (x *WithdrawFundsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithdrawFundsRequest.ProtoReflect.Descriptor instead.
func (*WithdrawFundsRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{61}
}

func (x *WithdrawFundsRequest) GetTradeId() string {
	if x != nil {
		return x.TradeId
	}
	return ""
}

func (x *WithdrawFundsRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *WithdrawFundsRequest) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

type WithdrawFundsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *WithdrawFundsReply) Reset() {
	*x = WithdrawFundsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WithdrawFundsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithdrawFundsReply) ProtoMessage() {}

func (x *WithdrawFundsReply) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithdrawFundsReply.ProtoReflect.Descriptor instead.
func (*WithdrawFundsReply) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{62}
}

// TODO Modify bisq-grpc-api-doc to include core Trade enums in API Reference.
type TradeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The original offer.
	Offer *OfferInfo `protobuf:"bytes,1,opt,name=offer,proto3" json:"offer,omitempty"`
	// The unique identifier of the trade.
	TradeId string `protobuf:"bytes,2,opt,name=trade_id,json=tradeId,proto3" json:"trade_id,omitempty"`
	// An abbreviation of unique identifier of the trade.  It cannot be used as parameter to rpc methods GetTrade,
	// ConfirmPaymentStarted, CloseTrade, etc., but it may be useful while interacting with support or trading peers.
	ShortId string `protobuf:"bytes,3,opt,name=short_id,json=shortId,proto3" json:"short_id,omitempty"`
	// The creation date of the trade as a long: the number of milliseconds that have elapsed since January 1, 1970.
	Date uint64 `protobuf:"varint,4,opt,name=date,proto3" json:"date,omitempty"`
	// A brief description of the user's role in the trade, i.e., an offer maker or taker, a BTC buyer or seller.
	Role string `protobuf:"bytes,5,opt,name=role,proto3" json:"role,omitempty"`
	// Whether the offer taker's Bisq trade fee was paid in BTC or not (BSQ).
	IsCurrencyForTakerFeeBtc bool `protobuf:"varint,6,opt,name=is_currency_for_taker_fee_btc,json=isCurrencyForTakerFeeBtc,proto3" json:"is_currency_for_taker_fee_btc,omitempty"`
	// The bitcoin miner transaction fee in satoshis.
	TxFeeAsLong uint64 `protobuf:"varint,7,opt,name=tx_fee_as_long,json=txFeeAsLong,proto3" json:"tx_fee_as_long,omitempty"`
	// The offer taker's Bisq trade fee in satoshis.
	TakerFeeAsLong uint64 `protobuf:"varint,8,opt,name=taker_fee_as_long,json=takerFeeAsLong,proto3" json:"taker_fee_as_long,omitempty"`
	// The bitcoin transaction id for offer taker's Bisq trade fee.
	TakerFeeTxId string `protobuf:"bytes,9,opt,name=taker_fee_tx_id,json=takerFeeTxId,proto3" json:"taker_fee_tx_id,omitempty"`
	// The bitcoin transaction id for the offer taker's security deposit.
	DepositTxId string `protobuf:"bytes,10,opt,name=deposit_tx_id,json=depositTxId,proto3" json:"deposit_tx_id,omitempty"`
	// The bitcoin transaction id for trade payout.
	PayoutTxId string `protobuf:"bytes,11,opt,name=payout_tx_id,json=payoutTxId,proto3" json:"payout_tx_id,omitempty"`
	// The trade payout amount in satoshis.
	TradeAmountAsLong uint64 `protobuf:"varint,12,opt,name=trade_amount_as_long,json=tradeAmountAsLong,proto3" json:"trade_amount_as_long,omitempty"`
	// For fiat trades:  the fiat price for 1 BTC to 4 decimal places, e.g., 41000.50 EUR is "41000.5000".
	// For altcoin trades:  the altcoin price for 1 BTC to 8 decimal places, e.g., 0.5 BTC is "0.50000000".
	TradePrice string `protobuf:"bytes,13,opt,name=trade_price,json=tradePrice,proto3" json:"trade_price,omitempty"`
	// The trading peer's node address.
	TradingPeerNodeAddress string `protobuf:"bytes,14,opt,name=trading_peer_node_address,json=tradingPeerNodeAddress,proto3" json:"trading_peer_node_address,omitempty"`
	// The internal state of the trade. (TODO bisq-grpc-api-doc -> include Trade.State in API Reference.)
	State string `protobuf:"bytes,15,opt,name=state,proto3" json:"state,omitempty"`
	// The internal phase of the trade. (TODO bisq-grpc-api-doc -> include Trade.Phase in API Reference.)
	Phase string `protobuf:"bytes,16,opt,name=phase,proto3" json:"phase,omitempty"`
	// How much of the trade protocol's time limit has elapsed. (TODO bisq-grpc-api-doc -> include Trade.TradePeriodState in API Reference.)
	TradePeriodState string `protobuf:"bytes,17,opt,name=trade_period_state,json=tradePeriodState,proto3" json:"trade_period_state,omitempty"`
	// Whether the trade's security deposit bitcoin transaction has been broadcast, or not.
	IsDepositPublished bool `protobuf:"varint,18,opt,name=is_deposit_published,json=isDepositPublished,proto3" json:"is_deposit_published,omitempty"`
	// Whether the trade's security deposit bitcoin transaction has been confirmed at least once, or not.
	IsDepositConfirmed bool `protobuf:"varint,19,opt,name=is_deposit_confirmed,json=isDepositConfirmed,proto3" json:"is_deposit_confirmed,omitempty"`
	// Whether the trade's 'start payment' message has been sent by the BTC buyer, or not.
	IsPaymentStartedMessageSent bool `protobuf:"varint,20,opt,name=is_payment_started_message_sent,json=isPaymentStartedMessageSent,proto3" json:"is_payment_started_message_sent,omitempty"`
	// Whether the trade's 'payment received' message has been sent by the BTC seller, or not.
	IsPaymentReceivedMessageSent bool `protobuf:"varint,21,opt,name=is_payment_received_message_sent,json=isPaymentReceivedMessageSent,proto3" json:"is_payment_received_message_sent,omitempty"`
	// Whether the trade's payout bitcoin transaction has been confirmed at least once, or not.
	IsPayoutPublished bool `protobuf:"varint,22,opt,name=is_payout_published,json=isPayoutPublished,proto3" json:"is_payout_published,omitempty"`
	// Whether the trade's payout has been completed and the trade is now closed, or not.
	IsCompleted bool `protobuf:"varint,23,opt,name=is_completed,json=isCompleted,proto3" json:"is_completed,omitempty"`
	// The entire trade contract as a json string.
	ContractAsJson string `protobuf:"bytes,24,opt,name=contract_as_json,json=contractAsJson,proto3" json:"contract_as_json,omitempty"`
	// The summary of the trade contract.
	Contract *ContractInfo `protobuf:"bytes,25,opt,name=contract,proto3" json:"contract,omitempty"`
	// The volume of currency traded for BTC.
	TradeVolume string `protobuf:"bytes,26,opt,name=trade_volume,json=tradeVolume,proto3" json:"trade_volume,omitempty"`
	// The details specific to the BSQ swap trade.  If the trade is not a BSQ swap, this field should be ignored.
	BsqSwapTradeInfo *BsqSwapTradeInfo `protobuf:"bytes,28,opt,name=bsq_swap_trade_info,json=bsqSwapTradeInfo,proto3" json:"bsq_swap_trade_info,omitempty"`
	// Needed by open/closed/failed trade list items.
	ClosingStatus string `protobuf:"bytes,29,opt,name=closing_status,json=closingStatus,proto3" json:"closing_status,omitempty"`
}

func (x *TradeInfo) Reset() {
	*x = TradeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeInfo) ProtoMessage() {}

func (x *TradeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeInfo.ProtoReflect.Descriptor instead.
func (*TradeInfo) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{63}
}

func (x *TradeInfo) GetOffer() *OfferInfo {
	if x != nil {
		return x.Offer
	}
	return nil
}

func (x *TradeInfo) GetTradeId() string {
	if x != nil {
		return x.TradeId
	}
	return ""
}

func (x *TradeInfo) GetShortId() string {
	if x != nil {
		return x.ShortId
	}
	return ""
}

func (x *TradeInfo) GetDate() uint64 {
	if x != nil {
		return x.Date
	}
	return 0
}

func (x *TradeInfo) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

func (x *TradeInfo) GetIsCurrencyForTakerFeeBtc() bool {
	if x != nil {
		return x.IsCurrencyForTakerFeeBtc
	}
	return false
}

func (x *TradeInfo) GetTxFeeAsLong() uint64 {
	if x != nil {
		return x.TxFeeAsLong
	}
	return 0
}

func (x *TradeInfo) GetTakerFeeAsLong() uint64 {
	if x != nil {
		return x.TakerFeeAsLong
	}
	return 0
}

func (x *TradeInfo) GetTakerFeeTxId() string {
	if x != nil {
		return x.TakerFeeTxId
	}
	return ""
}

func (x *TradeInfo) GetDepositTxId() string {
	if x != nil {
		return x.DepositTxId
	}
	return ""
}

func (x *TradeInfo) GetPayoutTxId() string {
	if x != nil {
		return x.PayoutTxId
	}
	return ""
}

func (x *TradeInfo) GetTradeAmountAsLong() uint64 {
	if x != nil {
		return x.TradeAmountAsLong
	}
	return 0
}

func (x *TradeInfo) GetTradePrice() string {
	if x != nil {
		return x.TradePrice
	}
	return ""
}

func (x *TradeInfo) GetTradingPeerNodeAddress() string {
	if x != nil {
		return x.TradingPeerNodeAddress
	}
	return ""
}

func (x *TradeInfo) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *TradeInfo) GetPhase() string {
	if x != nil {
		return x.Phase
	}
	return ""
}

func (x *TradeInfo) GetTradePeriodState() string {
	if x != nil {
		return x.TradePeriodState
	}
	return ""
}

func (x *TradeInfo) GetIsDepositPublished() bool {
	if x != nil {
		return x.IsDepositPublished
	}
	return false
}

func (x *TradeInfo) GetIsDepositConfirmed() bool {
	if x != nil {
		return x.IsDepositConfirmed
	}
	return false
}

func (x *TradeInfo) GetIsPaymentStartedMessageSent() bool {
	if x != nil {
		return x.IsPaymentStartedMessageSent
	}
	return false
}

func (x *TradeInfo) GetIsPaymentReceivedMessageSent() bool {
	if x != nil {
		return x.IsPaymentReceivedMessageSent
	}
	return false
}

func (x *TradeInfo) GetIsPayoutPublished() bool {
	if x != nil {
		return x.IsPayoutPublished
	}
	return false
}

func (x *TradeInfo) GetIsCompleted() bool {
	if x != nil {
		return x.IsCompleted
	}
	return false
}

func (x *TradeInfo) GetContractAsJson() string {
	if x != nil {
		return x.ContractAsJson
	}
	return ""
}

func (x *TradeInfo) GetContract() *ContractInfo {
	if x != nil {
		return x.Contract
	}
	return nil
}

func (x *TradeInfo) GetTradeVolume() string {
	if x != nil {
		return x.TradeVolume
	}
	return ""
}

func (x *TradeInfo) GetBsqSwapTradeInfo() *BsqSwapTradeInfo {
	if x != nil {
		return x.BsqSwapTradeInfo
	}
	return nil
}

func (x *TradeInfo) GetClosingStatus() string {
	if x != nil {
		return x.ClosingStatus
	}
	return ""
}

type ContractInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BuyerNodeAddress           string                     `protobuf:"bytes,1,opt,name=buyer_node_address,json=buyerNodeAddress,proto3" json:"buyer_node_address,omitempty"`                                      // The BTC buyer peer's node address.
	SellerNodeAddress          string                     `protobuf:"bytes,2,opt,name=seller_node_address,json=sellerNodeAddress,proto3" json:"seller_node_address,omitempty"`                                   // The BTC seller peer's node address.
	MediatorNodeAddress        string                     `protobuf:"bytes,3,opt,name=mediator_node_address,json=mediatorNodeAddress,proto3" json:"mediator_node_address,omitempty"`                             // If the trade was disputed, the Bisq mediator's node address.
	RefundAgentNodeAddress     string                     `protobuf:"bytes,4,opt,name=refund_agent_node_address,json=refundAgentNodeAddress,proto3" json:"refund_agent_node_address,omitempty"`                  // If a trade refund was requested, the Bisq refund agent's node address.
	IsBuyerMakerAndSellerTaker bool                       `protobuf:"varint,5,opt,name=is_buyer_maker_and_seller_taker,json=isBuyerMakerAndSellerTaker,proto3" json:"is_buyer_maker_and_seller_taker,omitempty"` // Whether the BTC buyer created the original offer, or not.
	MakerAccountId             string                     `protobuf:"bytes,6,opt,name=maker_account_id,json=makerAccountId,proto3" json:"maker_account_id,omitempty"`                                            // The offer maker's payment account id.
	TakerAccountId             string                     `protobuf:"bytes,7,opt,name=taker_account_id,json=takerAccountId,proto3" json:"taker_account_id,omitempty"`                                            // The offer taker's payment account id.
	MakerPaymentAccountPayload *PaymentAccountPayloadInfo `protobuf:"bytes,8,opt,name=maker_payment_account_payload,json=makerPaymentAccountPayload,proto3" json:"maker_payment_account_payload,omitempty"`      // A summary of the offer maker's payment account.
	TakerPaymentAccountPayload *PaymentAccountPayloadInfo `protobuf:"bytes,9,opt,name=taker_payment_account_payload,json=takerPaymentAccountPayload,proto3" json:"taker_payment_account_payload,omitempty"`      // A summary of the offer taker's payment account.
	MakerPayoutAddressString   string                     `protobuf:"bytes,10,opt,name=maker_payout_address_string,json=makerPayoutAddressString,proto3" json:"maker_payout_address_string,omitempty"`           // The offer maker's BTC payout address.
	TakerPayoutAddressString   string                     `protobuf:"bytes,11,opt,name=taker_payout_address_string,json=takerPayoutAddressString,proto3" json:"taker_payout_address_string,omitempty"`           // The offer taker's BTC payout address.
	LockTime                   uint64                     `protobuf:"varint,12,opt,name=lock_time,json=lockTime,proto3" json:"lock_time,omitempty"`                                                              // The earliest time a transaction can be added to the block chain.
}

func (x *ContractInfo) Reset() {
	*x = ContractInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContractInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractInfo) ProtoMessage() {}

func (x *ContractInfo) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractInfo.ProtoReflect.Descriptor instead.
func (*ContractInfo) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{64}
}

func (x *ContractInfo) GetBuyerNodeAddress() string {
	if x != nil {
		return x.BuyerNodeAddress
	}
	return ""
}

func (x *ContractInfo) GetSellerNodeAddress() string {
	if x != nil {
		return x.SellerNodeAddress
	}
	return ""
}

func (x *ContractInfo) GetMediatorNodeAddress() string {
	if x != nil {
		return x.MediatorNodeAddress
	}
	return ""
}

func (x *ContractInfo) GetRefundAgentNodeAddress() string {
	if x != nil {
		return x.RefundAgentNodeAddress
	}
	return ""
}

func (x *ContractInfo) GetIsBuyerMakerAndSellerTaker() bool {
	if x != nil {
		return x.IsBuyerMakerAndSellerTaker
	}
	return false
}

func (x *ContractInfo) GetMakerAccountId() string {
	if x != nil {
		return x.MakerAccountId
	}
	return ""
}

func (x *ContractInfo) GetTakerAccountId() string {
	if x != nil {
		return x.TakerAccountId
	}
	return ""
}

func (x *ContractInfo) GetMakerPaymentAccountPayload() *PaymentAccountPayloadInfo {
	if x != nil {
		return x.MakerPaymentAccountPayload
	}
	return nil
}

func (x *ContractInfo) GetTakerPaymentAccountPayload() *PaymentAccountPayloadInfo {
	if x != nil {
		return x.TakerPaymentAccountPayload
	}
	return nil
}

func (x *ContractInfo) GetMakerPayoutAddressString() string {
	if x != nil {
		return x.MakerPayoutAddressString
	}
	return ""
}

func (x *ContractInfo) GetTakerPayoutAddressString() string {
	if x != nil {
		return x.TakerPayoutAddressString
	}
	return ""
}

func (x *ContractInfo) GetLockTime() uint64 {
	if x != nil {
		return x.LockTime
	}
	return 0
}

//
// BSQ Swap protocol specific fields not common to Bisq v1 trade protocol fields.
type BsqSwapTradeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxId             string `protobuf:"bytes,1,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`                                          // The BSQ swap's bitcoin transaction id.
	BsqTradeAmount   uint64 `protobuf:"varint,2,opt,name=bsq_trade_amount,json=bsqTradeAmount,proto3" json:"bsq_trade_amount,omitempty"`         // The amount of BSQ swapped in satoshis.
	BtcTradeAmount   uint64 `protobuf:"varint,3,opt,name=btc_trade_amount,json=btcTradeAmount,proto3" json:"btc_trade_amount,omitempty"`         // The amount of BTC swapped in satoshis.
	BsqMakerTradeFee uint64 `protobuf:"varint,4,opt,name=bsq_maker_trade_fee,json=bsqMakerTradeFee,proto3" json:"bsq_maker_trade_fee,omitempty"` // The swap offer maker's BSQ trade fee.
	BsqTakerTradeFee uint64 `protobuf:"varint,5,opt,name=bsq_taker_trade_fee,json=bsqTakerTradeFee,proto3" json:"bsq_taker_trade_fee,omitempty"` // The swap offer taker's BSQ trade fee.
	TxFeePerVbyte    uint64 `protobuf:"varint,6,opt,name=tx_fee_per_vbyte,json=txFeePerVbyte,proto3" json:"tx_fee_per_vbyte,omitempty"`          // The swap transaction's bitcoin transaction id.
	MakerBsqAddress  string `protobuf:"bytes,7,opt,name=maker_bsq_address,json=makerBsqAddress,proto3" json:"maker_bsq_address,omitempty"`       // The swap offer maker's BSQ wallet address.
	MakerBtcAddress  string `protobuf:"bytes,8,opt,name=maker_btc_address,json=makerBtcAddress,proto3" json:"maker_btc_address,omitempty"`       // The swap offer maker's BTC wallet address.
	TakerBsqAddress  string `protobuf:"bytes,9,opt,name=taker_bsq_address,json=takerBsqAddress,proto3" json:"taker_bsq_address,omitempty"`       // The swap offer taker's BSQ wallet address.
	TakerBtcAddress  string `protobuf:"bytes,10,opt,name=taker_btc_address,json=takerBtcAddress,proto3" json:"taker_btc_address,omitempty"`      // The swap offer taker's BTC wallet address.
	NumConfirmations uint64 `protobuf:"varint,11,opt,name=num_confirmations,json=numConfirmations,proto3" json:"num_confirmations,omitempty"`    // The confirmations count for the completed swap's bitcoin transaction.
	ErrorMessage     string `protobuf:"bytes,12,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`                 // An explanation for a failure to complete the swap.
	Payout           uint64 `protobuf:"varint,13,opt,name=payout,proto3" json:"payout,omitempty"`                                                // The amount of the user's trade payout in satoshis.
	SwapPeerPayout   uint64 `protobuf:"varint,14,opt,name=swap_peer_payout,json=swapPeerPayout,proto3" json:"swap_peer_payout,omitempty"`        // The amount of the peer's trade payout in satoshis.
}

func (x *BsqSwapTradeInfo) Reset() {
	*x = BsqSwapTradeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BsqSwapTradeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BsqSwapTradeInfo) ProtoMessage() {}

func (x *BsqSwapTradeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BsqSwapTradeInfo.ProtoReflect.Descriptor instead.
func (*BsqSwapTradeInfo) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{65}
}

func (x *BsqSwapTradeInfo) GetTxId() string {
	if x != nil {
		return x.TxId
	}
	return ""
}

func (x *BsqSwapTradeInfo) GetBsqTradeAmount() uint64 {
	if x != nil {
		return x.BsqTradeAmount
	}
	return 0
}

func (x *BsqSwapTradeInfo) GetBtcTradeAmount() uint64 {
	if x != nil {
		return x.BtcTradeAmount
	}
	return 0
}

func (x *BsqSwapTradeInfo) GetBsqMakerTradeFee() uint64 {
	if x != nil {
		return x.BsqMakerTradeFee
	}
	return 0
}

func (x *BsqSwapTradeInfo) GetBsqTakerTradeFee() uint64 {
	if x != nil {
		return x.BsqTakerTradeFee
	}
	return 0
}

func (x *BsqSwapTradeInfo) GetTxFeePerVbyte() uint64 {
	if x != nil {
		return x.TxFeePerVbyte
	}
	return 0
}

func (x *BsqSwapTradeInfo) GetMakerBsqAddress() string {
	if x != nil {
		return x.MakerBsqAddress
	}
	return ""
}

func (x *BsqSwapTradeInfo) GetMakerBtcAddress() string {
	if x != nil {
		return x.MakerBtcAddress
	}
	return ""
}

func (x *BsqSwapTradeInfo) GetTakerBsqAddress() string {
	if x != nil {
		return x.TakerBsqAddress
	}
	return ""
}

func (x *BsqSwapTradeInfo) GetTakerBtcAddress() string {
	if x != nil {
		return x.TakerBtcAddress
	}
	return ""
}

func (x *BsqSwapTradeInfo) GetNumConfirmations() uint64 {
	if x != nil {
		return x.NumConfirmations
	}
	return 0
}

func (x *BsqSwapTradeInfo) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *BsqSwapTradeInfo) GetPayout() uint64 {
	if x != nil {
		return x.Payout
	}
	return 0
}

func (x *BsqSwapTradeInfo) GetSwapPeerPayout() uint64 {
	if x != nil {
		return x.SwapPeerPayout
	}
	return 0
}

type PaymentAccountPayloadInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                                    // The unique identifier of the payment account.
	PaymentMethodId string `protobuf:"bytes,2,opt,name=payment_method_id,json=paymentMethodId,proto3" json:"payment_method_id,omitempty"` // The unique identifier of the payment method.
	Address         string `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`                                          // The optional altcoin wallet address associated with the (altcoin) payment account.
	PaymentDetails  string `protobuf:"bytes,4,opt,name=payment_details,json=paymentDetails,proto3" json:"payment_details,omitempty"`      // The optional payment details, if available.
}

func (x *PaymentAccountPayloadInfo) Reset() {
	*x = PaymentAccountPayloadInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentAccountPayloadInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentAccountPayloadInfo) ProtoMessage() {}

func (x *PaymentAccountPayloadInfo) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentAccountPayloadInfo.ProtoReflect.Descriptor instead.
func (*PaymentAccountPayloadInfo) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{66}
}

func (x *PaymentAccountPayloadInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PaymentAccountPayloadInfo) GetPaymentMethodId() string {
	if x != nil {
		return x.PaymentMethodId
	}
	return ""
}

func (x *PaymentAccountPayloadInfo) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *PaymentAccountPayloadInfo) GetPaymentDetails() string {
	if x != nil {
		return x.PaymentDetails
	}
	return ""
}

type TxFeeRateInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UseCustomTxFeeRate bool   `protobuf:"varint,1,opt,name=use_custom_tx_fee_rate,json=useCustomTxFeeRate,proto3" json:"use_custom_tx_fee_rate,omitempty"` // Whether the daemon's custom btc transaction fee rate preference is set, or not.
	CustomTxFeeRate    uint64 `protobuf:"varint,2,opt,name=custom_tx_fee_rate,json=customTxFeeRate,proto3" json:"custom_tx_fee_rate,omitempty"`            // The daemon's custom btc transaction fee rate preference, in sats/byte.
	FeeServiceRate     uint64 `protobuf:"varint,3,opt,name=fee_service_rate,json=feeServiceRate,proto3" json:"fee_service_rate,omitempty"`                 // The Bisq network's most recently available btc transaction fee rate, in sats/byte.
	// The date of the most recent Bisq network fee rate request as a long: the number of milliseconds that have elapsed since January 1, 1970.
	LastFeeServiceRequestTs uint64 `protobuf:"varint,4,opt,name=last_fee_service_request_ts,json=lastFeeServiceRequestTs,proto3" json:"last_fee_service_request_ts,omitempty"`
	MinFeeServiceRate       uint64 `protobuf:"varint,5,opt,name=min_fee_service_rate,json=minFeeServiceRate,proto3" json:"min_fee_service_rate,omitempty"` // The Bisq network's minimum btc transaction fee rate, in sats/byte.
}

func (x *TxFeeRateInfo) Reset() {
	*x = TxFeeRateInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxFeeRateInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxFeeRateInfo) ProtoMessage() {}

func (x *TxFeeRateInfo) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxFeeRateInfo.ProtoReflect.Descriptor instead.
func (*TxFeeRateInfo) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{67}
}

func (x *TxFeeRateInfo) GetUseCustomTxFeeRate() bool {
	if x != nil {
		return x.UseCustomTxFeeRate
	}
	return false
}

func (x *TxFeeRateInfo) GetCustomTxFeeRate() uint64 {
	if x != nil {
		return x.CustomTxFeeRate
	}
	return 0
}

func (x *TxFeeRateInfo) GetFeeServiceRate() uint64 {
	if x != nil {
		return x.FeeServiceRate
	}
	return 0
}

func (x *TxFeeRateInfo) GetLastFeeServiceRequestTs() uint64 {
	if x != nil {
		return x.LastFeeServiceRequestTs
	}
	return 0
}

func (x *TxFeeRateInfo) GetMinFeeServiceRate() uint64 {
	if x != nil {
		return x.MinFeeServiceRate
	}
	return 0
}

type TxInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxId      string `protobuf:"bytes,1,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`                 // The bitcoin transaction id.
	InputSum  uint64 `protobuf:"varint,2,opt,name=input_sum,json=inputSum,proto3" json:"input_sum,omitempty"`    // The sum of the bitcoin transaction's input values in satoshis.
	OutputSum uint64 `protobuf:"varint,3,opt,name=output_sum,json=outputSum,proto3" json:"output_sum,omitempty"` // The sum of the bitcoin transaction's output values in satoshis.
	Fee       uint64 `protobuf:"varint,4,opt,name=fee,proto3" json:"fee,omitempty"`                              // The bitcoin transaction's miner fee in satoshis.
	Size      int32  `protobuf:"varint,5,opt,name=size,proto3" json:"size,omitempty"`                            // The bitcoin transaction's size in bytes.
	IsPending bool   `protobuf:"varint,6,opt,name=is_pending,json=isPending,proto3" json:"is_pending,omitempty"` // Whether the bitcoin transaction has been confirmed at least one time, or not.
	Memo      string `protobuf:"bytes,7,opt,name=memo,proto3" json:"memo,omitempty"`                             // An optional memo associated with the bitcoin transaction.
}

func (x *TxInfo) Reset() {
	*x = TxInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxInfo) ProtoMessage() {}

func (x *TxInfo) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxInfo.ProtoReflect.Descriptor instead.
func (*TxInfo) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{68}
}

func (x *TxInfo) GetTxId() string {
	if x != nil {
		return x.TxId
	}
	return ""
}

func (x *TxInfo) GetInputSum() uint64 {
	if x != nil {
		return x.InputSum
	}
	return 0
}

func (x *TxInfo) GetOutputSum() uint64 {
	if x != nil {
		return x.OutputSum
	}
	return 0
}

func (x *TxInfo) GetFee() uint64 {
	if x != nil {
		return x.Fee
	}
	return 0
}

func (x *TxInfo) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *TxInfo) GetIsPending() bool {
	if x != nil {
		return x.IsPending
	}
	return false
}

func (x *TxInfo) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

type GetBalancesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrencyCode string `protobuf:"bytes,1,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"` // The Bisq wallet currency (BSQ or BTC) for the balances request.
}

func (x *GetBalancesRequest) Reset() {
	*x = GetBalancesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBalancesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBalancesRequest) ProtoMessage() {}

func (x *GetBalancesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBalancesRequest.ProtoReflect.Descriptor instead.
func (*GetBalancesRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{69}
}

func (x *GetBalancesRequest) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

type GetBalancesReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Balances *BalancesInfo `protobuf:"bytes,1,opt,name=balances,proto3" json:"balances,omitempty"` // The summary of Bisq wallet's BSQ and BTC balances.
}

func (x *GetBalancesReply) Reset() {
	*x = GetBalancesReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBalancesReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBalancesReply) ProtoMessage() {}

func (x *GetBalancesReply) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBalancesReply.ProtoReflect.Descriptor instead.
func (*GetBalancesReply) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{70}
}

func (x *GetBalancesReply) GetBalances() *BalancesInfo {
	if x != nil {
		return x.Balances
	}
	return nil
}

type GetAddressBalanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"` // The BTC wallet address being queried.
}

func (x *GetAddressBalanceRequest) Reset() {
	*x = GetAddressBalanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAddressBalanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAddressBalanceRequest) ProtoMessage() {}

func (x *GetAddressBalanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAddressBalanceRequest.ProtoReflect.Descriptor instead.
func (*GetAddressBalanceRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{71}
}

func (x *GetAddressBalanceRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type GetAddressBalanceReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AddressBalanceInfo *AddressBalanceInfo `protobuf:"bytes,1,opt,name=address_balance_info,json=addressBalanceInfo,proto3" json:"address_balance_info,omitempty"` // The BTC wallet address with its balance summary.
}

func (x *GetAddressBalanceReply) Reset() {
	*x = GetAddressBalanceReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAddressBalanceReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAddressBalanceReply) ProtoMessage() {}

func (x *GetAddressBalanceReply) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAddressBalanceReply.ProtoReflect.Descriptor instead.
func (*GetAddressBalanceReply) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{72}
}

func (x *GetAddressBalanceReply) GetAddressBalanceInfo() *AddressBalanceInfo {
	if x != nil {
		return x.AddressBalanceInfo
	}
	return nil
}

type GetUnusedBsqAddressRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetUnusedBsqAddressRequest) Reset() {
	*x = GetUnusedBsqAddressRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUnusedBsqAddressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUnusedBsqAddressRequest) ProtoMessage() {}

func (x *GetUnusedBsqAddressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUnusedBsqAddressRequest.ProtoReflect.Descriptor instead.
func (*GetUnusedBsqAddressRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{73}
}

type GetUnusedBsqAddressReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"` // The BSQ wallet's unused address.
}

func (x *GetUnusedBsqAddressReply) Reset() {
	*x = GetUnusedBsqAddressReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUnusedBsqAddressReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUnusedBsqAddressReply) ProtoMessage() {}

func (x *GetUnusedBsqAddressReply) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUnusedBsqAddressReply.ProtoReflect.Descriptor instead.
func (*GetUnusedBsqAddressReply) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{74}
}

func (x *GetUnusedBsqAddressReply) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type SendBsqRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The external BSQ wallet address.
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// The amount being sent to the external BSQ wallet address, as a string in "#######,##" format.
	Amount string `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
	// An optional bitcoin miner transaction fee rate, in sats/byte.  If not defined, Bisq will revert
	// to the custom transaction fee rate preference, if set, else the common Bisq network fee rate.
	TxFeeRate string `protobuf:"bytes,3,opt,name=tx_fee_rate,json=txFeeRate,proto3" json:"tx_fee_rate,omitempty"`
}

func (x *SendBsqRequest) Reset() {
	*x = SendBsqRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendBsqRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendBsqRequest) ProtoMessage() {}

func (x *SendBsqRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendBsqRequest.ProtoReflect.Descriptor instead.
func (*SendBsqRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{75}
}

func (x *SendBsqRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *SendBsqRequest) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *SendBsqRequest) GetTxFeeRate() string {
	if x != nil {
		return x.TxFeeRate
	}
	return ""
}

type SendBsqReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The summary of a bitcoin transaction.  (BSQ is a colored coin, and transacted on the bitcoin blockchain.)
	TxInfo *TxInfo `protobuf:"bytes,1,opt,name=tx_info,json=txInfo,proto3" json:"tx_info,omitempty"`
}

func (x *SendBsqReply) Reset() {
	*x = SendBsqReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendBsqReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendBsqReply) ProtoMessage() {}

func (x *SendBsqReply) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendBsqReply.ProtoReflect.Descriptor instead.
func (*SendBsqReply) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{76}
}

func (x *SendBsqReply) GetTxInfo() *TxInfo {
	if x != nil {
		return x.TxInfo
	}
	return nil
}

type SendBtcRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The external bitcoin address.
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// The amount of BTC to send to the external address, as a string in "##.########" (BTC unit) format.
	Amount string `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
	// An optional bitcoin miner transaction fee rate, in sats/byte.  If not defined, Bisq will revert
	// to the custom transaction fee rate preference, if set, else the common Bisq network fee rate.
	TxFeeRate string `protobuf:"bytes,3,opt,name=tx_fee_rate,json=txFeeRate,proto3" json:"tx_fee_rate,omitempty"`
	// An optional memo associated with the bitcoin transaction.
	Memo string `protobuf:"bytes,4,opt,name=memo,proto3" json:"memo,omitempty"`
}

func (x *SendBtcRequest) Reset() {
	*x = SendBtcRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendBtcRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendBtcRequest) ProtoMessage() {}

func (x *SendBtcRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendBtcRequest.ProtoReflect.Descriptor instead.
func (*SendBtcRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{77}
}

func (x *SendBtcRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *SendBtcRequest) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *SendBtcRequest) GetTxFeeRate() string {
	if x != nil {
		return x.TxFeeRate
	}
	return ""
}

func (x *SendBtcRequest) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

type SendBtcReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxInfo *TxInfo `protobuf:"bytes,1,opt,name=tx_info,json=txInfo,proto3" json:"tx_info,omitempty"` // The summary of a bitcoin transaction.
}

func (x *SendBtcReply) Reset() {
	*x = SendBtcReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendBtcReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendBtcReply) ProtoMessage() {}

func (x *SendBtcReply) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendBtcReply.ProtoReflect.Descriptor instead.
func (*SendBtcReply) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{78}
}

func (x *SendBtcReply) GetTxInfo() *TxInfo {
	if x != nil {
		return x.TxInfo
	}
	return nil
}

type VerifyBsqSentToAddressRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"` // The internal BSQ wallet address.
	Amount  string `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`   // The amount supposedly sent to the BSQ wallet address, as a string in "#######,##" format.
}

func (x *VerifyBsqSentToAddressRequest) Reset() {
	*x = VerifyBsqSentToAddressRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyBsqSentToAddressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyBsqSentToAddressRequest) ProtoMessage() {}

func (x *VerifyBsqSentToAddressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyBsqSentToAddressRequest.ProtoReflect.Descriptor instead.
func (*VerifyBsqSentToAddressRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{79}
}

func (x *VerifyBsqSentToAddressRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *VerifyBsqSentToAddressRequest) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

type VerifyBsqSentToAddressReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether a specific BSQ wallet address has received a specific amount of BSQ.  If the same address has received
	// the same amount of BSQ more than once, a true value does not indicate payment has been made for a v1 protocol
	// BSQ-BTC trade.  This BSQ payment verification problem is solved with BSQ swaps, which use a different BSQ
	// address for each swap transaction.
	IsAmountReceived bool `protobuf:"varint,1,opt,name=is_amount_received,json=isAmountReceived,proto3" json:"is_amount_received,omitempty"`
}

func (x *VerifyBsqSentToAddressReply) Reset() {
	*x = VerifyBsqSentToAddressReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyBsqSentToAddressReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyBsqSentToAddressReply) ProtoMessage() {}

func (x *VerifyBsqSentToAddressReply) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyBsqSentToAddressReply.ProtoReflect.Descriptor instead.
func (*VerifyBsqSentToAddressReply) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{80}
}

func (x *VerifyBsqSentToAddressReply) GetIsAmountReceived() bool {
	if x != nil {
		return x.IsAmountReceived
	}
	return false
}

type GetTxFeeRateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetTxFeeRateRequest) Reset() {
	*x = GetTxFeeRateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTxFeeRateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTxFeeRateRequest) ProtoMessage() {}

func (x *GetTxFeeRateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTxFeeRateRequest.ProtoReflect.Descriptor instead.
func (*GetTxFeeRateRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{81}
}

type GetTxFeeRateReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxFeeRateInfo *TxFeeRateInfo `protobuf:"bytes,1,opt,name=tx_fee_rate_info,json=txFeeRateInfo,proto3" json:"tx_fee_rate_info,omitempty"` // The summary of the most recently available bitcoin transaction fee rates.
}

func (x *GetTxFeeRateReply) Reset() {
	*x = GetTxFeeRateReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTxFeeRateReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTxFeeRateReply) ProtoMessage() {}

func (x *GetTxFeeRateReply) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTxFeeRateReply.ProtoReflect.Descriptor instead.
func (*GetTxFeeRateReply) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{82}
}

func (x *GetTxFeeRateReply) GetTxFeeRateInfo() *TxFeeRateInfo {
	if x != nil {
		return x.TxFeeRateInfo
	}
	return nil
}

type SetTxFeeRatePreferenceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxFeeRatePreference uint64 `protobuf:"varint,1,opt,name=tx_fee_rate_preference,json=txFeeRatePreference,proto3" json:"tx_fee_rate_preference,omitempty"`
}

func (x *SetTxFeeRatePreferenceRequest) Reset() {
	*x = SetTxFeeRatePreferenceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetTxFeeRatePreferenceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetTxFeeRatePreferenceRequest) ProtoMessage() {}

func (x *SetTxFeeRatePreferenceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetTxFeeRatePreferenceRequest.ProtoReflect.Descriptor instead.
func (*SetTxFeeRatePreferenceRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{83}
}

func (x *SetTxFeeRatePreferenceRequest) GetTxFeeRatePreference() uint64 {
	if x != nil {
		return x.TxFeeRatePreference
	}
	return 0
}

type SetTxFeeRatePreferenceReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxFeeRateInfo *TxFeeRateInfo `protobuf:"bytes,1,opt,name=tx_fee_rate_info,json=txFeeRateInfo,proto3" json:"tx_fee_rate_info,omitempty"` // The summary of the most recently available bitcoin transaction fee rates.
}

func (x *SetTxFeeRatePreferenceReply) Reset() {
	*x = SetTxFeeRatePreferenceReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetTxFeeRatePreferenceReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetTxFeeRatePreferenceReply) ProtoMessage() {}

func (x *SetTxFeeRatePreferenceReply) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetTxFeeRatePreferenceReply.ProtoReflect.Descriptor instead.
func (*SetTxFeeRatePreferenceReply) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{84}
}

func (x *SetTxFeeRatePreferenceReply) GetTxFeeRateInfo() *TxFeeRateInfo {
	if x != nil {
		return x.TxFeeRateInfo
	}
	return nil
}

type UnsetTxFeeRatePreferenceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UnsetTxFeeRatePreferenceRequest) Reset() {
	*x = UnsetTxFeeRatePreferenceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnsetTxFeeRatePreferenceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnsetTxFeeRatePreferenceRequest) ProtoMessage() {}

func (x *UnsetTxFeeRatePreferenceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnsetTxFeeRatePreferenceRequest.ProtoReflect.Descriptor instead.
func (*UnsetTxFeeRatePreferenceRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{85}
}

type UnsetTxFeeRatePreferenceReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxFeeRateInfo *TxFeeRateInfo `protobuf:"bytes,1,opt,name=tx_fee_rate_info,json=txFeeRateInfo,proto3" json:"tx_fee_rate_info,omitempty"` // The summary of the most recently available bitcoin transaction fee rates.
}

func (x *UnsetTxFeeRatePreferenceReply) Reset() {
	*x = UnsetTxFeeRatePreferenceReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnsetTxFeeRatePreferenceReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnsetTxFeeRatePreferenceReply) ProtoMessage() {}

func (x *UnsetTxFeeRatePreferenceReply) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnsetTxFeeRatePreferenceReply.ProtoReflect.Descriptor instead.
func (*UnsetTxFeeRatePreferenceReply) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{86}
}

func (x *UnsetTxFeeRatePreferenceReply) GetTxFeeRateInfo() *TxFeeRateInfo {
	if x != nil {
		return x.TxFeeRateInfo
	}
	return nil
}

type GetTransactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxId string `protobuf:"bytes,1,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
}

func (x *GetTransactionRequest) Reset() {
	*x = GetTransactionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransactionRequest) ProtoMessage() {}

func (x *GetTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransactionRequest.ProtoReflect.Descriptor instead.
func (*GetTransactionRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{87}
}

func (x *GetTransactionRequest) GetTxId() string {
	if x != nil {
		return x.TxId
	}
	return ""
}

type GetTransactionReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxInfo *TxInfo `protobuf:"bytes,1,opt,name=tx_info,json=txInfo,proto3" json:"tx_info,omitempty"` // The summary of a bitcoin transaction.
}

func (x *GetTransactionReply) Reset() {
	*x = GetTransactionReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTransactionReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransactionReply) ProtoMessage() {}

func (x *GetTransactionReply) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransactionReply.ProtoReflect.Descriptor instead.
func (*GetTransactionReply) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{88}
}

func (x *GetTransactionReply) GetTxInfo() *TxInfo {
	if x != nil {
		return x.TxInfo
	}
	return nil
}

type GetFundingAddressesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetFundingAddressesRequest) Reset() {
	*x = GetFundingAddressesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFundingAddressesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFundingAddressesRequest) ProtoMessage() {}

func (x *GetFundingAddressesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFundingAddressesRequest.ProtoReflect.Descriptor instead.
func (*GetFundingAddressesRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{89}
}

type GetFundingAddressesReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AddressBalanceInfo []*AddressBalanceInfo `protobuf:"bytes,1,rep,name=address_balance_info,json=addressBalanceInfo,proto3" json:"address_balance_info,omitempty"` // The list of BTC wallet addresses with their balances.
}

func (x *GetFundingAddressesReply) Reset() {
	*x = GetFundingAddressesReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFundingAddressesReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFundingAddressesReply) ProtoMessage() {}

func (x *GetFundingAddressesReply) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFundingAddressesReply.ProtoReflect.Descriptor instead.
func (*GetFundingAddressesReply) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{90}
}

func (x *GetFundingAddressesReply) GetAddressBalanceInfo() []*AddressBalanceInfo {
	if x != nil {
		return x.AddressBalanceInfo
	}
	return nil
}

type SetWalletPasswordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Password    string `protobuf:"bytes,1,opt,name=password,proto3" json:"password,omitempty"`                          // The new password for encrypting an unencrypted Bisq wallet.
	NewPassword string `protobuf:"bytes,2,opt,name=new_password,json=newPassword,proto3" json:"new_password,omitempty"` // The new password for encrypting an already encrypted Bisq wallet (a password override).
}

func (x *SetWalletPasswordRequest) Reset() {
	*x = SetWalletPasswordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetWalletPasswordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetWalletPasswordRequest) ProtoMessage() {}

func (x *SetWalletPasswordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetWalletPasswordRequest.ProtoReflect.Descriptor instead.
func (*SetWalletPasswordRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{91}
}

func (x *SetWalletPasswordRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *SetWalletPasswordRequest) GetNewPassword() string {
	if x != nil {
		return x.NewPassword
	}
	return ""
}

type SetWalletPasswordReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetWalletPasswordReply) Reset() {
	*x = SetWalletPasswordReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetWalletPasswordReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetWalletPasswordReply) ProtoMessage() {}

func (x *SetWalletPasswordReply) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetWalletPasswordReply.ProtoReflect.Descriptor instead.
func (*SetWalletPasswordReply) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{92}
}

type RemoveWalletPasswordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Password string `protobuf:"bytes,1,opt,name=password,proto3" json:"password,omitempty"` // The Bisq wallet's current encryption password.
}

func (x *RemoveWalletPasswordRequest) Reset() {
	*x = RemoveWalletPasswordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveWalletPasswordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveWalletPasswordRequest) ProtoMessage() {}

func (x *RemoveWalletPasswordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveWalletPasswordRequest.ProtoReflect.Descriptor instead.
func (*RemoveWalletPasswordRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{93}
}

func (x *RemoveWalletPasswordRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type RemoveWalletPasswordReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemoveWalletPasswordReply) Reset() {
	*x = RemoveWalletPasswordReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveWalletPasswordReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveWalletPasswordReply) ProtoMessage() {}

func (x *RemoveWalletPasswordReply) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveWalletPasswordReply.ProtoReflect.Descriptor instead.
func (*RemoveWalletPasswordReply) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{94}
}

type LockWalletRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LockWalletRequest) Reset() {
	*x = LockWalletRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LockWalletRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LockWalletRequest) ProtoMessage() {}

func (x *LockWalletRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LockWalletRequest.ProtoReflect.Descriptor instead.
func (*LockWalletRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{95}
}

type LockWalletReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LockWalletReply) Reset() {
	*x = LockWalletReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LockWalletReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LockWalletReply) ProtoMessage() {}

func (x *LockWalletReply) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LockWalletReply.ProtoReflect.Descriptor instead.
func (*LockWalletReply) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{96}
}

type UnlockWalletRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Password string `protobuf:"bytes,1,opt,name=password,proto3" json:"password,omitempty"` // The Bisq wallet's encryption password.
	Timeout  uint64 `protobuf:"varint,2,opt,name=timeout,proto3" json:"timeout,omitempty"`  // The Bisq wallet's unlock time period, in seconds.
}

func (x *UnlockWalletRequest) Reset() {
	*x = UnlockWalletRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnlockWalletRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnlockWalletRequest) ProtoMessage() {}

func (x *UnlockWalletRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnlockWalletRequest.ProtoReflect.Descriptor instead.
func (*UnlockWalletRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{97}
}

func (x *UnlockWalletRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *UnlockWalletRequest) GetTimeout() uint64 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

type UnlockWalletReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UnlockWalletReply) Reset() {
	*x = UnlockWalletReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnlockWalletReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnlockWalletReply) ProtoMessage() {}

func (x *UnlockWalletReply) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnlockWalletReply.ProtoReflect.Descriptor instead.
func (*UnlockWalletReply) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{98}
}

type BalancesInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bsq *BsqBalanceInfo `protobuf:"bytes,1,opt,name=bsq,proto3" json:"bsq,omitempty"` // BSQ wallet balance information.
	Btc *BtcBalanceInfo `protobuf:"bytes,2,opt,name=btc,proto3" json:"btc,omitempty"` // BTC wallet balance information.
}

func (x *BalancesInfo) Reset() {
	*x = BalancesInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BalancesInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BalancesInfo) ProtoMessage() {}

func (x *BalancesInfo) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BalancesInfo.ProtoReflect.Descriptor instead.
func (*BalancesInfo) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{99}
}

func (x *BalancesInfo) GetBsq() *BsqBalanceInfo {
	if x != nil {
		return x.Bsq
	}
	return nil
}

func (x *BalancesInfo) GetBtc() *BtcBalanceInfo {
	if x != nil {
		return x.Btc
	}
	return nil
}

// TODO Thoroughly review field descriptions.
type BsqBalanceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The BSQ amount currently available to send to other addresses at the user's discretion, in satoshis.
	AvailableConfirmedBalance uint64 `protobuf:"varint,1,opt,name=available_confirmed_balance,json=availableConfirmedBalance,proto3" json:"available_confirmed_balance,omitempty"`
	// The BSQ amount currently being used in send transactions, in satoshis. Unverified BSQ balances are
	// not spendable until returned to the available_confirmed_balance when send transactions have been confirmed.
	UnverifiedBalance uint64 `protobuf:"varint,2,opt,name=unverified_balance,json=unverifiedBalance,proto3" json:"unverified_balance,omitempty"`
	// The BSQ transaction change amount tied up in unconfirmed transactions, remaining unspendable until transactions
	// have been confirmed and the change returned to the available_confirmed_balance.
	UnconfirmedChangeBalance uint64 `protobuf:"varint,3,opt,name=unconfirmed_change_balance,json=unconfirmedChangeBalance,proto3" json:"unconfirmed_change_balance,omitempty"`
	// The locked BSQ amount held by DAO voting transaction.
	LockedForVotingBalance uint64 `protobuf:"varint,4,opt,name=locked_for_voting_balance,json=lockedForVotingBalance,proto3" json:"locked_for_voting_balance,omitempty"`
	// The locked BSQ amount held by DAO bonding transaction.
	LockupBondsBalance uint64 `protobuf:"varint,5,opt,name=lockup_bonds_balance,json=lockupBondsBalance,proto3" json:"lockup_bonds_balance,omitempty"`
	// The BSQ bonding amount in unlocking state, awaiting a lockup transaction's lock time expiry before the funds
	// can be spent in normal transactions.
	UnlockingBondsBalance uint64 `protobuf:"varint,6,opt,name=unlocking_bonds_balance,json=unlockingBondsBalance,proto3" json:"unlocking_bonds_balance,omitempty"`
}

func (x *BsqBalanceInfo) Reset() {
	*x = BsqBalanceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BsqBalanceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BsqBalanceInfo) ProtoMessage() {}

func (x *BsqBalanceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BsqBalanceInfo.ProtoReflect.Descriptor instead.
func (*BsqBalanceInfo) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{100}
}

func (x *BsqBalanceInfo) GetAvailableConfirmedBalance() uint64 {
	if x != nil {
		return x.AvailableConfirmedBalance
	}
	return 0
}

func (x *BsqBalanceInfo) GetUnverifiedBalance() uint64 {
	if x != nil {
		return x.UnverifiedBalance
	}
	return 0
}

func (x *BsqBalanceInfo) GetUnconfirmedChangeBalance() uint64 {
	if x != nil {
		return x.UnconfirmedChangeBalance
	}
	return 0
}

func (x *BsqBalanceInfo) GetLockedForVotingBalance() uint64 {
	if x != nil {
		return x.LockedForVotingBalance
	}
	return 0
}

func (x *BsqBalanceInfo) GetLockupBondsBalance() uint64 {
	if x != nil {
		return x.LockupBondsBalance
	}
	return 0
}

func (x *BsqBalanceInfo) GetUnlockingBondsBalance() uint64 {
	if x != nil {
		return x.UnlockingBondsBalance
	}
	return 0
}

// TODO Thoroughly review field descriptions.
type BtcBalanceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The BTC amount currently available to send to other addresses at the user's discretion, in satoshis.
	AvailableBalance uint64 `protobuf:"varint,1,opt,name=available_balance,json=availableBalance,proto3" json:"available_balance,omitempty"`
	// The BTC amount currently reserved to cover open offers' security deposits, and BTC sellers' payout amounts,
	// in satoshis.  Reserved funds are not spendable, but are recoverable by users. When a user cancels an offer
	// funds reserved for that offer are returned to the available_balance.
	ReservedBalance uint64 `protobuf:"varint,2,opt,name=reserved_balance,json=reservedBalance,proto3" json:"reserved_balance,omitempty"`
	// The sum of available_balance + reserved_balance, in satoshis.
	TotalAvailableBalance uint64 `protobuf:"varint,3,opt,name=total_available_balance,json=totalAvailableBalance,proto3" json:"total_available_balance,omitempty"`
	// The BTC amount being locked to cover the security deposits and BTC seller's pending trade payouts.  Locked
	// funds are not recoverable until a trade is completed, when security deposits are returned to the available_balance.
	LockedBalance uint64 `protobuf:"varint,4,opt,name=locked_balance,json=lockedBalance,proto3" json:"locked_balance,omitempty"`
}

func (x *BtcBalanceInfo) Reset() {
	*x = BtcBalanceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BtcBalanceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BtcBalanceInfo) ProtoMessage() {}

func (x *BtcBalanceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BtcBalanceInfo.ProtoReflect.Descriptor instead.
func (*BtcBalanceInfo) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{101}
}

func (x *BtcBalanceInfo) GetAvailableBalance() uint64 {
	if x != nil {
		return x.AvailableBalance
	}
	return 0
}

func (x *BtcBalanceInfo) GetReservedBalance() uint64 {
	if x != nil {
		return x.ReservedBalance
	}
	return 0
}

func (x *BtcBalanceInfo) GetTotalAvailableBalance() uint64 {
	if x != nil {
		return x.TotalAvailableBalance
	}
	return 0
}

func (x *BtcBalanceInfo) GetLockedBalance() uint64 {
	if x != nil {
		return x.LockedBalance
	}
	return 0
}

type AddressBalanceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address          string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`                                            // The bitcoin wallet address.
	Balance          int64  `protobuf:"varint,2,opt,name=balance,proto3" json:"balance,omitempty"`                                           // The address' BTC balance in satoshis.
	NumConfirmations int64  `protobuf:"varint,3,opt,name=num_confirmations,json=numConfirmations,proto3" json:"num_confirmations,omitempty"` // The number of confirmations for the most recent transaction referencing the output address.
	IsAddressUnused  bool   `protobuf:"varint,4,opt,name=is_address_unused,json=isAddressUnused,proto3" json:"is_address_unused,omitempty"`  // Whether the bitcoin address has ever been used, or not.
}

func (x *AddressBalanceInfo) Reset() {
	*x = AddressBalanceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddressBalanceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddressBalanceInfo) ProtoMessage() {}

func (x *AddressBalanceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddressBalanceInfo.ProtoReflect.Descriptor instead.
func (*AddressBalanceInfo) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{102}
}

func (x *AddressBalanceInfo) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *AddressBalanceInfo) GetBalance() int64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *AddressBalanceInfo) GetNumConfirmations() int64 {
	if x != nil {
		return x.NumConfirmations
	}
	return 0
}

func (x *AddressBalanceInfo) GetIsAddressUnused() bool {
	if x != nil {
		return x.IsAddressUnused
	}
	return false
}

type GetVersionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetVersionRequest) Reset() {
	*x = GetVersionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVersionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVersionRequest) ProtoMessage() {}

func (x *GetVersionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVersionRequest.ProtoReflect.Descriptor instead.
func (*GetVersionRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{103}
}

type GetVersionReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"` // The version of the Bisq software release.
}

func (x *GetVersionReply) Reset() {
	*x = GetVersionReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVersionReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVersionReply) ProtoMessage() {}

func (x *GetVersionReply) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVersionReply.ProtoReflect.Descriptor instead.
func (*GetVersionReply) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{104}
}

func (x *GetVersionReply) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

var File_grpc_proto protoreflect.FileDescriptor

var file_grpc_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x69, 0x6f,
	0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65,
	0x72, 0x1a, 0x08, 0x70, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x76, 0x0a, 0x1b, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x44, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x69,
	0x73, 0x70, 0x75, 0x74, 0x65, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x64, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4b, 0x65, 0x79, 0x22, 0x1b, 0x0a, 0x19, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x44,
	0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x37, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x48, 0x65, 0x6c,
	0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x35, 0x0a, 0x12, 0x47, 0x65, 0x74,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x48, 0x65, 0x6c, 0x70, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x68, 0x65, 0x6c, 0x70, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x48, 0x65, 0x6c, 0x70,
	0x22, 0x49, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x69,
	0x73, 0x5f, 0x6d, 0x79, 0x5f, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x69, 0x73, 0x4d, 0x79, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x22, 0xbb, 0x01, 0x0a, 0x15,
	0x47, 0x65, 0x74, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x5f, 0x0a, 0x0e, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e,
	0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x66, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x0d, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x22, 0x41, 0x0a, 0x0d, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x49, 0x41, 0x54, 0x10, 0x01, 0x12, 0x0b,
	0x0a, 0x07, 0x41, 0x4c, 0x54, 0x43, 0x4f, 0x49, 0x4e, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x42,
	0x53, 0x51, 0x5f, 0x53, 0x57, 0x41, 0x50, 0x10, 0x03, 0x22, 0x5c, 0x0a, 0x14, 0x47, 0x65, 0x74,
	0x42, 0x73, 0x71, 0x53, 0x77, 0x61, 0x70, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x44, 0x0a, 0x0e, 0x62, 0x73, 0x71, 0x5f, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x6f, 0x66,
	0x66, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x69, 0x6f, 0x2e, 0x62,
	0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e,
	0x4f, 0x66, 0x66, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x62, 0x73, 0x71, 0x53, 0x77,
	0x61, 0x70, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x22, 0x21, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4f, 0x66,
	0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x45, 0x0a, 0x0d, 0x47, 0x65,
	0x74, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x34, 0x0a, 0x05, 0x6f,
	0x66, 0x66, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x69, 0x6f, 0x2e,
	0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x2e, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x6f, 0x66, 0x66, 0x65,
	0x72, 0x22, 0x5e, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4d, 0x79, 0x42, 0x73, 0x71, 0x53, 0x77, 0x61,
	0x70, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x44, 0x0a, 0x0e, 0x62,
	0x73, 0x71, 0x5f, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x62, 0x73, 0x71, 0x53, 0x77, 0x61, 0x70, 0x4f, 0x66, 0x66, 0x65,
	0x72, 0x22, 0x23, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x4d, 0x79, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x47, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4d, 0x79, 0x4f,
	0x66, 0x66, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x34, 0x0a, 0x05, 0x6f, 0x66, 0x66,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69,
	0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x4f,
	0x66, 0x66, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x22,
	0x55, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x48, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4f, 0x66, 0x66,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x36, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x65,
	0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69,
	0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x4f,
	0x66, 0x66, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x73,
	0x22, 0x37, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x42, 0x73, 0x71, 0x53, 0x77, 0x61, 0x70, 0x4f, 0x66,
	0x66, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x5f, 0x0a, 0x15, 0x47, 0x65, 0x74,
	0x42, 0x73, 0x71, 0x53, 0x77, 0x61, 0x70, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x73, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x46, 0x0a, 0x0f, 0x62, 0x73, 0x71, 0x5f, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x6f,
	0x66, 0x66, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x69, 0x6f,
	0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65,
	0x72, 0x2e, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x62, 0x73, 0x71,
	0x53, 0x77, 0x61, 0x70, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x73, 0x22, 0x57, 0x0a, 0x12, 0x47, 0x65,
	0x74, 0x4d, 0x79, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23,
	0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43,
	0x6f, 0x64, 0x65, 0x22, 0x4a, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4d, 0x79, 0x4f, 0x66, 0x66, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x36, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x65, 0x72,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73,
	0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x4f, 0x66,
	0x66, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x73, 0x22,
	0x61, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x4d, 0x79, 0x42, 0x73, 0x71, 0x53, 0x77, 0x61, 0x70, 0x4f,
	0x66, 0x66, 0x65, 0x72, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x46, 0x0a, 0x0f, 0x62, 0x73,
	0x71, 0x5f, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x62, 0x73, 0x71, 0x53, 0x77, 0x61, 0x70, 0x4f, 0x66, 0x66, 0x65,
	0x72, 0x73, 0x22, 0x86, 0x01, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x73, 0x71,
	0x53, 0x77, 0x61, 0x70, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x69, 0x6e, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6d, 0x69, 0x6e, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x22, 0x5f, 0x0a, 0x17, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x73, 0x71, 0x53, 0x77, 0x61, 0x70, 0x4f, 0x66, 0x66, 0x65,
	0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x44, 0x0a, 0x0e, 0x62, 0x73, 0x71, 0x5f, 0x73, 0x77,
	0x61, 0x70, 0x5f, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x66, 0x65, 0x72, 0x2e, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c,
	0x62, 0x73, 0x71, 0x53, 0x77, 0x61, 0x70, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x22, 0xd7, 0x03, 0x0a,
	0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x33, 0x0a, 0x16,
	0x75, 0x73, 0x65, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x64,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x75, 0x73,
	0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x42, 0x61, 0x73, 0x65, 0x64, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x35, 0x0a, 0x17, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x5f, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x5f, 0x70, 0x63, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x14, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4d,
	0x61, 0x72, 0x67, 0x69, 0x6e, 0x50, 0x63, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x69, 0x6e, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6d, 0x69, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x3b, 0x0a, 0x1a, 0x62, 0x75, 0x79, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x5f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x70, 0x63, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x17, 0x62, 0x75, 0x79, 0x65, 0x72, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x50, 0x63, 0x74, 0x12, 0x23, 0x0a, 0x0d,
	0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x35, 0x0a, 0x17, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x14, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x46, 0x65, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x48, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4f, 0x66, 0x66, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x34, 0x0a, 0x05, 0x6f, 0x66,
	0x66, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x69, 0x6f, 0x2e, 0x62,
	0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e,
	0x4f, 0x66, 0x66, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x6f, 0x66, 0x66, 0x65, 0x72,
	0x22, 0xfd, 0x04, 0x0a, 0x10, 0x45, 0x64, 0x69, 0x74, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x33, 0x0a, 0x16, 0x75,
	0x73, 0x65, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x64, 0x5f,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x75, 0x73, 0x65,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x42, 0x61, 0x73, 0x65, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x35, 0x0a, 0x17, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x5f, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x5f, 0x70, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x14, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4d, 0x61,
	0x72, 0x67, 0x69, 0x6e, 0x50, 0x63, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x11, 0x52, 0x06, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x4b, 0x0a, 0x09, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73,
	0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x45, 0x64,
	0x69, 0x74, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x45,
	0x64, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x65, 0x64, 0x69, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x22, 0xcc, 0x02, 0x0a, 0x08, 0x45, 0x64, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19,
	0x0a, 0x15, 0x41, 0x43, 0x54, 0x49, 0x56, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x46, 0x49, 0x58,
	0x45, 0x44, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x01, 0x12,
	0x24, 0x0a, 0x20, 0x46, 0x49, 0x58, 0x45, 0x44, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x41,
	0x4e, 0x44, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x4d, 0x4b, 0x54, 0x5f, 0x50, 0x52, 0x49,
	0x43, 0x45, 0x5f, 0x4d, 0x41, 0x52, 0x47, 0x49, 0x4e, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x03,
	0x12, 0x29, 0x0a, 0x25, 0x4d, 0x4b, 0x54, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x4d, 0x41,
	0x52, 0x47, 0x49, 0x4e, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12, 0x54,
	0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x4f, 0x4e, 0x4c,
	0x59, 0x10, 0x05, 0x12, 0x26, 0x0a, 0x22, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x50,
	0x52, 0x49, 0x43, 0x45, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10, 0x06, 0x12, 0x26, 0x0a, 0x22, 0x4d,
	0x4b, 0x54, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x4d, 0x41, 0x52, 0x47, 0x49, 0x4e, 0x5f,
	0x41, 0x4e, 0x44, 0x5f, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x50, 0x52, 0x49, 0x43,
	0x45, 0x10, 0x07, 0x12, 0x3b, 0x0a, 0x37, 0x4d, 0x4b, 0x54, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45,
	0x5f, 0x4d, 0x41, 0x52, 0x47, 0x49, 0x4e, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x54, 0x52, 0x49, 0x47,
	0x47, 0x45, 0x52, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10, 0x08,
	0x22, 0x10, 0x0a, 0x0e, 0x45, 0x64, 0x69, 0x74, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x24, 0x0a, 0x12, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4f, 0x66, 0x66, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x12, 0x0a, 0x10, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0xbf, 0x09, 0x0a,
	0x09, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x33,
	0x0a, 0x16, 0x75, 0x73, 0x65, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x62, 0x61, 0x73,
	0x65, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13,
	0x75, 0x73, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x42, 0x61, 0x73, 0x65, 0x64, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x5f, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x5f, 0x70, 0x63, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x50, 0x63, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x69, 0x6e, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6d, 0x69, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x69, 0x6e,
	0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d,
	0x69, 0x6e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x62, 0x75, 0x79, 0x65,
	0x72, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x64, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x62, 0x75, 0x79, 0x65, 0x72, 0x53,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x12, 0x23,
	0x0a, 0x0d, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x3f, 0x0a, 0x1d, 0x69, 0x73, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x66, 0x65, 0x65,
	0x5f, 0x62, 0x74, 0x63, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x69, 0x73, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x46, 0x6f, 0x72, 0x4d, 0x61, 0x6b, 0x65, 0x72, 0x46, 0x65,
	0x65, 0x42, 0x74, 0x63, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x49, 0x64, 0x12, 0x39,
	0x0a, 0x19, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x16, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x53, 0x68, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x62, 0x61, 0x73,
	0x65, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x62, 0x61, 0x73, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x5f,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x12, 0x34, 0x0a,
	0x17, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x74, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13,
	0x6f, 0x66, 0x66, 0x65, 0x72, 0x46, 0x65, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54,
	0x78, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x74, 0x78, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x05, 0x74, 0x78, 0x46, 0x65, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61,
	0x6b, 0x65, 0x72, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6d,
	0x61, 0x6b, 0x65, 0x72, 0x46, 0x65, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69,
	0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x69, 0x73,
	0x5f, 0x6d, 0x79, 0x5f, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x18, 0x19, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x69, 0x73, 0x4d, 0x79, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x13, 0x69, 0x73,
	0x5f, 0x6d, 0x79, 0x5f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x66, 0x66, 0x65,
	0x72, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x73, 0x4d, 0x79, 0x50, 0x65, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x11, 0x69, 0x73, 0x5f,
	0x62, 0x73, 0x71, 0x5f, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x18, 0x1b,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x42, 0x73, 0x71, 0x53, 0x77, 0x61, 0x70, 0x4f,
	0x66, 0x66, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x12, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x6e, 0x6f,
	0x64, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x20, 0x0a, 0x0c, 0x70, 0x75, 0x62, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x72, 0x69,
	0x6e, 0x67, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x75, 0x62, 0x4b, 0x65, 0x79,
	0x52, 0x69, 0x6e, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x6e, 0x72, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x4e, 0x72, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x9f,
	0x01, 0x0a, 0x21, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x57, 0x69, 0x74, 0x68, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x58, 0x0a, 0x13, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x27, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x12, 0x61, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x4f, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x30, 0x0a, 0x14, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x6f, 0x72,
	0x6d, 0x22, 0x69, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x4c,
	0x0a, 0x0f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73,
	0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x50, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0e, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x1b, 0x0a, 0x19,
	0x47, 0x65, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x69, 0x0a, 0x17, 0x47, 0x65, 0x74,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x4e, 0x0a, 0x10, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x66, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x0f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x22, 0x1a, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x65, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x4b, 0x0a, 0x0f, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x0e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x22, 0x4a, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x50, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x6d,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x49, 0x64, 0x22, 0x57, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x39, 0x0a, 0x19, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x4a, 0x73, 0x6f, 0x6e, 0x22, 0xb2, 0x01, 0x0a,
	0x29, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x23, 0x0a, 0x0d,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x64, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x74, 0x22, 0x77, 0x0a, 0x27, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x72, 0x79, 0x70, 0x74,
	0x6f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x4c, 0x0a, 0x0f,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0e, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x28, 0x0a, 0x26, 0x47, 0x65,
	0x74, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x73, 0x0a, 0x24, 0x47, 0x65, 0x74, 0x43, 0x72, 0x79, 0x70, 0x74,
	0x6f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x4b, 0x0a, 0x0f,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x0e, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x22, 0x39, 0x0a, 0x12, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x43, 0x6f, 0x64, 0x65, 0x22, 0x28, 0x0a, 0x10, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x22, 0x0d,
	0x0a, 0x0b, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x0b, 0x0a,
	0x09, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x92, 0x01, 0x0a, 0x10, 0x54,
	0x61, 0x6b, 0x65, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x19, 0x0a, 0x08, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x17, 0x74, 0x61, 0x6b, 0x65,
	0x72, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x74, 0x61, 0x6b, 0x65, 0x72,
	0x46, 0x65, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x22,
	0xa5, 0x01, 0x0a, 0x0e, 0x54, 0x61, 0x6b, 0x65, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x34, 0x0a, 0x05, 0x74, 0x72, 0x61, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x05, 0x74, 0x72, 0x61, 0x64, 0x65, 0x12, 0x5d, 0x0a, 0x0e, 0x66, 0x61, 0x69, 0x6c,
	0x75, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x36, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x57, 0x69, 0x74, 0x68, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72,
	0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x39, 0x0a, 0x1c, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x72, 0x6d, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x49, 0x64, 0x22, 0x1c, 0x0a, 0x1a, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x3a, 0x0a, 0x1d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x64, 0x65, 0x49, 0x64, 0x22, 0x1d, 0x0a, 0x1b,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x2c, 0x0a, 0x0f, 0x47,
	0x65, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19,
	0x0a, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x74, 0x72, 0x61, 0x64, 0x65, 0x49, 0x64, 0x22, 0x45, 0x0a, 0x0d, 0x47, 0x65, 0x74,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x34, 0x0a, 0x05, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x69, 0x6f, 0x2e, 0x62,
	0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x22, 0x8c, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73,
	0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x47, 0x65,
	0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x22, 0x2c, 0x0a, 0x08, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x08, 0x0a,
	0x04, 0x4f, 0x50, 0x45, 0x4e, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x4c, 0x4f, 0x53, 0x45,
	0x44, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x22,
	0x48, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x36, 0x0a, 0x06, 0x74, 0x72, 0x61, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x06, 0x74, 0x72, 0x61, 0x64, 0x65, 0x73, 0x22, 0x2e, 0x0a, 0x11, 0x43, 0x6c, 0x6f,
	0x73, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19,
	0x0a, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x74, 0x72, 0x61, 0x64, 0x65, 0x49, 0x64, 0x22, 0x11, 0x0a, 0x0f, 0x43, 0x6c, 0x6f,
	0x73, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x2d, 0x0a, 0x10,
	0x46, 0x61, 0x69, 0x6c, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x64, 0x65, 0x49, 0x64, 0x22, 0x10, 0x0a, 0x0e, 0x46,
	0x61, 0x69, 0x6c, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x2f, 0x0a,
	0x12, 0x55, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x64, 0x65, 0x49, 0x64, 0x22, 0x12,
	0x0a, 0x10, 0x55, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x5f, 0x0a, 0x14, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x46, 0x75,
	0x6e, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d,
	0x65, 0x6d, 0x6f, 0x22, 0x14, 0x0a, 0x12, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x46,
	0x75, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0xd2, 0x09, 0x0a, 0x09, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x34, 0x0a, 0x05, 0x6f, 0x66, 0x66, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x4f, 0x66, 0x66,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x12, 0x19, 0x0a,
	0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x74, 0x72, 0x61, 0x64, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x68, 0x6f, 0x72,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x68, 0x6f, 0x72,
	0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x3f, 0x0a, 0x1d, 0x69,
	0x73, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x74,
	0x61, 0x6b, 0x65, 0x72, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x62, 0x74, 0x63, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x18, 0x69, 0x73, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x46, 0x6f,
	0x72, 0x54, 0x61, 0x6b, 0x65, 0x72, 0x46, 0x65, 0x65, 0x42, 0x74, 0x63, 0x12, 0x23, 0x0a, 0x0e,
	0x74, 0x78, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x61, 0x73, 0x5f, 0x6c, 0x6f, 0x6e, 0x67, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x74, 0x78, 0x46, 0x65, 0x65, 0x41, 0x73, 0x4c, 0x6f, 0x6e,
	0x67, 0x12, 0x29, 0x0a, 0x11, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x61,
	0x73, 0x5f, 0x6c, 0x6f, 0x6e, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x74, 0x61,
	0x6b, 0x65, 0x72, 0x46, 0x65, 0x65, 0x41, 0x73, 0x4c, 0x6f, 0x6e, 0x67, 0x12, 0x25, 0x0a, 0x0f,
	0x74, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x74, 0x78, 0x5f, 0x69, 0x64, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x46, 0x65, 0x65, 0x54,
	0x78, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x74,
	0x78, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x54, 0x78, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x70, 0x61, 0x79, 0x6f, 0x75,
	0x74, 0x5f, 0x74, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70,
	0x61, 0x79, 0x6f, 0x75, 0x74, 0x54, 0x78, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x14, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61, 0x73, 0x5f, 0x6c, 0x6f, 0x6e,
	0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x74, 0x72, 0x61, 0x64, 0x65, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x41, 0x73, 0x4c, 0x6f, 0x6e, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x39, 0x0a, 0x19, 0x74,
	0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x64, 0x65,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16,
	0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x70, 0x68, 0x61, 0x73, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x61,
	0x73, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x30, 0x0a, 0x14, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12,
	0x69, 0x73, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x12, 0x69, 0x73, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x72, 0x6d, 0x65, 0x64, 0x12, 0x44, 0x0a, 0x1f, 0x69, 0x73, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x69,
	0x73, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x46, 0x0a, 0x20, 0x69, 0x73,
	0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x1c, 0x69, 0x73, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65,
	0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x73, 0x5f, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x5f,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x11, 0x69, 0x73, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x5f, 0x61, 0x73, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x73, 0x4a, 0x73, 0x6f, 0x6e, 0x12,
	0x3d, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x21,
	0x0a, 0x0c, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x64, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x12, 0x54, 0x0a, 0x13, 0x62, 0x73, 0x71, 0x5f, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x66, 0x65, 0x72, 0x2e, 0x42, 0x73, 0x71, 0x53, 0x77, 0x61, 0x70, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x10, 0x62, 0x73, 0x71, 0x53, 0x77, 0x61, 0x70, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x73, 0x69,
	0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x63, 0x6c, 0x6f, 0x73, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xf5,
	0x05, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x2c, 0x0a, 0x12, 0x62, 0x75, 0x79, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x62, 0x75, 0x79,
	0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2e, 0x0a,
	0x13, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x65, 0x6c, 0x6c,
	0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x32, 0x0a,
	0x15, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x39, 0x0a, 0x19, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x43, 0x0a, 0x1f,
	0x69, 0x73, 0x5f, 0x62, 0x75, 0x79, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x61,
	0x6e, 0x64, 0x5f, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x69, 0x73, 0x42, 0x75, 0x79, 0x65, 0x72, 0x4d, 0x61,
	0x6b, 0x65, 0x72, 0x41, 0x6e, 0x64, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x54, 0x61, 0x6b, 0x65,
	0x72, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x61, 0x6b,
	0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x74,
	0x61, 0x6b, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x71, 0x0a, 0x1d, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x69,
	0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66,
	0x65, 0x72, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x1a, 0x6d, 0x61,
	0x6b, 0x65, 0x72, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x71, 0x0a, 0x1d, 0x74, 0x61, 0x6b, 0x65,
	0x72, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x1a, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x3d, 0x0a, 0x1b, 0x6d,
	0x61, 0x6b, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x18, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x3d, 0x0a, 0x1b, 0x74, 0x61,
	0x6b, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x18, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x63,
	0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6c, 0x6f,
	0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xc6, 0x04, 0x0a, 0x10, 0x42, 0x73, 0x71, 0x53, 0x77,
	0x61, 0x70, 0x54, 0x72, 0x61, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x13, 0x0a, 0x05, 0x74,
	0x78, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x78, 0x49, 0x64,
	0x12, 0x28, 0x0a, 0x10, 0x62, 0x73, 0x71, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x62, 0x73, 0x71, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x62, 0x74,
	0x63, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x62, 0x74, 0x63, 0x54, 0x72, 0x61, 0x64, 0x65, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x13, 0x62, 0x73, 0x71, 0x5f, 0x6d, 0x61, 0x6b, 0x65,
	0x72, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x10, 0x62, 0x73, 0x71, 0x4d, 0x61, 0x6b, 0x65, 0x72, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x46, 0x65, 0x65, 0x12, 0x2d, 0x0a, 0x13, 0x62, 0x73, 0x71, 0x5f, 0x74, 0x61, 0x6b, 0x65, 0x72,
	0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x10, 0x62, 0x73, 0x71, 0x54, 0x61, 0x6b, 0x65, 0x72, 0x54, 0x72, 0x61, 0x64, 0x65, 0x46,
	0x65, 0x65, 0x12, 0x27, 0x0a, 0x10, 0x74, 0x78, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x70, 0x65, 0x72,
	0x5f, 0x76, 0x62, 0x79, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x74, 0x78,
	0x46, 0x65, 0x65, 0x50, 0x65, 0x72, 0x56, 0x62, 0x79, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x6d,
	0x61, 0x6b, 0x65, 0x72, 0x5f, 0x62, 0x73, 0x71, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x42, 0x73, 0x71,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x61, 0x6b, 0x65, 0x72,
	0x5f, 0x62, 0x74, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x42, 0x74, 0x63, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x62, 0x73, 0x71,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x74, 0x61, 0x6b, 0x65, 0x72, 0x42, 0x73, 0x71, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x2a, 0x0a, 0x11, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x62, 0x74, 0x63, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x61, 0x6b, 0x65,
	0x72, 0x42, 0x74, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x6e,
	0x75, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x6e, 0x75, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x70,
	0x61, 0x79, 0x6f, 0x75, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x70, 0x65,
	0x65, 0x72, 0x5f, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0e, 0x73, 0x77, 0x61, 0x70, 0x50, 0x65, 0x65, 0x72, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x22,
	0x9a, 0x01, 0x0a, 0x19, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2a, 0x0a,
	0x11, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x89, 0x02, 0x0a,
	0x0d, 0x54, 0x78, 0x46, 0x65, 0x65, 0x52, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x32,
	0x0a, 0x16, 0x75, 0x73, 0x65, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x74, 0x78, 0x5f,
	0x66, 0x65, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12,
	0x75, 0x73, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x54, 0x78, 0x46, 0x65, 0x65, 0x52, 0x61,
	0x74, 0x65, 0x12, 0x2b, 0x0a, 0x12, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x74, 0x78, 0x5f,
	0x66, 0x65, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x54, 0x78, 0x46, 0x65, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12,
	0x28, 0x0a, 0x10, 0x66, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x72,
	0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x66, 0x65, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x3c, 0x0a, 0x1b, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x17,
	0x6c, 0x61, 0x73, 0x74, 0x46, 0x65, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x73, 0x12, 0x2f, 0x0a, 0x14, 0x6d, 0x69, 0x6e, 0x5f, 0x66,
	0x65, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x6d, 0x69, 0x6e, 0x46, 0x65, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x61, 0x74, 0x65, 0x22, 0xb2, 0x01, 0x0a, 0x06, 0x54, 0x78, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x13, 0x0a, 0x05, 0x74, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x78, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x5f, 0x73, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x53, 0x75, 0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f,
	0x73, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x53, 0x75, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x03, 0x66, 0x65, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73,
	0x5f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x69, 0x73, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x6d,
	0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x22, 0x39, 0x0a,
	0x12, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x51, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x3d, 0x0a, 0x08,
	0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x66, 0x65, 0x72, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x08, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x22, 0x34, 0x0a, 0x18, 0x47,
	0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x22, 0x73, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x59, 0x0a, 0x14, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x69, 0x6f, 0x2e, 0x62,
	0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x12, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x1c, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x55, 0x6e, 0x75,
	0x73, 0x65, 0x64, 0x42, 0x73, 0x71, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x34, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x55, 0x6e, 0x75, 0x73, 0x65,
	0x64, 0x42, 0x73, 0x71, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x62, 0x0a, 0x0e, 0x53, 0x65,
	0x6e, 0x64, 0x42, 0x73, 0x71, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e,
	0x0a, 0x0b, 0x74, 0x78, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x78, 0x46, 0x65, 0x65, 0x52, 0x61, 0x74, 0x65, 0x22, 0x44,
	0x0a, 0x0c, 0x53, 0x65, 0x6e, 0x64, 0x42, 0x73, 0x71, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x34,
	0x0a, 0x07, 0x74, 0x78, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x54, 0x78, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x74, 0x78,
	0x49, 0x6e, 0x66, 0x6f, 0x22, 0x76, 0x0a, 0x0e, 0x53, 0x65, 0x6e, 0x64, 0x42, 0x74, 0x63, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0b, 0x74, 0x78, 0x5f, 0x66,
	0x65, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74,
	0x78, 0x46, 0x65, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x22, 0x44, 0x0a, 0x0c,
	0x53, 0x65, 0x6e, 0x64, 0x42, 0x74, 0x63, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x34, 0x0a, 0x07,
	0x74, 0x78, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x66, 0x65, 0x72, 0x2e, 0x54, 0x78, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x74, 0x78, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0x51, 0x0a, 0x1d, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x42, 0x73, 0x71, 0x53,
	0x65, 0x6e, 0x74, 0x54, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x4b, 0x0a, 0x1b, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x42,
	0x73, 0x71, 0x53, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x73, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x10, 0x69, 0x73, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x64, 0x22, 0x15, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x54, 0x78, 0x46, 0x65, 0x65, 0x52, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x60, 0x0a, 0x11, 0x47, 0x65, 0x74,
	0x54, 0x78, 0x46, 0x65, 0x65, 0x52, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x4b,
	0x0a, 0x10, 0x74, 0x78, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69,
	0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x54,
	0x78, 0x46, 0x65, 0x65, 0x52, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x74, 0x78,
	0x46, 0x65, 0x65, 0x52, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x54, 0x0a, 0x1d, 0x53,
	0x65, 0x74, 0x54, 0x78, 0x46, 0x65, 0x65, 0x52, 0x61, 0x74, 0x65, 0x50, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x16,
	0x74, 0x78, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x74, 0x78,
	0x46, 0x65, 0x65, 0x52, 0x61, 0x74, 0x65, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x22, 0x6a, 0x0a, 0x1b, 0x53, 0x65, 0x74, 0x54, 0x78, 0x46, 0x65, 0x65, 0x52, 0x61, 0x74,
	0x65, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x4b, 0x0a, 0x10, 0x74, 0x78, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x69, 0x6f, 0x2e,
	0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x2e, 0x54, 0x78, 0x46, 0x65, 0x65, 0x52, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d,
	0x74, 0x78, 0x46, 0x65, 0x65, 0x52, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x21, 0x0a,
	0x1f, 0x55, 0x6e, 0x73, 0x65, 0x74, 0x54, 0x78, 0x46, 0x65, 0x65, 0x52, 0x61, 0x74, 0x65, 0x50,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x6c, 0x0a, 0x1d, 0x55, 0x6e, 0x73, 0x65, 0x74, 0x54, 0x78, 0x46, 0x65, 0x65, 0x52, 0x61,
	0x74, 0x65, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x4b, 0x0a, 0x10, 0x74, 0x78, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x69, 0x6f,
	0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65,
	0x72, 0x2e, 0x54, 0x78, 0x46, 0x65, 0x65, 0x52, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0d, 0x74, 0x78, 0x46, 0x65, 0x65, 0x52, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x2c,
	0x0a, 0x15, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x13, 0x0a, 0x05, 0x74, 0x78, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x78, 0x49, 0x64, 0x22, 0x4b, 0x0a, 0x13,
	0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x34, 0x0a, 0x07, 0x74, 0x78, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x54, 0x78, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x06, 0x74, 0x78, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x1c, 0x0a, 0x1a, 0x47, 0x65, 0x74,
	0x46, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x75, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x46, 0x75,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x59, 0x0a, 0x14, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x62,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x12, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x59,
	0x0a, 0x18, 0x53, 0x65, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x65, 0x77, 0x5f, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x65,
	0x77, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x18, 0x0a, 0x16, 0x53, 0x65, 0x74,
	0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x39, 0x0a, 0x1b, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x57, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x1b,
	0x0a, 0x19, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x13, 0x0a, 0x11, 0x4c,
	0x6f, 0x63, 0x6b, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x11, 0x0a, 0x0f, 0x4c, 0x6f, 0x63, 0x6b, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x4b, 0x0a, 0x13, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x57, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x22, 0x13, 0x0a, 0x11, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x7c, 0x0a, 0x0c, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x35, 0x0a, 0x03, 0x62, 0x73, 0x71, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x42, 0x73, 0x71, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x03, 0x62, 0x73, 0x71, 0x12, 0x35, 0x0a, 0x03,
	0x62, 0x74, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x69, 0x6f, 0x2e, 0x62,
	0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e,
	0x42, 0x74, 0x63, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x03,
	0x62, 0x74, 0x63, 0x22, 0xe2, 0x02, 0x0a, 0x0e, 0x42, 0x73, 0x71, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3e, 0x0a, 0x1b, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x5f, 0x62, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x19, 0x61, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x75, 0x6e, 0x76, 0x65, 0x72, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x11, 0x75, 0x6e, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x3c, 0x0a, 0x1a, 0x75, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x72, 0x6d, 0x65, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x62, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x18, 0x75, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x12, 0x39, 0x0a, 0x19, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x66, 0x6f,
	0x72, 0x5f, 0x76, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x16, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x46, 0x6f,
	0x72, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x30,
	0x0a, 0x14, 0x6c, 0x6f, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x62, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x62,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x6c, 0x6f,
	0x63, 0x6b, 0x75, 0x70, 0x42, 0x6f, 0x6e, 0x64, 0x73, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x36, 0x0a, 0x17, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x6f,
	0x6e, 0x64, 0x73, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x15, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x42, 0x6f, 0x6e, 0x64,
	0x73, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x22, 0xc7, 0x01, 0x0a, 0x0e, 0x42, 0x74, 0x63,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2b, 0x0a, 0x11, 0x61,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x64, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6c,
	0x6f, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0d, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x22, 0xa1, 0x01, 0x0a, 0x12, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x2b, 0x0a,
	0x11, 0x6e, 0x75, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x6e, 0x75, 0x6d, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x73,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x75, 0x6e, 0x75, 0x73, 0x65, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x55, 0x6e, 0x75, 0x73, 0x65, 0x64, 0x22, 0x13, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x2b, 0x0a, 0x0f, 0x47,
	0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x32, 0x8b, 0x01, 0x0a, 0x0d, 0x44, 0x69, 0x73,
	0x70, 0x75, 0x74, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x7a, 0x0a, 0x14, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x44, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x12, 0x30, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x44, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x44, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x32, 0x6d, 0x0a, 0x04, 0x48, 0x65, 0x6c, 0x70, 0x12, 0x65,
	0x0a, 0x0d, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x48, 0x65, 0x6c, 0x70, 0x12,
	0x29, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x48,
	0x65, 0x6c, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x69, 0x6f, 0x2e,
	0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x48, 0x65, 0x6c, 0x70, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x00, 0x32, 0xb3, 0x0a, 0x0a, 0x06, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x73,
	0x12, 0x6e, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x12, 0x2c, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x66,
	0x66, 0x65, 0x72, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x66, 0x66, 0x65,
	0x72, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00,
	0x12, 0x64, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x42, 0x73, 0x71, 0x53, 0x77, 0x61, 0x70, 0x4f, 0x66,
	0x66, 0x65, 0x72, 0x12, 0x24, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x66, 0x66,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x69, 0x6f, 0x2e, 0x62,
	0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e,
	0x47, 0x65, 0x74, 0x42, 0x73, 0x71, 0x53, 0x77, 0x61, 0x70, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x4f, 0x66, 0x66,
	0x65, 0x72, 0x12, 0x24, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x66, 0x66, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69,
	0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x47,
	0x65, 0x74, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x6a,
	0x0a, 0x11, 0x47, 0x65, 0x74, 0x4d, 0x79, 0x42, 0x73, 0x71, 0x53, 0x77, 0x61, 0x70, 0x4f, 0x66,
	0x66, 0x65, 0x72, 0x12, 0x26, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x79, 0x4f,
	0x66, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x69, 0x6f,
	0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65,
	0x72, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x79, 0x42, 0x73, 0x71, 0x53, 0x77, 0x61, 0x70, 0x4f, 0x66,
	0x66, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x0a, 0x47, 0x65,
	0x74, 0x4d, 0x79, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x12, 0x26, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69,
	0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x47,
	0x65, 0x74, 0x4d, 0x79, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x24, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x79, 0x4f, 0x66, 0x66, 0x65,
	0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x6e, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x42,
	0x73, 0x71, 0x53, 0x77, 0x61, 0x70, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x73, 0x12, 0x2c, 0x2e, 0x69,
	0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66,
	0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x73, 0x71, 0x53, 0x77, 0x61, 0x70, 0x4f, 0x66, 0x66,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x69, 0x6f, 0x2e,
	0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x2e, 0x47, 0x65, 0x74, 0x42, 0x73, 0x71, 0x53, 0x77, 0x61, 0x70, 0x4f, 0x66, 0x66, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x4f,
	0x66, 0x66, 0x65, 0x72, 0x73, 0x12, 0x25, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x4f,
	0x66, 0x66, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x69,
	0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66,
	0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x73, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x00, 0x12, 0x72, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4d, 0x79, 0x42, 0x73, 0x71, 0x53,
	0x77, 0x61, 0x70, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x73, 0x12, 0x2c, 0x2e, 0x69, 0x6f, 0x2e, 0x62,
	0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e,
	0x47, 0x65, 0x74, 0x42, 0x73, 0x71, 0x53, 0x77, 0x61, 0x70, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73,
	0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x47, 0x65,
	0x74, 0x4d, 0x79, 0x42, 0x73, 0x71, 0x53, 0x77, 0x61, 0x70, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x4d, 0x79,
	0x4f, 0x66, 0x66, 0x65, 0x72, 0x73, 0x12, 0x27, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74,
	0x4d, 0x79, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x25, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x79, 0x4f, 0x66, 0x66, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x74, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x42, 0x73, 0x71, 0x53, 0x77, 0x61, 0x70, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x12, 0x2e,
	0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x66, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x73, 0x71, 0x53, 0x77,
	0x61, 0x70, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c,
	0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x66, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x73, 0x71, 0x53, 0x77,
	0x61, 0x70, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x5f,
	0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x12, 0x27, 0x2e,
	0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x66, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12,
	0x59, 0x0a, 0x09, 0x45, 0x64, 0x69, 0x74, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x12, 0x25, 0x2e, 0x69,
	0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66,
	0x65, 0x72, 0x2e, 0x45, 0x64, 0x69, 0x74, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x45, 0x64, 0x69, 0x74, 0x4f, 0x66,
	0x66, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x0b, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x12, 0x27, 0x2e, 0x69, 0x6f, 0x2e, 0x62,
	0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e,
	0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x25, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4f,
	0x66, 0x66, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x32, 0xba, 0x06, 0x0a, 0x0f,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12,
	0x7a, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73,
	0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x69, 0x6f, 0x2e, 0x62,
	0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x74, 0x0a, 0x12, 0x47,
	0x65, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x12, 0x2e, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2c, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x00, 0x12, 0x71, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x12, 0x2d, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x00, 0x12, 0x7d, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x12, 0x31, 0x2e,
	0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x66, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2f, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x00, 0x12, 0xa4, 0x01, 0x0a, 0x22, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x72,
	0x79, 0x70, 0x74, 0x6f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3e, 0x2e, 0x69, 0x6f, 0x2e,
	0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x69, 0x6f, 0x2e,
	0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x9b, 0x01, 0x0a, 0x1f, 0x47,
	0x65, 0x74, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x12, 0x3b,
	0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x66, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x69, 0x6f,
	0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65,
	0x72, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x32, 0x6b, 0x0a, 0x05, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x62, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x27, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x69,
	0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66,
	0x65, 0x72, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x00, 0x32, 0x5c, 0x0a, 0x0e, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77,
	0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x4a, 0x0a, 0x04, 0x53, 0x74, 0x6f, 0x70, 0x12,
	0x20, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1e, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x00, 0x32, 0x99, 0x07, 0x0a, 0x06, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x12, 0x56,
	0x0a, 0x08, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x12, 0x24, 0x2e, 0x69, 0x6f, 0x2e,
	0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x22, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x73, 0x12, 0x25, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x69, 0x6f, 0x2e,
	0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x00, 0x12, 0x59, 0x0a, 0x09, 0x54, 0x61, 0x6b, 0x65, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x12, 0x25,
	0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x66, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x6b, 0x65, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x6b, 0x65,
	0x4f, 0x66, 0x66, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x7d, 0x0a, 0x15,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x65, 0x64, 0x12, 0x31, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x72, 0x6d, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69,
	0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x80, 0x01, 0x0a, 0x16,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x32, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x72, 0x6d, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x69, 0x6f, 0x2e,
	0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x5c,
	0x0a, 0x0a, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x12, 0x26, 0x2e, 0x69,
	0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66,
	0x65, 0x72, 0x2e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x6f, 0x73, 0x65,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x09,
	0x46, 0x61, 0x69, 0x6c, 0x54, 0x72, 0x61, 0x64, 0x65, 0x12, 0x25, 0x2e, 0x69, 0x6f, 0x2e, 0x62,
	0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e,
	0x46, 0x61, 0x69, 0x6c, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x23, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x0b, 0x55, 0x6e, 0x46, 0x61, 0x69,
	0x6c, 0x54, 0x72, 0x61, 0x64, 0x65, 0x12, 0x27, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x55, 0x6e, 0x46,
	0x61, 0x69, 0x6c, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x25, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x55, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x65, 0x0a, 0x0d, 0x57, 0x69, 0x74, 0x68,
	0x64, 0x72, 0x61, 0x77, 0x46, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x29, 0x2e, 0x69, 0x6f, 0x2e, 0x62,
	0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e,
	0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x46, 0x75, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x64,
	0x72, 0x61, 0x77, 0x46, 0x75, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x32,
	0x87, 0x0d, 0x0a, 0x07, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x12, 0x5f, 0x0a, 0x0b, 0x47,
	0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x27, 0x2e, 0x69, 0x6f, 0x2e,
	0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x2e, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x71, 0x0a, 0x11,
	0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x12, 0x2d, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2b, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12,
	0x77, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x55, 0x6e, 0x75, 0x73, 0x65, 0x64, 0x42, 0x73, 0x71, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2f, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74,
	0x55, 0x6e, 0x75, 0x73, 0x65, 0x64, 0x42, 0x73, 0x71, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73,
	0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x47, 0x65,
	0x74, 0x55, 0x6e, 0x75, 0x73, 0x65, 0x64, 0x42, 0x73, 0x71, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x07, 0x53, 0x65, 0x6e, 0x64,
	0x42, 0x73, 0x71, 0x12, 0x23, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x42, 0x73,
	0x71, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69,
	0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x53,
	0x65, 0x6e, 0x64, 0x42, 0x73, 0x71, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x53, 0x0a,
	0x07, 0x53, 0x65, 0x6e, 0x64, 0x42, 0x74, 0x63, 0x12, 0x23, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69,
	0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x53,
	0x65, 0x6e, 0x64, 0x42, 0x74, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e,
	0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x66, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x42, 0x74, 0x63, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x00, 0x12, 0x80, 0x01, 0x0a, 0x16, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x42, 0x73, 0x71,
	0x53, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x32, 0x2e,
	0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x66, 0x65, 0x72, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x42, 0x73, 0x71, 0x53, 0x65, 0x6e,
	0x74, 0x54, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x30, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x42, 0x73,
	0x71, 0x53, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x54, 0x78, 0x46, 0x65,
	0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x28, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x54,
	0x78, 0x46, 0x65, 0x65, 0x52, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x26, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x78, 0x46, 0x65, 0x65, 0x52, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x80, 0x01, 0x0a, 0x16, 0x53, 0x65,
	0x74, 0x54, 0x78, 0x46, 0x65, 0x65, 0x52, 0x61, 0x74, 0x65, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x12, 0x32, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x74, 0x54, 0x78,
	0x46, 0x65, 0x65, 0x52, 0x61, 0x74, 0x65, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69,
	0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x53,
	0x65, 0x74, 0x54, 0x78, 0x46, 0x65, 0x65, 0x52, 0x61, 0x74, 0x65, 0x50, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x86, 0x01, 0x0a,
	0x18, 0x55, 0x6e, 0x73, 0x65, 0x74, 0x54, 0x78, 0x46, 0x65, 0x65, 0x52, 0x61, 0x74, 0x65, 0x50,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x34, 0x2e, 0x69, 0x6f, 0x2e, 0x62,
	0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e,
	0x55, 0x6e, 0x73, 0x65, 0x74, 0x54, 0x78, 0x46, 0x65, 0x65, 0x52, 0x61, 0x74, 0x65, 0x50, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x32, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x55, 0x6e, 0x73, 0x65, 0x74, 0x54, 0x78, 0x46, 0x65, 0x65,
	0x52, 0x61, 0x74, 0x65, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x68, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73,
	0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x47, 0x65,
	0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12,
	0x77, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x46, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x2f, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74,
	0x46, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73,
	0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x47, 0x65,
	0x74, 0x46, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x71, 0x0a, 0x11, 0x53, 0x65, 0x74, 0x57,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x2d, 0x2e,
	0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x66, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x69,
	0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66,
	0x65, 0x72, 0x2e, 0x53, 0x65, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x7a, 0x0a, 0x14, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x12, 0x30, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x0a, 0x4c, 0x6f, 0x63, 0x6b, 0x57,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12, 0x26, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x63, 0x6b,
	0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e,
	0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x66, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x63, 0x6b, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x0c, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x57,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12, 0x28, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x55, 0x6e, 0x6c, 0x6f,
	0x63, 0x6b, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x26, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x57, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x32, 0x6a, 0x0a, 0x0a, 0x47, 0x65, 0x74,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x5c, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x2e, 0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e,
	0x69, 0x6f, 0x2e, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x66, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x00, 0x42, 0x1e, 0x0a, 0x0f, 0x62, 0x69, 0x73, 0x71, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x50, 0x01, 0x5a, 0x09, 0x2e, 0x3b, 0x62, 0x69,
	0x73, 0x71, 0x75, 0x69, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_grpc_proto_rawDescOnce sync.Once
	file_grpc_proto_rawDescData = file_grpc_proto_rawDesc
)

func file_grpc_proto_rawDescGZIP() []byte {
	file_grpc_proto_rawDescOnce.Do(func() {
		file_grpc_proto_rawDescData = protoimpl.X.CompressGZIP(file_grpc_proto_rawDescData)
	})
	return file_grpc_proto_rawDescData
}

var file_grpc_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_grpc_proto_msgTypes = make([]protoimpl.MessageInfo, 105)
var file_grpc_proto_goTypes = []interface{}{
	(GetOfferCategoryReply_OfferCategory)(0),          // 0: io.bisq.protobuffer.GetOfferCategoryReply.OfferCategory
	(EditOfferRequest_EditType)(0),                    // 1: io.bisq.protobuffer.EditOfferRequest.EditType
	(GetTradesRequest_Category)(0),                    // 2: io.bisq.protobuffer.GetTradesRequest.Category
	(*RegisterDisputeAgentRequest)(nil),               // 3: io.bisq.protobuffer.RegisterDisputeAgentRequest
	(*RegisterDisputeAgentReply)(nil),                 // 4: io.bisq.protobuffer.RegisterDisputeAgentReply
	(*GetMethodHelpRequest)(nil),                      // 5: io.bisq.protobuffer.GetMethodHelpRequest
	(*GetMethodHelpReply)(nil),                        // 6: io.bisq.protobuffer.GetMethodHelpReply
	(*GetOfferCategoryRequest)(nil),                   // 7: io.bisq.protobuffer.GetOfferCategoryRequest
	(*GetOfferCategoryReply)(nil),                     // 8: io.bisq.protobuffer.GetOfferCategoryReply
	(*GetBsqSwapOfferReply)(nil),                      // 9: io.bisq.protobuffer.GetBsqSwapOfferReply
	(*GetOfferRequest)(nil),                           // 10: io.bisq.protobuffer.GetOfferRequest
	(*GetOfferReply)(nil),                             // 11: io.bisq.protobuffer.GetOfferReply
	(*GetMyBsqSwapOfferReply)(nil),                    // 12: io.bisq.protobuffer.GetMyBsqSwapOfferReply
	(*GetMyOfferRequest)(nil),                         // 13: io.bisq.protobuffer.GetMyOfferRequest
	(*GetMyOfferReply)(nil),                           // 14: io.bisq.protobuffer.GetMyOfferReply
	(*GetOffersRequest)(nil),                          // 15: io.bisq.protobuffer.GetOffersRequest
	(*GetOffersReply)(nil),                            // 16: io.bisq.protobuffer.GetOffersReply
	(*GetBsqSwapOffersRequest)(nil),                   // 17: io.bisq.protobuffer.GetBsqSwapOffersRequest
	(*GetBsqSwapOffersReply)(nil),                     // 18: io.bisq.protobuffer.GetBsqSwapOffersReply
	(*GetMyOffersRequest)(nil),                        // 19: io.bisq.protobuffer.GetMyOffersRequest
	(*GetMyOffersReply)(nil),                          // 20: io.bisq.protobuffer.GetMyOffersReply
	(*GetMyBsqSwapOffersReply)(nil),                   // 21: io.bisq.protobuffer.GetMyBsqSwapOffersReply
	(*CreateBsqSwapOfferRequest)(nil),                 // 22: io.bisq.protobuffer.CreateBsqSwapOfferRequest
	(*CreateBsqSwapOfferReply)(nil),                   // 23: io.bisq.protobuffer.CreateBsqSwapOfferReply
	(*CreateOfferRequest)(nil),                        // 24: io.bisq.protobuffer.CreateOfferRequest
	(*CreateOfferReply)(nil),                          // 25: io.bisq.protobuffer.CreateOfferReply
	(*EditOfferRequest)(nil),                          // 26: io.bisq.protobuffer.EditOfferRequest
	(*EditOfferReply)(nil),                            // 27: io.bisq.protobuffer.EditOfferReply
	(*CancelOfferRequest)(nil),                        // 28: io.bisq.protobuffer.CancelOfferRequest
	(*CancelOfferReply)(nil),                          // 29: io.bisq.protobuffer.CancelOfferReply
	(*OfferInfo)(nil),                                 // 30: io.bisq.protobuffer.OfferInfo
	(*AvailabilityResultWithDescription)(nil),         // 31: io.bisq.protobuffer.AvailabilityResultWithDescription
	(*CreatePaymentAccountRequest)(nil),               // 32: io.bisq.protobuffer.CreatePaymentAccountRequest
	(*CreatePaymentAccountReply)(nil),                 // 33: io.bisq.protobuffer.CreatePaymentAccountReply
	(*GetPaymentAccountsRequest)(nil),                 // 34: io.bisq.protobuffer.GetPaymentAccountsRequest
	(*GetPaymentAccountsReply)(nil),                   // 35: io.bisq.protobuffer.GetPaymentAccountsReply
	(*GetPaymentMethodsRequest)(nil),                  // 36: io.bisq.protobuffer.GetPaymentMethodsRequest
	(*GetPaymentMethodsReply)(nil),                    // 37: io.bisq.protobuffer.GetPaymentMethodsReply
	(*GetPaymentAccountFormRequest)(nil),              // 38: io.bisq.protobuffer.GetPaymentAccountFormRequest
	(*GetPaymentAccountFormReply)(nil),                // 39: io.bisq.protobuffer.GetPaymentAccountFormReply
	(*CreateCryptoCurrencyPaymentAccountRequest)(nil), // 40: io.bisq.protobuffer.CreateCryptoCurrencyPaymentAccountRequest
	(*CreateCryptoCurrencyPaymentAccountReply)(nil),   // 41: io.bisq.protobuffer.CreateCryptoCurrencyPaymentAccountReply
	(*GetCryptoCurrencyPaymentMethodsRequest)(nil),    // 42: io.bisq.protobuffer.GetCryptoCurrencyPaymentMethodsRequest
	(*GetCryptoCurrencyPaymentMethodsReply)(nil),      // 43: io.bisq.protobuffer.GetCryptoCurrencyPaymentMethodsReply
	(*MarketPriceRequest)(nil),                        // 44: io.bisq.protobuffer.MarketPriceRequest
	(*MarketPriceReply)(nil),                          // 45: io.bisq.protobuffer.MarketPriceReply
	(*StopRequest)(nil),                               // 46: io.bisq.protobuffer.StopRequest
	(*StopReply)(nil),                                 // 47: io.bisq.protobuffer.StopReply
	(*TakeOfferRequest)(nil),                          // 48: io.bisq.protobuffer.TakeOfferRequest
	(*TakeOfferReply)(nil),                            // 49: io.bisq.protobuffer.TakeOfferReply
	(*ConfirmPaymentStartedRequest)(nil),              // 50: io.bisq.protobuffer.ConfirmPaymentStartedRequest
	(*ConfirmPaymentStartedReply)(nil),                // 51: io.bisq.protobuffer.ConfirmPaymentStartedReply
	(*ConfirmPaymentReceivedRequest)(nil),             // 52: io.bisq.protobuffer.ConfirmPaymentReceivedRequest
	(*ConfirmPaymentReceivedReply)(nil),               // 53: io.bisq.protobuffer.ConfirmPaymentReceivedReply
	(*GetTradeRequest)(nil),                           // 54: io.bisq.protobuffer.GetTradeRequest
	(*GetTradeReply)(nil),                             // 55: io.bisq.protobuffer.GetTradeReply
	(*GetTradesRequest)(nil),                          // 56: io.bisq.protobuffer.GetTradesRequest
	(*GetTradesReply)(nil),                            // 57: io.bisq.protobuffer.GetTradesReply
	(*CloseTradeRequest)(nil),                         // 58: io.bisq.protobuffer.CloseTradeRequest
	(*CloseTradeReply)(nil),                           // 59: io.bisq.protobuffer.CloseTradeReply
	(*FailTradeRequest)(nil),                          // 60: io.bisq.protobuffer.FailTradeRequest
	(*FailTradeReply)(nil),                            // 61: io.bisq.protobuffer.FailTradeReply
	(*UnFailTradeRequest)(nil),                        // 62: io.bisq.protobuffer.UnFailTradeRequest
	(*UnFailTradeReply)(nil),                          // 63: io.bisq.protobuffer.UnFailTradeReply
	(*WithdrawFundsRequest)(nil),                      // 64: io.bisq.protobuffer.WithdrawFundsRequest
	(*WithdrawFundsReply)(nil),                        // 65: io.bisq.protobuffer.WithdrawFundsReply
	(*TradeInfo)(nil),                                 // 66: io.bisq.protobuffer.TradeInfo
	(*ContractInfo)(nil),                              // 67: io.bisq.protobuffer.ContractInfo
	(*BsqSwapTradeInfo)(nil),                          // 68: io.bisq.protobuffer.BsqSwapTradeInfo
	(*PaymentAccountPayloadInfo)(nil),                 // 69: io.bisq.protobuffer.PaymentAccountPayloadInfo
	(*TxFeeRateInfo)(nil),                             // 70: io.bisq.protobuffer.TxFeeRateInfo
	(*TxInfo)(nil),                                    // 71: io.bisq.protobuffer.TxInfo
	(*GetBalancesRequest)(nil),                        // 72: io.bisq.protobuffer.GetBalancesRequest
	(*GetBalancesReply)(nil),                          // 73: io.bisq.protobuffer.GetBalancesReply
	(*GetAddressBalanceRequest)(nil),                  // 74: io.bisq.protobuffer.GetAddressBalanceRequest
	(*GetAddressBalanceReply)(nil),                    // 75: io.bisq.protobuffer.GetAddressBalanceReply
	(*GetUnusedBsqAddressRequest)(nil),                // 76: io.bisq.protobuffer.GetUnusedBsqAddressRequest
	(*GetUnusedBsqAddressReply)(nil),                  // 77: io.bisq.protobuffer.GetUnusedBsqAddressReply
	(*SendBsqRequest)(nil),                            // 78: io.bisq.protobuffer.SendBsqRequest
	(*SendBsqReply)(nil),                              // 79: io.bisq.protobuffer.SendBsqReply
	(*SendBtcRequest)(nil),                            // 80: io.bisq.protobuffer.SendBtcRequest
	(*SendBtcReply)(nil),                              // 81: io.bisq.protobuffer.SendBtcReply
	(*VerifyBsqSentToAddressRequest)(nil),             // 82: io.bisq.protobuffer.VerifyBsqSentToAddressRequest
	(*VerifyBsqSentToAddressReply)(nil),               // 83: io.bisq.protobuffer.VerifyBsqSentToAddressReply
	(*GetTxFeeRateRequest)(nil),                       // 84: io.bisq.protobuffer.GetTxFeeRateRequest
	(*GetTxFeeRateReply)(nil),                         // 85: io.bisq.protobuffer.GetTxFeeRateReply
	(*SetTxFeeRatePreferenceRequest)(nil),             // 86: io.bisq.protobuffer.SetTxFeeRatePreferenceRequest
	(*SetTxFeeRatePreferenceReply)(nil),               // 87: io.bisq.protobuffer.SetTxFeeRatePreferenceReply
	(*UnsetTxFeeRatePreferenceRequest)(nil),           // 88: io.bisq.protobuffer.UnsetTxFeeRatePreferenceRequest
	(*UnsetTxFeeRatePreferenceReply)(nil),             // 89: io.bisq.protobuffer.UnsetTxFeeRatePreferenceReply
	(*GetTransactionRequest)(nil),                     // 90: io.bisq.protobuffer.GetTransactionRequest
	(*GetTransactionReply)(nil),                       // 91: io.bisq.protobuffer.GetTransactionReply
	(*GetFundingAddressesRequest)(nil),                // 92: io.bisq.protobuffer.GetFundingAddressesRequest
	(*GetFundingAddressesReply)(nil),                  // 93: io.bisq.protobuffer.GetFundingAddressesReply
	(*SetWalletPasswordRequest)(nil),                  // 94: io.bisq.protobuffer.SetWalletPasswordRequest
	(*SetWalletPasswordReply)(nil),                    // 95: io.bisq.protobuffer.SetWalletPasswordReply
	(*RemoveWalletPasswordRequest)(nil),               // 96: io.bisq.protobuffer.RemoveWalletPasswordRequest
	(*RemoveWalletPasswordReply)(nil),                 // 97: io.bisq.protobuffer.RemoveWalletPasswordReply
	(*LockWalletRequest)(nil),                         // 98: io.bisq.protobuffer.LockWalletRequest
	(*LockWalletReply)(nil),                           // 99: io.bisq.protobuffer.LockWalletReply
	(*UnlockWalletRequest)(nil),                       // 100: io.bisq.protobuffer.UnlockWalletRequest
	(*UnlockWalletReply)(nil),                         // 101: io.bisq.protobuffer.UnlockWalletReply
	(*BalancesInfo)(nil),                              // 102: io.bisq.protobuffer.BalancesInfo
	(*BsqBalanceInfo)(nil),                            // 103: io.bisq.protobuffer.BsqBalanceInfo
	(*BtcBalanceInfo)(nil),                            // 104: io.bisq.protobuffer.BtcBalanceInfo
	(*AddressBalanceInfo)(nil),                        // 105: io.bisq.protobuffer.AddressBalanceInfo
	(*GetVersionRequest)(nil),                         // 106: io.bisq.protobuffer.GetVersionRequest
	(*GetVersionReply)(nil),                           // 107: io.bisq.protobuffer.GetVersionReply
	(AvailabilityResult)(0),                           // 108: io.bisq.protobuffer.AvailabilityResult
	(*PaymentAccount)(nil),                            // 109: io.bisq.protobuffer.PaymentAccount
	(*PaymentMethod)(nil),                             // 110: io.bisq.protobuffer.PaymentMethod
}
var file_grpc_proto_depIdxs = []int32{
	0,   // 0: io.bisq.protobuffer.GetOfferCategoryReply.offer_category:type_name -> io.bisq.protobuffer.GetOfferCategoryReply.OfferCategory
	30,  // 1: io.bisq.protobuffer.GetBsqSwapOfferReply.bsq_swap_offer:type_name -> io.bisq.protobuffer.OfferInfo
	30,  // 2: io.bisq.protobuffer.GetOfferReply.offer:type_name -> io.bisq.protobuffer.OfferInfo
	30,  // 3: io.bisq.protobuffer.GetMyBsqSwapOfferReply.bsq_swap_offer:type_name -> io.bisq.protobuffer.OfferInfo
	30,  // 4: io.bisq.protobuffer.GetMyOfferReply.offer:type_name -> io.bisq.protobuffer.OfferInfo
	30,  // 5: io.bisq.protobuffer.GetOffersReply.offers:type_name -> io.bisq.protobuffer.OfferInfo
	30,  // 6: io.bisq.protobuffer.GetBsqSwapOffersReply.bsq_swap_offers:type_name -> io.bisq.protobuffer.OfferInfo
	30,  // 7: io.bisq.protobuffer.GetMyOffersReply.offers:type_name -> io.bisq.protobuffer.OfferInfo
	30,  // 8: io.bisq.protobuffer.GetMyBsqSwapOffersReply.bsq_swap_offers:type_name -> io.bisq.protobuffer.OfferInfo
	30,  // 9: io.bisq.protobuffer.CreateBsqSwapOfferReply.bsq_swap_offer:type_name -> io.bisq.protobuffer.OfferInfo
	30,  // 10: io.bisq.protobuffer.CreateOfferReply.offer:type_name -> io.bisq.protobuffer.OfferInfo
	1,   // 11: io.bisq.protobuffer.EditOfferRequest.edit_type:type_name -> io.bisq.protobuffer.EditOfferRequest.EditType
	108, // 12: io.bisq.protobuffer.AvailabilityResultWithDescription.availability_result:type_name -> io.bisq.protobuffer.AvailabilityResult
	109, // 13: io.bisq.protobuffer.CreatePaymentAccountReply.payment_account:type_name -> io.bisq.protobuffer.PaymentAccount
	109, // 14: io.bisq.protobuffer.GetPaymentAccountsReply.payment_accounts:type_name -> io.bisq.protobuffer.PaymentAccount
	110, // 15: io.bisq.protobuffer.GetPaymentMethodsReply.payment_methods:type_name -> io.bisq.protobuffer.PaymentMethod
	109, // 16: io.bisq.protobuffer.CreateCryptoCurrencyPaymentAccountReply.payment_account:type_name -> io.bisq.protobuffer.PaymentAccount
	110, // 17: io.bisq.protobuffer.GetCryptoCurrencyPaymentMethodsReply.payment_methods:type_name -> io.bisq.protobuffer.PaymentMethod
	66,  // 18: io.bisq.protobuffer.TakeOfferReply.trade:type_name -> io.bisq.protobuffer.TradeInfo
	31,  // 19: io.bisq.protobuffer.TakeOfferReply.failure_reason:type_name -> io.bisq.protobuffer.AvailabilityResultWithDescription
	66,  // 20: io.bisq.protobuffer.GetTradeReply.trade:type_name -> io.bisq.protobuffer.TradeInfo
	2,   // 21: io.bisq.protobuffer.GetTradesRequest.category:type_name -> io.bisq.protobuffer.GetTradesRequest.Category
	66,  // 22: io.bisq.protobuffer.GetTradesReply.trades:type_name -> io.bisq.protobuffer.TradeInfo
	30,  // 23: io.bisq.protobuffer.TradeInfo.offer:type_name -> io.bisq.protobuffer.OfferInfo
	67,  // 24: io.bisq.protobuffer.TradeInfo.contract:type_name -> io.bisq.protobuffer.ContractInfo
	68,  // 25: io.bisq.protobuffer.TradeInfo.bsq_swap_trade_info:type_name -> io.bisq.protobuffer.BsqSwapTradeInfo
	69,  // 26: io.bisq.protobuffer.ContractInfo.maker_payment_account_payload:type_name -> io.bisq.protobuffer.PaymentAccountPayloadInfo
	69,  // 27: io.bisq.protobuffer.ContractInfo.taker_payment_account_payload:type_name -> io.bisq.protobuffer.PaymentAccountPayloadInfo
	102, // 28: io.bisq.protobuffer.GetBalancesReply.balances:type_name -> io.bisq.protobuffer.BalancesInfo
	105, // 29: io.bisq.protobuffer.GetAddressBalanceReply.address_balance_info:type_name -> io.bisq.protobuffer.AddressBalanceInfo
	71,  // 30: io.bisq.protobuffer.SendBsqReply.tx_info:type_name -> io.bisq.protobuffer.TxInfo
	71,  // 31: io.bisq.protobuffer.SendBtcReply.tx_info:type_name -> io.bisq.protobuffer.TxInfo
	70,  // 32: io.bisq.protobuffer.GetTxFeeRateReply.tx_fee_rate_info:type_name -> io.bisq.protobuffer.TxFeeRateInfo
	70,  // 33: io.bisq.protobuffer.SetTxFeeRatePreferenceReply.tx_fee_rate_info:type_name -> io.bisq.protobuffer.TxFeeRateInfo
	70,  // 34: io.bisq.protobuffer.UnsetTxFeeRatePreferenceReply.tx_fee_rate_info:type_name -> io.bisq.protobuffer.TxFeeRateInfo
	71,  // 35: io.bisq.protobuffer.GetTransactionReply.tx_info:type_name -> io.bisq.protobuffer.TxInfo
	105, // 36: io.bisq.protobuffer.GetFundingAddressesReply.address_balance_info:type_name -> io.bisq.protobuffer.AddressBalanceInfo
	103, // 37: io.bisq.protobuffer.BalancesInfo.bsq:type_name -> io.bisq.protobuffer.BsqBalanceInfo
	104, // 38: io.bisq.protobuffer.BalancesInfo.btc:type_name -> io.bisq.protobuffer.BtcBalanceInfo
	3,   // 39: io.bisq.protobuffer.DisputeAgents.RegisterDisputeAgent:input_type -> io.bisq.protobuffer.RegisterDisputeAgentRequest
	5,   // 40: io.bisq.protobuffer.Help.GetMethodHelp:input_type -> io.bisq.protobuffer.GetMethodHelpRequest
	7,   // 41: io.bisq.protobuffer.Offers.GetOfferCategory:input_type -> io.bisq.protobuffer.GetOfferCategoryRequest
	10,  // 42: io.bisq.protobuffer.Offers.GetBsqSwapOffer:input_type -> io.bisq.protobuffer.GetOfferRequest
	10,  // 43: io.bisq.protobuffer.Offers.GetOffer:input_type -> io.bisq.protobuffer.GetOfferRequest
	13,  // 44: io.bisq.protobuffer.Offers.GetMyBsqSwapOffer:input_type -> io.bisq.protobuffer.GetMyOfferRequest
	13,  // 45: io.bisq.protobuffer.Offers.GetMyOffer:input_type -> io.bisq.protobuffer.GetMyOfferRequest
	17,  // 46: io.bisq.protobuffer.Offers.GetBsqSwapOffers:input_type -> io.bisq.protobuffer.GetBsqSwapOffersRequest
	15,  // 47: io.bisq.protobuffer.Offers.GetOffers:input_type -> io.bisq.protobuffer.GetOffersRequest
	17,  // 48: io.bisq.protobuffer.Offers.GetMyBsqSwapOffers:input_type -> io.bisq.protobuffer.GetBsqSwapOffersRequest
	19,  // 49: io.bisq.protobuffer.Offers.GetMyOffers:input_type -> io.bisq.protobuffer.GetMyOffersRequest
	22,  // 50: io.bisq.protobuffer.Offers.CreateBsqSwapOffer:input_type -> io.bisq.protobuffer.CreateBsqSwapOfferRequest
	24,  // 51: io.bisq.protobuffer.Offers.CreateOffer:input_type -> io.bisq.protobuffer.CreateOfferRequest
	26,  // 52: io.bisq.protobuffer.Offers.EditOffer:input_type -> io.bisq.protobuffer.EditOfferRequest
	28,  // 53: io.bisq.protobuffer.Offers.CancelOffer:input_type -> io.bisq.protobuffer.CancelOfferRequest
	32,  // 54: io.bisq.protobuffer.PaymentAccounts.CreatePaymentAccount:input_type -> io.bisq.protobuffer.CreatePaymentAccountRequest
	34,  // 55: io.bisq.protobuffer.PaymentAccounts.GetPaymentAccounts:input_type -> io.bisq.protobuffer.GetPaymentAccountsRequest
	36,  // 56: io.bisq.protobuffer.PaymentAccounts.GetPaymentMethods:input_type -> io.bisq.protobuffer.GetPaymentMethodsRequest
	38,  // 57: io.bisq.protobuffer.PaymentAccounts.GetPaymentAccountForm:input_type -> io.bisq.protobuffer.GetPaymentAccountFormRequest
	40,  // 58: io.bisq.protobuffer.PaymentAccounts.CreateCryptoCurrencyPaymentAccount:input_type -> io.bisq.protobuffer.CreateCryptoCurrencyPaymentAccountRequest
	42,  // 59: io.bisq.protobuffer.PaymentAccounts.GetCryptoCurrencyPaymentMethods:input_type -> io.bisq.protobuffer.GetCryptoCurrencyPaymentMethodsRequest
	44,  // 60: io.bisq.protobuffer.Price.GetMarketPrice:input_type -> io.bisq.protobuffer.MarketPriceRequest
	46,  // 61: io.bisq.protobuffer.ShutdownServer.Stop:input_type -> io.bisq.protobuffer.StopRequest
	54,  // 62: io.bisq.protobuffer.Trades.GetTrade:input_type -> io.bisq.protobuffer.GetTradeRequest
	56,  // 63: io.bisq.protobuffer.Trades.GetTrades:input_type -> io.bisq.protobuffer.GetTradesRequest
	48,  // 64: io.bisq.protobuffer.Trades.TakeOffer:input_type -> io.bisq.protobuffer.TakeOfferRequest
	50,  // 65: io.bisq.protobuffer.Trades.ConfirmPaymentStarted:input_type -> io.bisq.protobuffer.ConfirmPaymentStartedRequest
	52,  // 66: io.bisq.protobuffer.Trades.ConfirmPaymentReceived:input_type -> io.bisq.protobuffer.ConfirmPaymentReceivedRequest
	58,  // 67: io.bisq.protobuffer.Trades.CloseTrade:input_type -> io.bisq.protobuffer.CloseTradeRequest
	60,  // 68: io.bisq.protobuffer.Trades.FailTrade:input_type -> io.bisq.protobuffer.FailTradeRequest
	62,  // 69: io.bisq.protobuffer.Trades.UnFailTrade:input_type -> io.bisq.protobuffer.UnFailTradeRequest
	64,  // 70: io.bisq.protobuffer.Trades.WithdrawFunds:input_type -> io.bisq.protobuffer.WithdrawFundsRequest
	72,  // 71: io.bisq.protobuffer.Wallets.GetBalances:input_type -> io.bisq.protobuffer.GetBalancesRequest
	74,  // 72: io.bisq.protobuffer.Wallets.GetAddressBalance:input_type -> io.bisq.protobuffer.GetAddressBalanceRequest
	76,  // 73: io.bisq.protobuffer.Wallets.GetUnusedBsqAddress:input_type -> io.bisq.protobuffer.GetUnusedBsqAddressRequest
	78,  // 74: io.bisq.protobuffer.Wallets.SendBsq:input_type -> io.bisq.protobuffer.SendBsqRequest
	80,  // 75: io.bisq.protobuffer.Wallets.SendBtc:input_type -> io.bisq.protobuffer.SendBtcRequest
	82,  // 76: io.bisq.protobuffer.Wallets.VerifyBsqSentToAddress:input_type -> io.bisq.protobuffer.VerifyBsqSentToAddressRequest
	84,  // 77: io.bisq.protobuffer.Wallets.GetTxFeeRate:input_type -> io.bisq.protobuffer.GetTxFeeRateRequest
	86,  // 78: io.bisq.protobuffer.Wallets.SetTxFeeRatePreference:input_type -> io.bisq.protobuffer.SetTxFeeRatePreferenceRequest
	88,  // 79: io.bisq.protobuffer.Wallets.UnsetTxFeeRatePreference:input_type -> io.bisq.protobuffer.UnsetTxFeeRatePreferenceRequest
	90,  // 80: io.bisq.protobuffer.Wallets.GetTransaction:input_type -> io.bisq.protobuffer.GetTransactionRequest
	92,  // 81: io.bisq.protobuffer.Wallets.GetFundingAddresses:input_type -> io.bisq.protobuffer.GetFundingAddressesRequest
	94,  // 82: io.bisq.protobuffer.Wallets.SetWalletPassword:input_type -> io.bisq.protobuffer.SetWalletPasswordRequest
	96,  // 83: io.bisq.protobuffer.Wallets.RemoveWalletPassword:input_type -> io.bisq.protobuffer.RemoveWalletPasswordRequest
	98,  // 84: io.bisq.protobuffer.Wallets.LockWallet:input_type -> io.bisq.protobuffer.LockWalletRequest
	100, // 85: io.bisq.protobuffer.Wallets.UnlockWallet:input_type -> io.bisq.protobuffer.UnlockWalletRequest
	106, // 86: io.bisq.protobuffer.GetVersion.GetVersion:input_type -> io.bisq.protobuffer.GetVersionRequest
	4,   // 87: io.bisq.protobuffer.DisputeAgents.RegisterDisputeAgent:output_type -> io.bisq.protobuffer.RegisterDisputeAgentReply
	6,   // 88: io.bisq.protobuffer.Help.GetMethodHelp:output_type -> io.bisq.protobuffer.GetMethodHelpReply
	8,   // 89: io.bisq.protobuffer.Offers.GetOfferCategory:output_type -> io.bisq.protobuffer.GetOfferCategoryReply
	9,   // 90: io.bisq.protobuffer.Offers.GetBsqSwapOffer:output_type -> io.bisq.protobuffer.GetBsqSwapOfferReply
	11,  // 91: io.bisq.protobuffer.Offers.GetOffer:output_type -> io.bisq.protobuffer.GetOfferReply
	12,  // 92: io.bisq.protobuffer.Offers.GetMyBsqSwapOffer:output_type -> io.bisq.protobuffer.GetMyBsqSwapOfferReply
	14,  // 93: io.bisq.protobuffer.Offers.GetMyOffer:output_type -> io.bisq.protobuffer.GetMyOfferReply
	18,  // 94: io.bisq.protobuffer.Offers.GetBsqSwapOffers:output_type -> io.bisq.protobuffer.GetBsqSwapOffersReply
	16,  // 95: io.bisq.protobuffer.Offers.GetOffers:output_type -> io.bisq.protobuffer.GetOffersReply
	21,  // 96: io.bisq.protobuffer.Offers.GetMyBsqSwapOffers:output_type -> io.bisq.protobuffer.GetMyBsqSwapOffersReply
	20,  // 97: io.bisq.protobuffer.Offers.GetMyOffers:output_type -> io.bisq.protobuffer.GetMyOffersReply
	23,  // 98: io.bisq.protobuffer.Offers.CreateBsqSwapOffer:output_type -> io.bisq.protobuffer.CreateBsqSwapOfferReply
	25,  // 99: io.bisq.protobuffer.Offers.CreateOffer:output_type -> io.bisq.protobuffer.CreateOfferReply
	27,  // 100: io.bisq.protobuffer.Offers.EditOffer:output_type -> io.bisq.protobuffer.EditOfferReply
	29,  // 101: io.bisq.protobuffer.Offers.CancelOffer:output_type -> io.bisq.protobuffer.CancelOfferReply
	33,  // 102: io.bisq.protobuffer.PaymentAccounts.CreatePaymentAccount:output_type -> io.bisq.protobuffer.CreatePaymentAccountReply
	35,  // 103: io.bisq.protobuffer.PaymentAccounts.GetPaymentAccounts:output_type -> io.bisq.protobuffer.GetPaymentAccountsReply
	37,  // 104: io.bisq.protobuffer.PaymentAccounts.GetPaymentMethods:output_type -> io.bisq.protobuffer.GetPaymentMethodsReply
	39,  // 105: io.bisq.protobuffer.PaymentAccounts.GetPaymentAccountForm:output_type -> io.bisq.protobuffer.GetPaymentAccountFormReply
	41,  // 106: io.bisq.protobuffer.PaymentAccounts.CreateCryptoCurrencyPaymentAccount:output_type -> io.bisq.protobuffer.CreateCryptoCurrencyPaymentAccountReply
	43,  // 107: io.bisq.protobuffer.PaymentAccounts.GetCryptoCurrencyPaymentMethods:output_type -> io.bisq.protobuffer.GetCryptoCurrencyPaymentMethodsReply
	45,  // 108: io.bisq.protobuffer.Price.GetMarketPrice:output_type -> io.bisq.protobuffer.MarketPriceReply
	47,  // 109: io.bisq.protobuffer.ShutdownServer.Stop:output_type -> io.bisq.protobuffer.StopReply
	55,  // 110: io.bisq.protobuffer.Trades.GetTrade:output_type -> io.bisq.protobuffer.GetTradeReply
	57,  // 111: io.bisq.protobuffer.Trades.GetTrades:output_type -> io.bisq.protobuffer.GetTradesReply
	49,  // 112: io.bisq.protobuffer.Trades.TakeOffer:output_type -> io.bisq.protobuffer.TakeOfferReply
	51,  // 113: io.bisq.protobuffer.Trades.ConfirmPaymentStarted:output_type -> io.bisq.protobuffer.ConfirmPaymentStartedReply
	53,  // 114: io.bisq.protobuffer.Trades.ConfirmPaymentReceived:output_type -> io.bisq.protobuffer.ConfirmPaymentReceivedReply
	59,  // 115: io.bisq.protobuffer.Trades.CloseTrade:output_type -> io.bisq.protobuffer.CloseTradeReply
	61,  // 116: io.bisq.protobuffer.Trades.FailTrade:output_type -> io.bisq.protobuffer.FailTradeReply
	63,  // 117: io.bisq.protobuffer.Trades.UnFailTrade:output_type -> io.bisq.protobuffer.UnFailTradeReply
	65,  // 118: io.bisq.protobuffer.Trades.WithdrawFunds:output_type -> io.bisq.protobuffer.WithdrawFundsReply
	73,  // 119: io.bisq.protobuffer.Wallets.GetBalances:output_type -> io.bisq.protobuffer.GetBalancesReply
	75,  // 120: io.bisq.protobuffer.Wallets.GetAddressBalance:output_type -> io.bisq.protobuffer.GetAddressBalanceReply
	77,  // 121: io.bisq.protobuffer.Wallets.GetUnusedBsqAddress:output_type -> io.bisq.protobuffer.GetUnusedBsqAddressReply
	79,  // 122: io.bisq.protobuffer.Wallets.SendBsq:output_type -> io.bisq.protobuffer.SendBsqReply
	81,  // 123: io.bisq.protobuffer.Wallets.SendBtc:output_type -> io.bisq.protobuffer.SendBtcReply
	83,  // 124: io.bisq.protobuffer.Wallets.VerifyBsqSentToAddress:output_type -> io.bisq.protobuffer.VerifyBsqSentToAddressReply
	85,  // 125: io.bisq.protobuffer.Wallets.GetTxFeeRate:output_type -> io.bisq.protobuffer.GetTxFeeRateReply
	87,  // 126: io.bisq.protobuffer.Wallets.SetTxFeeRatePreference:output_type -> io.bisq.protobuffer.SetTxFeeRatePreferenceReply
	89,  // 127: io.bisq.protobuffer.Wallets.UnsetTxFeeRatePreference:output_type -> io.bisq.protobuffer.UnsetTxFeeRatePreferenceReply
	91,  // 128: io.bisq.protobuffer.Wallets.GetTransaction:output_type -> io.bisq.protobuffer.GetTransactionReply
	93,  // 129: io.bisq.protobuffer.Wallets.GetFundingAddresses:output_type -> io.bisq.protobuffer.GetFundingAddressesReply
	95,  // 130: io.bisq.protobuffer.Wallets.SetWalletPassword:output_type -> io.bisq.protobuffer.SetWalletPasswordReply
	97,  // 131: io.bisq.protobuffer.Wallets.RemoveWalletPassword:output_type -> io.bisq.protobuffer.RemoveWalletPasswordReply
	99,  // 132: io.bisq.protobuffer.Wallets.LockWallet:output_type -> io.bisq.protobuffer.LockWalletReply
	101, // 133: io.bisq.protobuffer.Wallets.UnlockWallet:output_type -> io.bisq.protobuffer.UnlockWalletReply
	107, // 134: io.bisq.protobuffer.GetVersion.GetVersion:output_type -> io.bisq.protobuffer.GetVersionReply
	87,  // [87:135] is the sub-list for method output_type
	39,  // [39:87] is the sub-list for method input_type
	39,  // [39:39] is the sub-list for extension type_name
	39,  // [39:39] is the sub-list for extension extendee
	0,   // [0:39] is the sub-list for field type_name
}

func init() { file_grpc_proto_init() }
func file_grpc_proto_init() {
	if File_grpc_proto != nil {
		return
	}
	file_pb_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_grpc_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterDisputeAgentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterDisputeAgentReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMethodHelpRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMethodHelpReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOfferCategoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOfferCategoryReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBsqSwapOfferReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOfferRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOfferReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMyBsqSwapOfferReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMyOfferRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMyOfferReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOffersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOffersReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBsqSwapOffersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBsqSwapOffersReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMyOffersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMyOffersReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMyBsqSwapOffersReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBsqSwapOfferRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBsqSwapOfferReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOfferRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOfferReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EditOfferRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EditOfferReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelOfferRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelOfferReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OfferInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AvailabilityResultWithDescription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePaymentAccountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePaymentAccountReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPaymentAccountsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPaymentAccountsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPaymentMethodsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPaymentMethodsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPaymentAccountFormRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPaymentAccountFormReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCryptoCurrencyPaymentAccountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCryptoCurrencyPaymentAccountReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCryptoCurrencyPaymentMethodsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCryptoCurrencyPaymentMethodsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketPriceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketPriceReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TakeOfferRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TakeOfferReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfirmPaymentStartedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfirmPaymentStartedReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfirmPaymentReceivedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfirmPaymentReceivedReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTradeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTradeReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTradesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTradesReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloseTradeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloseTradeReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FailTradeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FailTradeReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnFailTradeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnFailTradeReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WithdrawFundsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WithdrawFundsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContractInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BsqSwapTradeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentAccountPayloadInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxFeeRateInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBalancesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBalancesReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAddressBalanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAddressBalanceReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUnusedBsqAddressRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUnusedBsqAddressReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendBsqRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendBsqReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendBtcRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendBtcReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyBsqSentToAddressRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyBsqSentToAddressReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTxFeeRateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTxFeeRateReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetTxFeeRatePreferenceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetTxFeeRatePreferenceReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnsetTxFeeRatePreferenceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnsetTxFeeRatePreferenceReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTransactionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTransactionReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFundingAddressesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFundingAddressesReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetWalletPasswordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetWalletPasswordReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveWalletPasswordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveWalletPasswordReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LockWalletRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LockWalletReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnlockWalletRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnlockWalletReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BalancesInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BsqBalanceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BtcBalanceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddressBalanceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVersionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVersionReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_grpc_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   105,
			NumExtensions: 0,
			NumServices:   9,
		},
		GoTypes:           file_grpc_proto_goTypes,
		DependencyIndexes: file_grpc_proto_depIdxs,
		EnumInfos:         file_grpc_proto_enumTypes,
		MessageInfos:      file_grpc_proto_msgTypes,
	}.Build()
	File_grpc_proto = out.File
	file_grpc_proto_rawDesc = nil
	file_grpc_proto_goTypes = nil
	file_grpc_proto_depIdxs = nil
}
